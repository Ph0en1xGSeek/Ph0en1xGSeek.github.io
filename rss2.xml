<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ph0en1x Notebook</title>
    <link>https://www.ph0en1x.space/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Ph0en1x的个人博客，内容包括ACM、机器学习、数据挖掘、网络爬虫、c++、python、Java、tensorflow、数据库、实战技能、Angular等等，记录个人的学习实践经历</description>
    <pubDate>Wed, 21 Aug 2019 16:00:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>LeetCode 264 Ugly Number II</title>
      <link>https://www.ph0en1x.space/2019/08/22/leetcode264/</link>
      <guid>https://www.ph0en1x.space/2019/08/22/leetcode264/</guid>
      <pubDate>Wed, 21 Aug 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;   每一个Ugly Number必定由之前的某一Ugly Number （除了1之外）乘以2，3，5得到。用三个指针分别指向当前x2 x3 x5还没有放进队列的最小数，然后每次从三个数分别x2 x3 x5后取最小值作为新的加入队列的数，并且检查更新三个指针的指。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>   每一个Ugly Number必定由之前的某一Ugly Number （除了1之外）乘以2，3，5得到。用三个指针分别指向当前x2 x3 x5还没有放进队列的最小数，然后每次从三个数分别x2 x3 x5后取最小值作为新的加入队列的数，并且检查更新三个指针的指。</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int min3(int a, int b, int c) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a &lt; b) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a &lt; c) <span class="keyword">return</span> a;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> c;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(b &lt; c) <span class="keyword">return</span> b;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int nthUglyNumber(int n) &#123;</span><br><span class="line">        int *arr = new int[n];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        int k = <span class="number">1</span>;</span><br><span class="line">        int index2 = <span class="number">0</span>, index3 = <span class="number">0</span>, index5 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k &lt; n) &#123;</span><br><span class="line">            arr[k] = min3(arr[index2] * <span class="number">2</span>, arr[index3] * <span class="number">3</span>, arr[index5] * <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span>(arr[k] == arr[index2] * <span class="number">2</span>)</span><br><span class="line">                ++index2;</span><br><span class="line">            <span class="keyword">if</span>(arr[k] == arr[index3] * <span class="number">3</span>)</span><br><span class="line">                ++index3;</span><br><span class="line">            <span class="keyword">if</span>(arr[k] == arr[index5] * <span class="number">5</span>)</span><br><span class="line">                ++index5;</span><br><span class="line">            ++k;</span><br><span class="line">        &#125;</span><br><span class="line">        int ans = arr[k<span class="number">-1</span>];</span><br><span class="line">        delete [] arr;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/08/22/leetcode264/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Transformer结构及其应用--GPT、BERT、MT-DNN、GPT-2</title>
      <link>https://www.ph0en1x.space/2019/06/12/Transformer_Application/</link>
      <guid>https://www.ph0en1x.space/2019/06/12/Transformer_Application/</guid>
      <pubDate>Tue, 11 Jun 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;本文首先详细介绍Transformer的基本结构，然后再通过&lt;strong&gt;GPT&lt;/strong&gt;、&lt;strong&gt;BERT&lt;/strong&gt;、&lt;strong&gt;MT-DNN&lt;/strong&gt;以及&lt;strong&gt;GPT-2&lt;/strong&gt;等基于Transformer的知名应用工作的介绍并附上GitHub链接，看看Transformer如何在各个模型中中大显神威。&lt;/p&gt;
&lt;p&gt;本文首发于知乎专栏：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/69290203&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SoftWiser&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>本文首先详细介绍Transformer的基本结构，然后再通过<strong>GPT</strong>、<strong>BERT</strong>、<strong>MT-DNN</strong>以及<strong>GPT-2</strong>等基于Transformer的知名应用工作的介绍并附上GitHub链接，看看Transformer如何在各个模型中中大显神威。</p><p>本文首发于知乎专栏：<a href="https://zhuanlan.zhihu.com/p/69290203" target="_blank" rel="noopener">SoftWiser</a></p></blockquote><a id="more"></a><h1 id="一、取代RNN——Transformer"><a href="#一、取代RNN——Transformer" class="headerlink" title="一、取代RNN——Transformer"></a>一、取代RNN——Transformer</h1><p>在介绍Transformer前我们来回顾一下RNN的结构</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/RNN.png" alt=""></p><p>对RNN有一定了解的话，一定会知道，RNN有两个很明显的问题</p><ul><li>效率问题：需要逐个词进行处理，后一个词要等到前一个词的隐状态输出以后才能开始处理</li><li>如果传递距离过长还会有梯度消失、梯度爆炸和遗忘问题</li></ul><p>为了缓解传递间的梯度和遗忘问题，设计了各种各样的RNN cell，最著名的两个就是LSTM和GRU了</p><p>LSTM (Long Short Term Memory)</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/LSTM.jpg" alt=""></p><p>GRU (Gated Recurrent Unit)</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/GRU.png" alt=""></p><p>但是，引用网上一个博主的比喻，这么做就像是在给马车换车轮，为什么不直接换成汽车呢？</p><p>于是就有了我们本文要介绍的核心结构——Transformer。Transformer 是Google Brain 2017的提出的一篇工作，它针对RNN的弱点进行重新设计，解决了RNN效率问题和传递中的缺陷等，在很多问题上都超过了RNN的表现。Transfromer的基本结构如下图所示，它是一个N进N出的结构，也就是说每个Transformer单元相当于一层的RNN层，接收一整个句子所有词作为输入，然后为句子中的每个词都做出一个输出。但是与RNN不同的是，Transformer能够同时处理句子中的所有词，并且任意两个词之间的操作距离都是1，这么一来就很好地解决了上面提到的RNN的效率问题和距离问题。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/transformer1.png" alt="transformer1"></p><p>每个Transformer单元都有两个最重要的子层，分别是Self-Attention层与Feed Forward层，后面会对这两个层的详细结构做介绍。文章使用Transformer搭建了一个类似Seq2Seq的语言翻译模型，并为Encoder与Decoder设计了两种不同的Transformer结构。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/block.png" alt="block"></p><p>Decoder Transformer相对于Encoder Transformer多了一个Encoder-Decoder Attention层，用来接收来自于Encoder的输出作为参数。最终只要按照下图的方式堆叠，就可以完成Transformer Seq2Seq的结构搭建。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/transformer2.png" alt="transformer2"></p><p>举个例子介绍下如何使用这个Transformer Seq2Seq做翻译</p><ul><li><p>首先，Transformer对原语言的句子进行编码，得到memory。</p></li><li><p>第一次解码时输入只有一个&lt;SOS&gt;标志，表示句子的开始。</p></li><li><p>解码器通过这个唯一的输入得到的唯一的输出，用于预测句子的第一个词。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/transformer5.gif" alt="transformer5"></p></li><li><p>第二次解码，将第一次的输出Append到输入中，输入就变成了&lt;SOS&gt;和句子的第一个词(ground truth或上一步的预测)，解码生成的第二个输出用于预测句子的第二个词。以此类推(过程与Seq2Seq非常类似)</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/transformer6.gif" alt="transformer6"></p></li></ul><p>了解了Transformer的大致结构以及如何用它来完成翻译任务后，接下来就看看Transformer的详细结构：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/transformer3.png" alt="transformer3"></p><p>核心组件就是上面所提到的Self-Attention和Feed Forward Networks，但还有很多其他细节，接下来我们就开始逐个结构的来解读Transformer。</p><p><strong>Self Attention</strong></p><p>Self Attention就是句子中的某个词对于本身的所有词做一次Attention。算出每个词对于这个词的权重，然后将这个词表示为所有词的加权和。每一次的Self Attention操作，就像是为每个词做了一次Convolution操作或Aggregation操作。具体操作如下：</p><p>首先，每个词都要通过三个矩阵Wq, Wk, Wv进行一次线性变化，一分为三，生成每个词自己的<strong>query, key, vector</strong>三个向量。以一个词为中心进行Self Attention时，都是用这个词的key向量与每个词的query向量做点积，再通过Softmax归一化出权重。然后通过这些权重算出所有词的vector的加权和，作为这个词的输出。具体过程如下图所示</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/transformer4.png" alt="transformer4"></p><p>归一化之前需要通过除以向量的维度dk来进行标准化，所以最终Self Attention用矩阵变换的方式可以表示为</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/attention.PNG" alt="atttention"></p><p>最终每个Self Attention接受n个词向量的输入，输出n个Aggregated的向量。</p><p>上文提到Encoder中的Self Attention与Decoder中的有所不同，Encoder中的Q、K、V全部来自于上一层单元的输出，而Decoder只有Q来自于上一个Decoder单元的输出，K与V都来自于Encoder最后一层的输出。也就是说，Decoder是要通过当前状态与Encoder的输出算出权重后，将Encoder的编码加权得到下一层的状态。</p><p><strong>Masked Attention</strong></p><p>通过观察上面的结构图我们还可以发现Decoder与Encoder的另外一个不同，就是每个Decoder单元的输入层，要先经过一个Masked Attention层。那么Masked的与普通版本的Attention有什么区别呢？</p><p>Encoder因为要编码整个句子，所以每个词都需要考虑上下文的关系。所以每个词在计算的过程中都是可以看到句子中所有的词的。但是Decoder与Seq2Seq中的解码器类似，每个词都只能看到前面词的状态，所以是一个单向的Self-Attention结构。</p><p>Masked Attention的实现也非常简单，只要在普通的Self Attention的Softmax步骤之前，与(&amp;)上一个下三角矩阵M就好了</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/masked_attention.PNG" alt="masked_attention"></p><p><strong>Multi-Head Attention</strong></p><p>Multi-Head Attention就是将上述的Attention做h遍，然后将h个输出进行concat得到最终的输出。这样做可以很好地提高算法的稳定性，在很多Attention相关的工作中都有相关的应用。Transformer的实现中，为了提高Multi-Head的效率，将W扩大了h倍，然后通过view(reshape)和transpose操作将相同词的不同head的k、q、v排列在一起进行同时计算，完成计算后再次通过reshape和transpose完成拼接，相当于对于所有的head进行了一个并行处理。</p><p><strong>Position-wise Feed Forward Networks</strong></p><p>Encoder中和Decoder中经过Attention之后输出的n个向量（这里n是词的个数）都分别的输入到一个全连接层中，完成一个逐个位置的前馈网络。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/ffnx.PNG" alt="ffnx"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/FFN.png" alt="FFN"></p><p><strong>Add &amp; Norm</strong></p><p>是一个残差网络，将一层的输入与其标准化后的输出进行相加即可。Transformer中每一个Self Attention层与FFN层后面都会连一个Add &amp; Norm层。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/addnorm.png" alt="addnorm"></p><p><strong>Positional Encoding</strong></p><p>由于Transformer中既不存在RNN，也不同于CNN，句子里的所有词都被同等的看待，所以词之间就没有了先后关系。换句话说，很可能会带上和词袋模型相同的不足。为了解决这个问题，Transformer提出了Positional Encoding的方案，就是给每个输入的词向量叠加一个固定的向量来表示它的位置。文中使用的Positional Encoding如下：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/pe.PNG" alt="pe"></p><p>其中pos是词在句子中的位置，i是词向量中第i位，即将每个词的词向量为一行进行叠加，然后针对每一列都叠加上一个相位不同或波长逐渐增大的波，以此来唯一区分位置。</p><p><strong>Transformer 工作流程</strong></p><p>Transformer的工作流程就是上面介绍的每一个子流程的拼接</p><ul><li>输入的词向量首先叠加上Positional Encoding，然后输入至Transformer内</li><li>每个Encoder Transformer会进行一次Multi-head self attention-&gt;Add &amp; Normalize-&gt;FFN-&gt;Add &amp; Normalize流程，然后将输出输入至下一个Encoder中</li><li>最后一个Encoder的输出将会作为memory保留</li><li>每个Decoder Transformer会进行一次Masked Multi-head self attention-&gt;Multi-head self attention-&gt;Add &amp; Normalize-&gt;FFN-&gt;Add &amp; Normalize流程，其中Multi-head self attention时的K、V至来自于Encoder的memory。根据任务要求输出需要的最后一层Embedding。</li><li>Transformer的输出向量可以用来做各种下游任务</li></ul><p><strong>GitHub链接：</strong><a href="https://github.com/harvardnlp/annotated-transformer" target="_blank" rel="noopener">https://github.com/harvardnlp/annotated-transformer</a></p><p><strong>Post Scriptum</strong></p><p>虽然在Transformer文章中提出了一种自然语言翻译的模型，很多文章把这个模型称为Transformer。但我们还是倾向于将文章中利用Self-Attention的Encoder或Decoder的子结构称为Transformer。文中和源码中还包含了很多其他的一些优化例如<strong>学习率动态变化</strong>，<strong>Residual Dropout</strong>以及<strong>Label Smoothing</strong>在这里就不再赘述，有兴趣的朋友可以阅读相关参考文献进行了解。</p><h1 id="二、单向二阶段训练模型——OpenAI-GPT"><a href="#二、单向二阶段训练模型——OpenAI-GPT" class="headerlink" title="二、单向二阶段训练模型——OpenAI GPT"></a>二、单向二阶段训练模型——OpenAI GPT</h1><p>GPT(Generative Pre-Training)，是OpenAI在2018年提出的模型，利用Transformer模型来解决各种自然语言问题，例如分类、推理、问答、相似度等应用的模型。GPT采用了Pre-training + Fine-tuning的训练模式，使得大量无标记的数据得以利用，大大提高了这些问题的效果。</p><p>GPT就是利用Transformer进行自然语言各种任务的尝试之一，主要有以下三个要点</p><ul><li>Pre-Training的方式</li><li>单向Transformer模型</li><li>Fine-Tuning与不同输入数据结构的变化</li></ul><p>如果已经理解了Transformer的原理，那么只需要再搞懂上面的三个内容就能够对GPT有更深的认识。</p><p><strong>Pre-Training 训练方式</strong></p><p>很多机器学习任务都需要带标签的数据集作为输入完成。但是我们身边存在大量没有标注的数据，例如文本、图片、代码等等。标注这些数据需要花费大量的人力和时间，标注的速度远远不及数据产生的速度，所以带有标签的数据往往只占有总数据集很小的一部分。随着算力的不断提高，计算机能够处理的数据量逐渐增大。如果不能很好利用这些无标签的数据就显得很浪费。</p><p>所以半监督学习和预训练+微调的二阶段模式整变得越来越受欢迎。最常见的二阶段方法就是Word2Vec，使用大量无标记的文本训练出带有一定语义信息的词向量，然后将这些词向量作为下游机器学习任务的输入，就能够大大提高下游模型的泛化能力。</p><p>但是Word2Vec有一个问题，就是单个单词只能有一个Embedding。这样一来，一词多义就不能很好地进行表示。</p><p><strong>ELMo</strong>首先想到了在预训练阶段为每个词汇集其上下文信息，使用的是基于bi-LSTM的语言模型给词向量带上上下文语义信息：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/elmo_eq.PNG" alt="elmo_eq"></p><p>上式分别代表了左右两向的LSTM-RNN，他们共享输入的词向量X以及RNN各层权重S，也就是使用双向RNN两向的输出，来同时预测下一个单词(右向的下一个，左向的上一个)，具体结构如下图所示：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/elmo.PNG" alt="elmo"></p><p>但ELMo使用的是RNN来完成语言模型的预训练，那么如何使用Transformer来完成预训练呢？</p><p><strong>单向Transformer结构</strong></p><p>OpenAI GPT采用了单向Transformer完成了这项预训练任务。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/gpt1.PNG" alt="gpt1"></p><p>什么是单向Transformer？在Transformer的文章中，提到了Encoder与Decoder使用的Transformer Block是不同的。在Decoder Block中，使用了Masked Self-Attention，即句子中的每个词，都只能对包括自己在内的前面所有词进行Attention，这就是单向Transformer。GPT使用的Transformer结构就是将Encoder中的Self-Attention替换成了Masked Self-Attention，具体结构如下图所示：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/gpt2.PNG" alt="gpt2"></p><p>由于采用的是单向的Transformer，只能看到上文的词，所以语言模型为：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/pre-training.PNG" alt="pre-training"></p><p>而训练的过程其实非常的简单，就是将句子n个词的词向量(第一个为&lt;SOS&gt;)加上Positional Encoding后输入到前面提到的Transfromer中，n个输出分别预测该位置的下一个词(&lt;SOS&gt;预测句子中的第一个词，最后一个词的预测结果不用于语言模型的训练)。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/pre-trainingx.PNG" alt="pre-trainingx"></p><p>由于使用了Masked Self-Attention，所以每个位置的词都不会“看见”后面的词，也就是预测的时候是看不见“答案”的，保证了模型的合理性，这也是为什么OpenAI采用了单向Transformer的原因。</p><p><strong>Fine-Tuning与不同输入数据结构的变化</strong></p><p>接下来就进入模型训练的第二步，运用少量的带标签数据对模型参数进行微调。</p><p>上一步中最后一个词的输出我们没有用到，在这一步中就要使用这一个输出来作为下游监督学习的输入。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/fine-tuning.PNG" alt="fine-tuning"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/fine-tuningx.PNG" alt="fine-tuningx"></p><p>为避免Fine-Tuning使得模型陷入过拟合，文中还提到了辅助训练目标的方法，类似于一个多任务模型或者半监督学习。具体方法就是在使用最后一个词的预测结果进行监督学习的同时，前面的词继续上一步的无监督训练，使得最终的损失函数成为：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/objective.PNG" alt="objective"></p><p>针对不同任务，需要修改输入数据的格式：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/gpt3.PNG" alt="gpt3"></p><ul><li>Classification：对于分类问题，不需要做什么修改</li><li>Entailment：对于推理问题，可以将先验与假设使用一个分隔符分开</li><li>Similarity：对于相似度问题，由于模型是单向的，但相似度与顺序无关。所以需要将两个句子顺序颠倒后两次输入的结果相加来做最后的推测</li><li>Multiple Choice：对于问答问题，则是将上下文、问题放在一起与答案分隔开，然后进行预测</li></ul><p><strong>GitHub链接：</strong><a href="https://github.com/openai/finetune-transformer-lm" target="_blank" rel="noopener">https://github.com/openai/finetune-transformer-lm</a></p><p><strong>Post Scriptum</strong></p><p>OpenAI GPT在Transformer的运用和二阶段训练方式上做出了很好的探索，也取得了非常不错的效果，为后面的BERT铺平了道路。</p><h1 id="三、双向二阶段训练模型——BERT"><a href="#三、双向二阶段训练模型——BERT" class="headerlink" title="三、双向二阶段训练模型——BERT"></a>三、双向二阶段训练模型——BERT</h1><p>BERT(Bidirectional Encoder Representation from Transformer)，是Google Brain在2018年提出的基于Transformer的自然语言表示框架。一提出就获得了大量的关注。BERT与GPT一样，采取了Pre-training + Fine-tuning的训练方式，在分类、标注等任务下都获得了更好的效果。</p><p>BERT与GPT非常的相似，都是基于Transformer的二阶段训练模型，都分为Pre-Training与Fine-Tuning两个阶段，都在Pre-Training阶段无监督地训练出一个可通用的Transformer模型，然后在Fine-Tuning阶段对这个模型中的参数进行微调，使之能够适应不同的下游任务。</p><p>虽然BERT与GPT看上去非常的相似，但是它们的训练目标和模型结构和使用上还是有着些许的不同：</p><ul><li>GPT采用的是单向的Transformer，而BERT采用的是双向的Transformer，也就是不用进行Mask操作；</li><li>使用的结构的不同，直接导致了它们在Pre-Training阶段训练目标的不同；</li></ul><p><strong>双向Transformer</strong></p><p>BERT采用的是不经过Mask的Transformer，也就是与Transformer文章中的Encoder Transformer结构完全一样：</p><p>GPT中因为要完成语言模型的训练，也就要求Pre-Training预测下一个词的时候只能够看见当前以及之前的词，这也是GPT放弃原本Transformer的双向结构转而采用单向结构的原因。</p><p>BERT为了能够同时得到上下文的信息，而不是像GPT一样完全放弃下文信息，采用了双向的Transformer。但是这样一来，就无法再像GPT一样采用正常的语言模型来预训练了，因为BERT的结构导致每个Transformer的输出都可以看见整个句子的，无论你用这个输出去预测什么，都会“看见”参考答案，也就是“see itself”的问题。ELMo中虽然采用的是双向RNN，但是两个RNN之间是独立的，所以可以避免see itself的问题。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/bert1.PNG" alt="bert1"></p><p><strong>Pre-Training阶段</strong></p><p>那么BERT想用双向的Transformer模型，就不得不放弃GPT中所采用的语言模型来作为预训练的目标函数。取而代之的，BERT提出了一种完全不同的预训练方法。</p><ul><li><p>Masked Language Model (MLM)</p><p>在Transformer中，我们即想要知道上文的信息，又想要知道下文的信息，但同时要保证整个模型不知道要预测词的信息，那么就干脆不要告诉模型这个词的信息就可以了。也就是说，BERT在输入的句子中，挖掉一些需要预测的词，然后通过上下文来分析句子，最终使用其相应位置的输出来预测被挖掉的词。这其实就像是在做完形填空 (Cloze)一样。</p><p>但是，直接将大量的词替换为&lt;MASK&gt;标签可能会造成一些问题，模型可能会认为只需要预测&lt;MASK&gt;相应的输出就行，其他位置的输出就无所谓。同时Fine-Tuning阶段的输入数据中并没有&lt;MASK&gt;标签，也有数据分布不同的问题。为了减轻这样训练带来的影响，BERT采用了如下的方式：</p><ol><li>输入数据中随机选择15%的词用于预测，这15%的词中，</li><li>80%的词向量输入时被替换为&lt;MASK&gt;</li><li>10%的词的词向量在输入时被替换为其他词的词向量</li><li>另外10%保持不动</li></ol><p>这样一来就相当于告诉模型，我可能给你答案，也可能不给你答案，也可能给你错误的答案，有&lt;MASK&gt;的地方我会检查你的答案，没&lt;MASK&gt;的地方我也可能检查你的答案，所以&lt;MASK&gt;标签对你来说没有什么特殊意义，所以无论如何，你都要好好预测所有位置的输出。</p></li><li><p>Next Sentence Prediction (NSP)</p><p>BERT还提出了另外一种预训练方式NSP，与MLM同时进行，组成多任务预训练。这种预训练的方式就是往Transformer中输入连续的两个句子，左边的句子前面加上一个&lt;CLS&gt;标签，它的输出被用来判断两个句子之间是否是连续上下文关系。采用负采样的方法，正负样本各占50%。</p><p>为了区分两个句子的前后关系，BERT除了加入了Positional Encoding之外，还两外加入了一个在预训练时需要学习的Segment Embedding来区分两个句子。这样一来，BERT的输入就由词向量、位置向量、段向量三个部分相加组成。此外，两个句子之间使用&lt;SEP&gt;标签予以区分。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/bert2.PNG" alt="bert2"></p></li></ul><p>整体Pre-Training的示意图如下：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/bert3.PNG" alt="bert3"></p><p><strong>Fine-Tuning阶段</strong></p><p>BERT的Fine-Tuning阶段和GPT没有太大区别。因为采用了双向的Transformer所以放弃了GPT在Fine-Tuning阶段使用的辅助训练目标，也就是语言模型。此外就是将分类预测用的输出向量从GPT的最后一个词的输出位置改为了句子开头&lt;CLS&gt;的位置了。不同的任务Fine-Tuning的示意图如下：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/bert4.PNG" alt="bert4"></p><p><strong>GitHub链接：</strong><a href="https://github.com/google-research/bert" target="_blank" rel="noopener">https://github.com/google-research/bert</a></p><p><strong>Post Scriptum</strong></p><p>个人认为，BERT只是GPT模型的一种trade-off，为了在两个阶段都能够同时获得句子上下文的信息，使用了双向Transformer模型。但是为此却要付出失去传统语言模型的代价，转而采用MLM+NSP这种更加复杂的方式进行预训练。</p><h1 id="四、多任务模型——MT-DNN"><a href="#四、多任务模型——MT-DNN" class="headerlink" title="四、多任务模型——MT-DNN"></a>四、多任务模型——MT-DNN</h1><p>MT-DNN (Multi-Task Deep Neural Networks) 依然采用了BERT的二阶段训练方法以及双向Transformer。在Pre-Training阶段，MT-DNN与BERT几乎完全一样，但是在Fine-Tuning阶段，MT-DNN采用了多任务的微调方式。<strong>同时</strong>采用Transformer输出的上下文Embedding进行单句分类、文本对相似度、文本对分类以及问答等任务的训练。整个结构如下图所示：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/mtdnn.PNG" alt="mtdnn"></p><p><strong>GitHub链接：</strong><a href="https://github.com/namisan/mt-dnn" target="_blank" rel="noopener">https://github.com/namisan/mt-dnn</a></p><h1 id="五、单向通用模型——GPT-2"><a href="#五、单向通用模型——GPT-2" class="headerlink" title="五、单向通用模型——GPT-2"></a>五、单向通用模型——GPT-2</h1><p>GPT-2继续沿用了原来在GPT种使用的单向Transformer模型，而这篇文章的目的就是尽可能利用单向Transformer的优势，做一些BERT使用的双向Transformer所做不到的事。那就是通过上文生成下文文本。</p><p>GPT-2的想法就是<strong>完全舍弃Fine-Tuning过程</strong>，转而使用一个容量更大、无监督训练、更加通用的语言模型来完成各种各样的任务。我们完全不需要去定义这个模型应该做什么任务，因为很多标签所蕴含的信息，就存在于语料当中。就像一个人如果博览群书，自然可以根据看过的内容轻松的做到自动摘要、问答、续写文章这些事。</p><p>严格来说GPT-2可能不算是一个多任务模型，但是它确实使用相同的模型、相同的参数完成了不同的任务。那么GPT-2是怎么使用语言模型完成多种任务的呢？</p><p>通常我们针对特定任务训练的专用模型，给定输入，就可以返回这个任务相应的输出，也就是</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/gpt2_1.PNG" alt="gpt2_1"></p><p>那么如果我们希望设计一个通用的模型，这个模型在给定输入的同时还需要给定任务类型，然后根据给定输入与任务来做出相应的输出，那么模型就可以表示成下面这个样子</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BERT/gpt2_2.PNG" alt="gpt2_2"></p><p>就好像原来我需要翻译一个句子，需要专门设计一个翻译模型，想要问答系统需要专门设计一个问答模型。但是如果一个模型足够聪明，并且能够根据你的上文生成下文，那我们就可以通过在输入中加入一些标识符就可以区分各种问题。比如可以直接问他：(‘自然语言处理’, 中文翻译)来得到我们需要的结果Nature Language Processing。在我的理解中GPT-2更像是一个无所不知的问答系统，通过告知一个给定任务的标识符，就可以对多种领域的问答、多种任务做出合适的回答。GPT-2满足零样本设置 (zero-shot setting)， 在训练的过程中不需要告诉他应该完成什么样的任务，预测是也能给出较为合理的回答。</p><p>那么GPT-2为了做到上面这些要求，做了哪些工作呢？</p><ol><li><p>拓宽并加大数据集</p><p>首先就是要让模型博览群书，如果训练样本都不够多，那还怎么进行推理？前面的工作都是针对某一个特定问题的，所以数据集都比较片面。GPT-2收集了一个规模更大、范围更广的数据集。同时呢，要保证这个数据集的质量，保留那些拥有高质量内容的网页。最终组成了一个800万个文本，40G的数据集WebText。</p></li><li><p>扩大网络容量</p><p>书多了脑袋容量也得带一些要不然记不住书里的东西。为了提高网络的容量，使其拥有更强的学习潜力，GPT-2将Transformer堆叠的层数增加到48层，隐层的维度为1600，参数量达到了15亿。</p></li><li><p>调整网络结构</p><p>GPT-2将词汇表提升到50257，最大的上下文大小 (context size) 从GPT的512提升到了1024，batchsize从512提升为1024。此外还对Transformer做出了小调整，标准化层放到没每个sub-block之前，最后一个Self-attention后又增加了一个标准化层；改变了残差层的初始化方法等等。</p></li></ol><p><strong>GitHub链接：</strong><a href="https://github.com/openai/gpt-2" target="_blank" rel="noopener">https://github.com/openai/gpt-2</a></p><p><strong>Post Scriptum</strong></p><p>GPT-2其实最惊人的是其极强的生成能力，而如此强大的生成能力主要还是要归功于其数据质量以及惊人参数量和数据规模。GPT-2的参数量大到用于实验的模型都还处于欠拟合状态，如果接着训练，效果还能进一步提升。</p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>总上面这些关于Transformer工作的发展中，我也整理出了一些关于深度学习发展趋势的个人心得：</p><ol><li><p>有监督模型向半监督甚至无监督方向发展</p><p>数据的规模的增长速度远远超过了数据的标注速度，这也就导致了大量无标签数据的产生。这些无标签的数据并非没有价值，相反，如果找到合适的“炼金术”，将可以从这些海量的数据中获取意想不到的价值。如何利用上这些无标签的数据来改善任务的表现变成了一个越来越无法轻视的问题。</p></li><li><p>从少量数据复杂模型到大量数据简单模型</p><p>深度神经网络的拟合能力非常的强大，一个简单的神经网络模型就足以拟合任何函数。但无奈使用越简单的网络结构完成同一个任务，对数据量的要求也更高。数据量越是上升，数据质量越是提高，往往对模型的要求就会越会降低。数据量越大，模型就越容易捕捉到符合真实世界分布的特征。Word2Vec就是一个例子，它所使用的目标函数非常的简单，但是由于使用了大量的文本，于是训练出的词向量中就包含了许多有趣的特性。</p></li><li><p>从专用模型向通用模型发展</p><p>GPT、BERT、MT-DNN、GPT-2都使用了经过预训练的通用模型来继续进行下游的机器学习任务，并不需要对模型本身再做太多的修改。如果一个模型的表达能力足够的强，训练时候使用的数据量足够的大，那么模型的通用性就会更强，就不需要针对特定的任务做太多的修改。最极端的情况就像是GPT-2这个样子，训练时甚至完全不需要知道后续的下游任务是什么，就能够训练出一个通用的多任务模型。</p></li><li><p>对数据的规模和质量提高</p><p>GPT、BERT、MT-DNN、GPT-2虽然先后刷榜，但是我认为成绩的提升中，数据规模的提升占有比结构调整更大的比重。随着模型的通用化和简单化，为提升模型的性能，今后更多的注意力将会从如何设计一个复杂、专用的模型转移到如何获取、清洗、精化出质量更加出众的、大量的数据上。数据的处理方式调整的作用将会大于模型结构调整的作用。</p></li></ol><p>综上所述，DL竞赛迟早要成为大厂间拼资源、拼算力的较量。可能几年内就会出现一个新的课题：绿色AI，低碳AI，可持续AI。。。</p><p>以上😂</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] Vaswani A, Shazeer N, Parmar N, et al. Attention is All you Need[J]. neural information processing systems, 2017: 5998-6008.</p><p>[2] <a href="http://nlp.seas.harvard.edu/2018/04/03/attention.html" target="_blank" rel="noopener">http://nlp.seas.harvard.edu/2018/04/03/attention.html</a></p><p>[3] <a href="https://jalammar.github.io/illustrated-transformer/" target="_blank" rel="noopener">https://jalammar.github.io/illustrated-transformer/</a></p><p>[4] Radford, Alec, et al. “Improving language understanding by generative pre-training.” URL <a href="https://s3-us-west-2" target="_blank" rel="noopener">https://s3-us-west-2</a>. amazonaws. com/openai-assets/research-covers/languageunsupervised/language understanding paper. pdf (2018).</p><p>[5] Peters M E, Neumann M, Iyyer M, et al. DEEP CONTEXTUALIZED WORD REPRESENTATIONS[J]. north american chapter of the association for computational linguistics, 2018: 2227-2237.</p><p>[6] Devlin J, Chang M, Lee K, et al. BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding[J]. arXiv: Computation and Language, 2018.</p><p>[7] Liu X, He P, Chen W, et al. Multi-Task Deep Neural Networks for Natural Language Understanding.[J]. arXiv: Computation and Language, 2019.</p><p>[8] Radford A, Wu J, Child R, et al. Language models are unsupervised multitask learners[J]. OpenAI Blog, 2019, 1(8).</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/06/12/Transformer_Application/#disqus_thread</comments>
    </item>
    
    <item>
      <title>kick start 2018 Round B</title>
      <link>https://www.ph0en1x.space/2019/05/17/kickstart2018B/</link>
      <guid>https://www.ph0en1x.space/2019/05/17/kickstart2018B/</guid>
      <pubDate>Thu, 16 May 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;No Nine&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><ol><li>No Nine</li></ol></blockquote><a id="more"></a><ol><li><p>No Nine</p><p>给定一个区间[x1, x2]，确定区间内有多少个不包含9且不被9整除的数，由于两个端点都是非9数，就是求[0, x1], [0, x2]的差+1。</p><p>如果只找不包含9的数。其实就是找如果把九进制数当作十进制来看的话，落在这个区间内的九进制数有多少个0-8，10-18，……</p><p>从十位(第1位)数开始往后，每位下面都包含完整9^i个数</p><p>算出来有多少个不包含9的数之后，就要去掉9的倍数，最后正好每组9个数中有1个是9的倍数</p><p>例如12345，剔除包含9的数之后剩下9个一组的00000-00008，00010-00018，……，12330-12338。每一组必定只有一个9的倍数，所以*8/9</p><p>最后再加上12340-12345中不是9的倍数的数就行。</p></li></ol><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">long long solve(long long n) &#123;</span><br><span class="line">    long long ans = <span class="number">0</span>;</span><br><span class="line">    long long last_ans = <span class="number">0</span>;</span><br><span class="line">    long long n_0 = n % <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(long long i = <span class="number">0</span>; i &lt;= n_0; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>((n - i) % <span class="number">9</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            ++last_ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    long long cnt = <span class="number">9</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        long long pos = n % <span class="number">10</span>;</span><br><span class="line">        ans += pos * cnt;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">        cnt *= <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = ans / <span class="number">9</span> * <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">return</span> last_ans + ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    long long f, l;</span><br><span class="line">    <span class="keyword">for</span>(int c = <span class="number">1</span>; c &lt;= t; ++c) &#123;</span><br><span class="line">        cin &gt;&gt; f &gt;&gt; l;</span><br><span class="line">        long long ans = solve(l) - solve(f) + <span class="number">1</span>;</span><br><span class="line">        printf(<span class="string">"Case #%d: %lld\n"</span>, c, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/05/17/kickstart2018B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>kick start 2018 Round A</title>
      <link>https://www.ph0en1x.space/2019/05/17/kickstart2018A/</link>
      <guid>https://www.ph0en1x.space/2019/05/17/kickstart2018A/</guid>
      <pubDate>Thu, 16 May 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Even Digits&lt;/li&gt;
&lt;li&gt;Lucky Dip&lt;/li&gt;
&lt;li&gt;Scrambled Words&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><ol><li>Even Digits</li><li>Lucky Dip</li><li>Scrambled Words</li></ol></blockquote><a id="more"></a><ol><li><p>Even Digits</p><p>给一个数，找离他最近的不包含奇数位的数。</p><p>思路：从左到右找第一个奇数，首先判断是要找比他大的数还是比他小的数（+1还是-1）。这取决于后面的数以及这位数的情况。</p><p>如果这位数位9，一定是找比他小的，因为+1将会造成进位，高位为了保持偶数需要进两位，肯定比-1要大。</p><p>如果后面的数小于4444……（字典序比较一下），则找比他小的，奇数位-1，后面改成8888……</p><p>如果后面的数大于4444……，则找比他大的，奇数位+1（不是9，不会进位），后面改成0000……</p><p>最后相减获得答案</p></li></ol><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">#include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"></span><br><span class="line">using std::cin;</span><br><span class="line">using std::cout;</span><br><span class="line">using std::endl;</span><br><span class="line">using std::string;</span><br><span class="line"></span><br><span class="line">bool judge(char* ch, int pos, int len) &#123;</span><br><span class="line">    <span class="keyword">for</span>(int i = pos; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[i] &gt; <span class="string">'4'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> true;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch[i] &lt; <span class="string">'4'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int t;</span><br><span class="line">    char num[<span class="number">20</span>];</span><br><span class="line">    char new_num[<span class="number">20</span>];</span><br><span class="line">    long long ans;</span><br><span class="line">    int flag;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; t) &#123;</span><br><span class="line">        <span class="keyword">for</span>(int c = <span class="number">1</span>; c &lt;= t; ++c) &#123;</span><br><span class="line">            </span><br><span class="line">            getchar();</span><br><span class="line">            scanf(<span class="string">"%s"</span>, num);</span><br><span class="line">            flag = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; strlen(num); ++i) &#123;</span><br><span class="line">                new_num[i] = num[i];</span><br><span class="line">                <span class="keyword">if</span>((num[i] - <span class="string">'0'</span>) % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == strlen(num) - <span class="number">1</span>) &#123;</span><br><span class="line">                        --new_num[i];</span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!judge(num, i+<span class="number">1</span>, strlen(num)) || (num[i] - <span class="string">'0'</span>) == <span class="number">9</span>)&#123;</span><br><span class="line">                        --new_num[i];</span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        ++i;</span><br><span class="line">                        <span class="keyword">while</span>(i &lt; strlen(num)) &#123;</span><br><span class="line">                            new_num[i] = <span class="string">'8'</span>;</span><br><span class="line">                            ++i;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        ++new_num[i];</span><br><span class="line">                        flag = <span class="number">1</span>;</span><br><span class="line">                        ++i;</span><br><span class="line">                        <span class="keyword">while</span>(i &lt; strlen(num)) &#123;</span><br><span class="line">                            new_num[i] = <span class="string">'0'</span>;</span><br><span class="line">                            ++i;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            new_num[strlen(num)] = <span class="string">'\0'</span>;</span><br><span class="line">            int tui = <span class="number">0</span>;</span><br><span class="line">            ans = <span class="number">0</span>;</span><br><span class="line">            long long pos = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(flag &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                printf(<span class="string">"Case #%d: %lld\n"</span>, c, <span class="number">0</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(int i = strlen(num)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                    int tmp = num[i] - new_num[i] - tui;</span><br><span class="line">                    <span class="keyword">if</span>(tmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        tui = <span class="number">1</span>;</span><br><span class="line">                        tmp += <span class="number">10</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        tui = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans += tmp * pos;</span><br><span class="line">                    pos *= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                printf(<span class="string">"Case #%d: %lld\n"</span>, c, ans);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(int i = strlen(num)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                    int tmp = new_num[i] - num[i] - tui;</span><br><span class="line">                    <span class="keyword">if</span>(tmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        tui = <span class="number">1</span>;</span><br><span class="line">                        tmp += <span class="number">10</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        tui = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans += tmp * pos;</span><br><span class="line">                    pos *= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                printf(<span class="string">"Case #%d: %lld\n"</span>, c, ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>Lucky Dip</p><p>给定一堆数，问给定放回机会数的情况下采取最优策略抽取的数的期望是多少。</p><p>最优策略是若当前抽出的数小于当前的期望，有机会放回则放回重抽。所以每多一次机会的情况就是小于当前期望的所有数的期望变成当前的期望，然后计算新的期望。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">double</span> sum;</span><br><span class="line">    <span class="keyword">double</span> tmp_e;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= t; ++c) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; arr(n);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; suffix_sum(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;arr[i]);</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        tmp_e = sum / n;</span><br><span class="line">        sort(arr.begin(), arr.end());</span><br><span class="line">        suffix_sum[n<span class="number">-1</span>] = arr[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            suffix_sum[i] = suffix_sum[i+<span class="number">1</span>] + arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(arr[mid] &lt; tmp_e) &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l == <span class="number">0</span>) &#123;</span><br><span class="line">                tmp_e = arr[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                tmp_e = (l * tmp_e + suffix_sum[l]) / n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %.6lf\n"</span>, c, tmp_e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>Scrambled Words</p><p>给定一段文本的生成规则，生成文本后，给定一个字典，问有多少个字典中的词的乱序（除了首位字母之外，其他字母可以随意排列）在文本中出现。</p><p>由于字典中词不同的长度种类不会太多，题目中说总长度为1e5，那么长度数X*(X+1) &lt;= 1e5</p><p>所以统计不同的长度，使用字符串的首尾字符以及字符的频数来作为一个字符串的key建立hash表。</p></li></ol><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_CHARACTER 26</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Key</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> first;</span><br><span class="line">    <span class="keyword">char</span> last;</span><br><span class="line">    <span class="built_in">array</span>&lt;<span class="keyword">int</span>, NUM_CHARACTER&gt; freq;</span><br><span class="line">    Key(<span class="built_in">string</span> &amp;s) &#123;</span><br><span class="line">        freq.fill(<span class="number">0</span>);</span><br><span class="line">        first = s[<span class="number">0</span>];</span><br><span class="line">        last = s[s.size()<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.size(); ++j) &#123;</span><br><span class="line">            ++freq[s[j] - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Key &amp;k) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (first == k.first &amp;&amp; last == k.last &amp;&amp; freq == k.freq);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="built_in">std</span> &#123;</span><br><span class="line">    <span class="keyword">template</span>&lt;&gt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hash</span>&lt;Key&gt; &#123;</span></span><br><span class="line">        <span class="keyword">size_t</span> <span class="keyword">operator</span>()(<span class="keyword">const</span> Key &amp;k) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">size_t</span> ret = <span class="number">17</span>, seed = <span class="number">31</span>;</span><br><span class="line">            ret = ret * seed + k.first;</span><br><span class="line">            ret = ret * seed + k.last;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> item: k.freq) &#123;</span><br><span class="line">                ret = ret * seed + item;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, l, n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a, b, c, d;</span><br><span class="line">    <span class="keyword">char</span> s1, s2;</span><br><span class="line">    <span class="built_in">string</span> tmp;</span><br><span class="line">    <span class="built_in">string</span> text;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;Key, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; len_set;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ca = <span class="number">1</span>; ca &lt;= t; ++ca) &#123;</span><br><span class="line">        mp.clear();</span><br><span class="line">        len_set.clear();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;l);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">            len_set.insert(tmp.size());</span><br><span class="line">            <span class="function">Key <span class="title">key</span><span class="params">(tmp)</span></span>;</span><br><span class="line">            ++mp[key];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">        x.resize(n);</span><br><span class="line">        text.resize(n);</span><br><span class="line">        text[<span class="number">0</span>] = s1;</span><br><span class="line">        text[<span class="number">1</span>] = s2;</span><br><span class="line">        x[<span class="number">0</span>] = text[<span class="number">0</span>];</span><br><span class="line">        x[<span class="number">1</span>] = text[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            x[i] = (a * x[i<span class="number">-1</span>] + b * x[i<span class="number">-2</span>] + c) % d;</span><br><span class="line">            s1 = (<span class="number">97</span> + (x[i] % <span class="number">26</span>));</span><br><span class="line">            text[i] = s1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len: len_set) &#123;</span><br><span class="line">            <span class="keyword">if</span>(len &gt; n) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> l_pos = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> r_pos = len<span class="number">-1</span>;</span><br><span class="line">            <span class="built_in">string</span> tmp_str = text.substr(l_pos, len);</span><br><span class="line">            <span class="function">Key <span class="title">len_key</span><span class="params">(tmp_str)</span></span>;</span><br><span class="line">            <span class="keyword">while</span>(r_pos &lt; text.size()) &#123;</span><br><span class="line">                <span class="keyword">auto</span> iter = mp.find(len_key);</span><br><span class="line">                <span class="keyword">if</span>(iter != mp.end()) &#123;</span><br><span class="line">                    ans += iter-&gt;second;</span><br><span class="line">                    mp.erase(iter);</span><br><span class="line">                &#125;</span><br><span class="line">                --len_key.freq[text[l_pos] - <span class="string">'a'</span>];</span><br><span class="line">                ++l_pos;</span><br><span class="line">                ++r_pos;</span><br><span class="line">                <span class="keyword">if</span>(r_pos &lt; text.size()) &#123;</span><br><span class="line">                    ++len_key.freq[text[r_pos] - <span class="string">'a'</span>];</span><br><span class="line">                    len_key.first = text[l_pos];</span><br><span class="line">                    len_key.last = text[r_pos];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, ca, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/05/17/kickstart2018A/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 134 Gas Station</title>
      <link>https://www.ph0en1x.space/2019/05/16/leetcode134/</link>
      <guid>https://www.ph0en1x.space/2019/05/16/leetcode134/</guid>
      <pubDate>Wed, 15 May 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  其实就是找到序列中最大和序列，数量为gas[i] - cost[i]，寻找的方法一样，然后就是从先走这个最大序列和的序列，然后再走之前和为负的序列。要计算和为负的累计。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  其实就是找到序列中最大和序列，数量为gas[i] - cost[i]，寻找的方法一样，然后就是从先走这个最大序列和的序列，然后再走之前和为负的序列。要计算和为负的累计。</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost) &#123;</span><br><span class="line">        int ans = <span class="number">0</span>, left = <span class="number">0</span>, accumulate = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; gas.size(); i++)&#123;</span><br><span class="line">            left += gas[i] - cost[i];</span><br><span class="line">            <span class="keyword">if</span>(left &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                ans = i+<span class="number">1</span>;</span><br><span class="line">                accumulate += left;</span><br><span class="line">                left = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left + accumulate &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/05/16/leetcode134/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 240 Search a 2D Matrix II</title>
      <link>https://www.ph0en1x.space/2019/05/03/leetcode240/</link>
      <guid>https://www.ph0en1x.space/2019/05/03/leetcode240/</guid>
      <pubDate>Thu, 02 May 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  可以从右上角或者左下角开始。以右上角为例，若这个数比target大，那么这一列都不可能，若比target小，那么这一行都不可能。这样逐渐收缩都target的位置。如果到最后都没找到target，返回false&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  可以从右上角或者左下角开始。以右上角为例，若这个数比target大，那么这一列都不可能，若比target小，那么这一行都不可能。这样逐渐收缩都target的位置。如果到最后都没找到target，返回false</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) &#123;</span><br><span class="line">        int n = matrix.size();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125;</span><br><span class="line">        int m = matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125;</span><br><span class="line">        int x = <span class="number">0</span>, y = m<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &lt; n &amp;&amp; y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[x][y] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> true;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(matrix[x][y] &lt; target) &#123;</span><br><span class="line">                ++x;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                --y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/05/03/leetcode240/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 239 Sliding Window Maximum</title>
      <link>https://www.ph0en1x.space/2019/05/02/leetcode239/</link>
      <guid>https://www.ph0en1x.space/2019/05/02/leetcode239/</guid>
      <pubDate>Wed, 01 May 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 单调队列&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 单调队列</p></blockquote><a id="more"></a><p>设置一个双向队列，按顺序将数组的下标push到队列尾，保证下标的升序，每次都检查队列头的下标是否超出了窗口，超出则pop队列头。</p><p>另外push新的下标前，要将之前下标中存储的数比自己小的pop掉。这样就能够保证所有下标对应的数是降序的。每次论队列头就是当前窗口中最大的数。</p><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            half = n // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            half = n // <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        cnt = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cnt.has_key(nums[i]):</span><br><span class="line">                cnt[nums[i]] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cnt[nums[i]] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cnt[nums[i]] &gt;= half:</span><br><span class="line">                <span class="keyword">return</span> nums[i]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/05/02/leetcode239/#disqus_thread</comments>
    </item>
    
    <item>
      <title>网络表示学习(一)--DeepWalk、LINE、Node2Vec、HARP、GraphGAN</title>
      <link>https://www.ph0en1x.space/2019/04/30/network_struct/</link>
      <guid>https://www.ph0en1x.space/2019/04/30/network_struct/</guid>
      <pubDate>Mon, 29 Apr 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;图结构数据是除了图片、文本、语音之外又一常见且重要的数据类型，例如社交网络数据、引用网络数据、和生物蛋白质数据等等。在针对图像、文本等数据的机器学习任务中，都有相对应的方法，将这些数据中的特征用一个稠密向量进行表示，然后再运用于各种各样的任务中去。网络表示学习就是将网络中结点的特征，嵌入(Embedding)至低位向量中的方法。学习到的这些向量将会保留图结构数据结点的相似性，使得一些下游机器学习任务，例如结点分类、结点聚类、连接预测、可视化等等的模型泛化性能得到增强。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/karate.PNG&quot; alt=&quot;karate&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文首先将会介绍网络表示学习最为著名的四份工作：DeepWalk、LINE、Node2Vec和SDNE。&lt;/p&gt;
&lt;p&gt;然后将会介绍两篇在AAAI18上的两篇网络结构表示学习的新工作HARP、GraphGAN&lt;/p&gt;
&lt;p&gt;本文首发于知乎专栏：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64991884&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SoftWiser&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>图结构数据是除了图片、文本、语音之外又一常见且重要的数据类型，例如社交网络数据、引用网络数据、和生物蛋白质数据等等。在针对图像、文本等数据的机器学习任务中，都有相对应的方法，将这些数据中的特征用一个稠密向量进行表示，然后再运用于各种各样的任务中去。网络表示学习就是将网络中结点的特征，嵌入(Embedding)至低位向量中的方法。学习到的这些向量将会保留图结构数据结点的相似性，使得一些下游机器学习任务，例如结点分类、结点聚类、连接预测、可视化等等的模型泛化性能得到增强。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/karate.PNG" alt="karate"></p></blockquote><p>本文首先将会介绍网络表示学习最为著名的四份工作：DeepWalk、LINE、Node2Vec和SDNE。</p><p>然后将会介绍两篇在AAAI18上的两篇网络结构表示学习的新工作HARP、GraphGAN</p><p>本文首发于知乎专栏：<a href="https://zhuanlan.zhihu.com/p/64991884" target="_blank" rel="noopener">SoftWiser</a></p><a id="more"></a><h1 id="一、DeepWalk-Online-Learning-of-Social-Representations"><a href="#一、DeepWalk-Online-Learning-of-Social-Representations" class="headerlink" title="一、DeepWalk: Online Learning of Social Representations"></a>一、DeepWalk: Online Learning of Social Representations</h1><p>DeepWalk可以称得上是这个方向上最著名的工作了，几乎所有网络表示学习相关的论文，都会引用DeepWalk作为Baseline之一，同时DeepWalk也是很多相关工作所使用的底层方法之一。可见这份工作在网络表示学习领域的地位。</p><ol><li><p><strong>Method</strong></p><p>DeepWalk最主要的贡献就是他将Network Embedding与自然语言处理中重要的Word Embedding方法Word2Vec联系了起来，使得Network Embedding问题转化为了一个Word Embedding问题。</p><p>转化方法其实很简单，就是随机游走。如下图所示，DeepWalk通过从每个结点出发n_walks次，每一步都采取均匀采样的方式选择当前结点的邻接结点作为下一步的结点随机游走。当游走的路径长度达到walk_length后，停止一次游走。这样就生成了一个个游走的序列，每个序列都称为一个walk。每个walk都被当成Word2Vec中的一个句子，而每个结点都是Word2Vec中的一个词。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/dw.PNG" alt="dw"></p><p>之后的算法几乎和Word2Vec的Skipgram版本完全一样。使用一个大小为window_size的滑动窗口作为一条walk的context，使用一个context中的中心词去推测所有context中的其他词，使用的目标函数也与Word2Vec一致。</p></li><li><p><strong>Experiments</strong></p><p>DeepWalk选择Multi-Label Classification作为评价算法Performance的指标。评价中将通过DeepWalk学习获得的Embedding按照不同的比例划分为训练集与测试集。训练集作为N个one-vs-rest对率回归分类器的训练数据，将其中置信度最高的k个类别作为结点的预测类别。其中N为类别的个数，k为结点的标签数。</p><p>实验结果如下所示：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/dw_result.PNG" alt="dw_result"></p></li></ol><h1 id="二、LINE-Large-scale-Information-Network-Embedding"><a href="#二、LINE-Large-scale-Information-Network-Embedding" class="headerlink" title="二、LINE: Large-scale Information Network Embedding"></a>二、LINE: Large-scale Information Network Embedding</h1><p>虽然DeepWalk通过随机游走的方式，将图结构数据转化为了自然语言处理的任务来完成。但是，图结构中节点的关系往往比词上下文关系更加的复杂。通常部分的图结构数据中边具有权重，使用现有的Word2Vec方法无法很好的应对这个问题。此外，在现实世界数据中，图的规模往往过于庞大，以至于存下所有的walk的开销将十分惊人。</p><ol><li><p><strong>Method</strong></p><p>LINE不再采用随机游走的方法。相反，他在图上定义了两种相似度——一阶相似度与二阶相似度。</p><ul><li>一阶相似度：一阶相似度就是要保证低维的嵌入中要保留两个结点之间的直接联系的紧密程度，换句话说就是保留结点之间的边权，若两个结点之间不存在边，那么他们之间的一阶相似度为0。例如下图中的6、7两个结点就拥有很高的一阶相似度。</li><li>二阶相似度：二阶相似度用一句俗话来概括就是“我朋友的朋友也可能是我的朋友”。他所比较的是两个结点邻居的相似程度。若两个结点拥有相同的邻居，他们也更加的相似。如果将邻居看作context，那么两个二阶相似度高的结点之间拥有相似的context。这一点与DeepWalk的目标一致。例如下图中的5、6两点拥有很高的二阶相似度。</li></ul><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/line.PNG" alt="line"></p><p>LINE的目标就是保留这两种相似度。</p><ul><li><p>LINE的一阶相似度</p><p>两个结点实际的一阶相似度表达如下：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/line1_hat.PNG" alt="line1_hat"></p><p>其中W是所有边权重之和。而两个结点embedding之间的相似度为：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/line1.PNG" alt="line1"></p><p>其中u是结点的embedding。即两个结点表示的内积套上一个 对率函数的结果。这样一来目标函数设为实际相似度与表示相似度之间的KL散度就可以了，这样一来，只要最小化KL散度(下式中约去了一些常数)，就能保证表示相似度尽量接近实际相似度。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/line1_KL.PNG" alt="line1_KL"></p></li><li><p>LINE的二阶相似度</p><p>两个结点实际的二阶相似度表达式如下：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/line2_hat.PNG" alt="line2_hat"></p><p>其中wij是边ij的权重，di是结点i的出度。两个结点embedding的相似度为：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/line2.PNG" alt="line2"></p><p>其中V为结点i的所有邻居，这里与一阶相似度不同的地方是，对于邻居结点，使用了另一组的embedding，称作context。目标函数依旧是KL散度，也就是最终，拥有相似邻居的结点，将会拥有相近的embedding。</p></li></ul><p>最终要获得同时包含有一阶相似度和二阶相似度的embedding，只需要将通过一阶相似度获得的embedding与通过二阶相似度获得的embedding拼接即可。</p></li><li><p><strong>Experiments</strong></p><p>同样也来看一下LINE在结点分类任务中的表现：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/line_result.PNG" alt="line_result"></p><p>可以看到，当考虑到一阶相似度之后，也就是边的权重后，LINE的表现效果要略好于DeepWalk。</p></li></ol><h1 id="三、Node2Vec-Scalable-Feature-Learning-for-Networks"><a href="#三、Node2Vec-Scalable-Feature-Learning-for-Networks" class="headerlink" title="三、Node2Vec: Scalable Feature Learning for Networks"></a>三、Node2Vec: Scalable Feature Learning for Networks</h1><p>Node2Vec是一份基于DeepWalk的延伸工作，它改进了DeepWalk随机游走的策略。</p><ol><li><p><strong>Method</strong></p><p>Node2Vec认为，现有的方法无法很好的保留网络的结构信息，例如下图所示，有一些点之间的连接非常紧密(比如u, s1, s2, s3, s4)，他们之间就组成了一个社区(community)。网络中可能存在着各种各样的社区，而有的结点在社区中可能又扮演着相似的角色(比如u与s6)。</p><p>Node2Vec的优化目标为以下两个：</p><ul><li>让同一个社区内的结点表示能够相互接近，或</li><li>在不同社区内扮演相似角色的结点表示也要相互接近。</li></ul><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/node2vec_community.PNG" alt="node2vec_community"></p><p>为此，Node2Vec就要在DeepWalk现有的基础上，对随机游走的策略进行优化。Node2Vec提出了两种游走策略：</p><ul><li><strong>广度优先策略</strong></li><li><strong>深度优先策略</strong></li></ul><p>就如上图的标注所示，深度优先游走策略将会限制游走序列中出现重复的结点，防止游走掉头，促进游走向更远的地方进行。而广度优先游走策略相反将会促进游走不断的回头，去访问上一步结点的其他邻居结点。</p><p>这样一来，当使用广度优先策略时，游走将会在一个社区内长时间停留，使得一个社区内的结点互相成为context，这也就达到了第一条优化目标。相反，当使用深度优先的策略的时候，游走很难在同一个社区内停留，也就达到了第二条优化目标。</p></li></ol><p>   那么如何达到这样的两种随机游走策略呢，这里需要用到两个超参数p和q用来控制深度优先策略和广度优先策略的比重，如下图所示。</p><p>   <img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/node2vec.PNG" alt="node2vec"></p><p>   假设现在游走序列从t走到v，这时候需要算出三个系数，分别作为控制下一步走向方向的偏置α</p><p>   <img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/node2vec_bias.PNG" alt="node2vec_bias"></p><p>   其中d(t, x)代表t结点到下一步结点x的最短路，最多为2。</p><ul><li>当d(t, x)=0时，表示下一步游走是回到上一步的结点；</li><li>当d(t, x)=1时，表示下一步游走跳向t的另外一个邻居结点；</li><li><p>当d(t, x)=2时，表示下一步游走向更远的结点移动。</p><p>而Node2Vec同时还考虑了边权w的影响，所以最终的偏置系数以及游走策略为</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/node2vec_bias2.PNG" alt="node2vec_bias2"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/node2vec_walk.PNG" alt="node2vec_walk"></p><p>这样一来，就可以看出，超参数p控制的是重新访问原来结点的概率，也就是保守探索系数，而超参数q控制的是游走向更远方向的概率，也就是激进探索系数。如果q较大，那么游走策略则更偏向于广度优先策略，若q较小，则偏向于深度优先策略。</p></li></ul><ol start="2"><li><p><strong>Experiments</strong></p><p>多标签分类任务中可以看出，当调整好适当的p、q值之后，Node2Vec的效果要略好于DeepWalk</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/node2vec_result.PNG" alt="node2vec_result"></p></li></ol><h1 id="四、SDNE-Structural-Deep-Network-Embedding"><a href="#四、SDNE-Structural-Deep-Network-Embedding" class="headerlink" title="四、SDNE: Structural Deep Network Embedding"></a>四、SDNE: Structural Deep Network Embedding</h1><p>LINE中提到了一阶相似度以及二阶相似度的概念，那么有没有什么办法，通过深度学习，直接将这两种相似度保留在Embedding中的方法呢？</p><p>SDNE提出了这样一个框架，能够使用深度自编码器，在训练的过程中，同时获得节点的一阶相似度和二阶相似度。首先，上面提到了二阶相似度其实是节点邻域的相似程度。换句话说，这样的相似度，其实就直接包含在邻接矩阵S的每一行中。所以SDNE直接使用一个深度自编码器，学习网络邻接矩阵的编码与重构，这样一来，二阶相似度就被保留在了Embedding中，训练相对应的损失函数为</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/sdne2.PNG" alt="sdne2"></p><p>其中x为邻接矩阵的每一行而hat{x}则代表了自编码器重构以后的邻接矩阵。B=1-S，即只针对不直接相邻的节点对进行训练。</p><p>接下来就是针对一阶相似度的损失函数了，其实很直接，因为我们最终是将自编码器的隐层当作最终的节点Embedding，所以可以直接像LINE里一样，直接使存在边的两个节点的Embedding相互接近就行了，具体的损失函数如下</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/sdne1.PNG" alt="sdne1"></p><p>y也就是我们获得的自编码器的隐层。</p><p>所以总体的结构如下所示</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/sdne.PNG" alt="sdne"></p><h1 id="五、HARP-Hierarchical-Representation-Learning-for-Networks"><a href="#五、HARP-Hierarchical-Representation-Learning-for-Networks" class="headerlink" title="五、HARP: Hierarchical Representation Learning for Networks"></a>五、HARP: Hierarchical Representation Learning for Networks</h1><p>上面介绍了DeepWalk、LINE、Node2Vec三个网络表示学习中最为著名的三种算法。但是，这三个算法都有一个共同的弱点，那就是他们所捕捉的网络结点关系过近，都是局部邻居。LINE仅仅只考虑到了一阶邻居与二阶邻居之间的相似度关系。DeepWalk与Node2Vec虽然可以通过随机游走，获得较长的游走序列，但是游走的长度比起现在图数据的规模，随机游走的长度还是太短了。所以就需要想一种方法捕捉全局的相似度。</p><ol><li><p><strong>Method</strong></p><p>HARP采取的方式就是通过多次折叠，将原来的大图层层收缩为较小的图，使得通过较短的随机游走距离，就能够覆盖所有的网络结点，然后将小图作为DeepWalk、LINE或Node2Vec的输入，学习Embedding。最后将在收缩后的小图中学习到的Embedding作为折叠前的的图的Embedding的初始化，继续学习折叠前的图的Embedding。以此类推层层学得原来大图的Embedding。HARP的算法流程如下图所示。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/harp.PNG" alt="harp"></p><p><strong>图折叠算法</strong></p><p>那么要理解HARP这个算法的关键，就在于图折叠算法。HARP的图折叠算法，主要有以下两种方法</p><ul><li><p>边折叠 (Edge Collapsing)</p><p>边折叠算法选择尽可能多的边，这些边没有共同的顶点，即每个顶点只有一条与之连接的边被选中。然后，如下图(a)所示，这些边被折叠成为一个结点，成为了折叠后的新结点。</p></li><li><p>星折叠 (Star Collapsing)</p><p>虽然边折叠在最好的情况下每一轮折叠可以将结点的数量缩减一半，这样一来图折叠算法的总次数为O(logk)。但在某些特殊情况下却不能很好的发挥作用。如下图(b)所示，星形结构是网络中最常见结构之一，在这种结构中，如果使用边折叠算法，那么就至多只能折叠一条边，算法要执行的总次数则会退化为O(k)。所以，HARP采用了另外一种折叠策略，就是星折叠。如下图(c)所示，星状网络中有两种结点，中心结点和周围节点，星折叠方法就是将同一个中心结点的周围结点两两配对，折叠成一个结点，来尽量减少星状结构的周围结点，以增强边折叠的效率。</p></li></ul><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/harp_collapse.PNG" alt="harp_collapse"></p><p>HARP在每次折叠的时候，先是使用星折叠减少星形结构，然后再执行一次边折叠。具体的图折叠算法流程如下面的伪代码所示。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/harp_algorithm.PNG" alt="harp_algorithm"></p></li><li><p><strong>Experiment</strong></p><p>通过HARP的多标签分类结果可以看出，使用HARP的图折叠和层级训练的手段后，相较于其相应的底层算法，都有一定的提升。实际上，经过我本人的实验，在更大规模的图上(结点数量达到数十万甚至上百万时)，这样的提升将会更加明显。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/harp_result.PNG" alt="harp_result"></p></li></ol><h1 id="六、GraphGAN-Graph-Representation-Learning-with-Generative-Adversarial-Nets"><a href="#六、GraphGAN-Graph-Representation-Learning-with-Generative-Adversarial-Nets" class="headerlink" title="六、GraphGAN: Graph Representation Learning with Generative Adversarial Nets"></a>六、GraphGAN: Graph Representation Learning with Generative Adversarial Nets</h1><p>GraphGAN这份工作，顾名思义，就是尝试使用生成对抗网络(Generative Adversarial Nets, GAN)来增强网络表示学习的表现。</p><ol><li><p><strong>Method</strong></p><p>要是理解GAN，那么GraphGAN的大题模块及其作用应该就能够很容易地想到。GraphGAN一共包含两个主要的模块：</p><ul><li><p>判别器</p><p>由于Network Embedding任务大多是无监督，结点本身不带有任何标签，所以判别器要判别的就是网络自身带有的信息，也就是连接信息。GraphGAN中的判别器实际上就是一个连接预测器，通过输入两个结点的Embedding来判定两个结点之间是否存在一条边。</p></li><li><p>生成器</p><p>生成器的作用就是通过合理的方式生成一些点对，然后将这些点对输入到判别器中，尽量让判别器将这两个点对误认为是在图上存在边的两个结点的Embedding。</p></li></ul><p>之后的训练过程就是生成器与判别器较量的过程。生成器不断调整每个结点的Embedding以及自己的参数，使得按照自己的规则生成出来的两个就节点对能够被判别器判别成为存在连接。而判别器则通过调整自身的参数，使自己能够准确的将图中实际存在边的结点对判定为true而将生成器生成的结点对判定为false。他们两个共同组成GraphGAN的目标函数：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/graphgan_minmax.PNG" alt="graphgan_minmax"></p></li><li><p><strong>Implemention</strong></p><p>那么GraphGAN中的判别器与生成器具体是怎么实现的呢？</p><p>前面介绍的DeepWalk、LINE、Node2Vec等方法都是先获得一些context，然后通过训练使得这些结点的Embedding相互接近，然后通过随机的负采样得到一些负样本，让这些负样本的结点之间的Embedding相互远离。事实上GraphGAN的判别器与前面工作的context训练非常相似，也是让ground truth的Embedding相互接近，让生成器生成的节点对的Embedding相互远离。</p><p>这样一来生成器看似是代替了原来负采样的过程，然而生成器却需要能够生成与ground truth尽量相似的数据，这就与原来的负采样不太一致。那么这是为什么呢？</p><p>产生这样疑惑的原因是我们从以判别器为主的角度来看待这个模型。如果我们从生成器的角度来理解这个模型的时候，这些疑惑就会得到解释。判别器仅仅只是作为训练时的目标函数的实现，它起到的作用有两个，一是让ground truth相互接近，另外一个就是给生成器提供损失函数。而一个经过精心设计的生成器，就可以利用这样的损失函数，训练出我们需要的Embedding。</p><p>下面就来介绍一下GraphGAN的生成器是如何工作的。</p><p>首先，生成器要遵守以下三个原则：</p><ul><li>Normalized，即所有结点被当作负样本的概率之和为1；</li><li>Graph-structure-aware，结点被选中负样本的概率随着据中心结点的最短路增大而减小；</li><li>Computational efficient，不能针对所有结点来计算softmax，只能关联到一个结点的小子集。</li></ul><p>算法开始前，需要生成每个结点的BFS树，然后为了选取某一个结点的负采样，需要沿着该结点的BFS树向下或向上遍历。从某个父节点转移到它的子节点或父节点的概率为：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/graphgan_p.PNG" alt="graphgan_p"></p><p>然后，一个结点最终被选取为起始结点的负样本的概率为：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/graphgan_g.PNG" alt="graphgan_g"></p><p>以下图为例子，给定一个图，现在要从vc这个点开始负采样，那么先以vc为根生成BFS树。然后再算出每个结点与其子结点的转移概率，通过这个概率采样子节点，直到哪个结点被遍历了两次，结束。输出这个重复遍历的结点作为负样本。这个遍历过程中涉及到的所有其他结点(绿色结点)都要在训练中训练到。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/graphgan.PNG" alt="graphgan"></p><p>这样的作法复合上面提出的三种原则，论文中给出了详细的证明。</p></li><li><p><strong>Experiment</strong></p><p>同样来看看GraphGAN的多标签分类的实验结果</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/embedding/graphgan_result.PNG" alt="graphgan_result"></p></li></ol><h1 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h1><p>本文介绍了几种针对网络结构进行表示学习的方法，首先是DeepWalk、LINE、Node2Vec三个最为著名的工作。之后介绍了近两年的一些针对网络结构的网络表示方法HARP和GraphGAN，了解近些年针对结构的网络表示学习的一些新思路。但是，现实中的网络中的内容远远不止结构这么简单。网络中的结点可能有不同的类别，每种结点又可能有不同的属性。所以，还需要有针对利用网络中其他信息的相关研究。</p><h1 id="八、参考文献"><a href="#八、参考文献" class="headerlink" title="八、参考文献"></a>八、参考文献</h1><p>[1] Perozzi B, Al-Rfou R, Skiena S. Deepwalk: Online learning of social representations[C]//Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining. ACM, 2014: 701-710.</p><p>[2] Tang J, Qu M, Wang M, et al. Line: Large-scale information network embedding[C]//Proceedings of the 24th international conference on world wide web. International World Wide Web Conferences Steering Committee, 2015: 1067-1077.</p><p>[3] Grover A, Leskovec J. node2vec: Scalable feature learning for networks[C]//Proceedings of the 22nd ACM SIGKDD international conference on Knowledge discovery and data mining. ACM, 2016: 855-864.</p><p>[4] Wang D, Cui P, Zhu W, et al. Structural Deep Network Embedding[C]. knowledge discovery and data mining, 2016: 1225-1234.</p><p>[5] Chen H, Perozzi B, Hu Y, et al. Harp: Hierarchical representation learning for networks[C]//Thirty-Second AAAI Conference on Artificial Intelligence. 2018.</p><p>[6] Wang H, Wang J, Wang J, et al. Graphgan: Graph representation learning with generative adversarial nets[C]//Thirty-Second AAAI Conference on Artificial Intelligence. 2018.</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/04/30/network_struct/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Nesterov Optimizer的理解与实现</title>
      <link>https://www.ph0en1x.space/2019/04/27/optimizer_nesterov/</link>
      <guid>https://www.ph0en1x.space/2019/04/27/optimizer_nesterov/</guid>
      <pubDate>Fri, 26 Apr 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 本篇笔记介绍深度学习中最简单的三种优化算法，SGD，Momentum，Nestrov的理解与实现&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 本篇笔记介绍深度学习中最简单的三种优化算法，SGD，Momentum，Nestrov的理解与实现</p></blockquote><a id="more"></a><h2 id="一、SGD"><a href="#一、SGD" class="headerlink" title="一、SGD"></a>一、SGD</h2><p>随机梯度下降法不用多说，每一个参数按照梯度的方向来减小以追求最小化损失函数</p><p>更新方式</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/sgd.png" alt="sgd"></p><p><strong>Python实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SGD</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lr=<span class="number">0.01</span>)</span>:</span></span><br><span class="line">        self.lr = lr</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, params, grads)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> params.keys():</span><br><span class="line">            params[key] -= self.lr * grads[key]</span><br></pre></td></tr></table></figure><h2 id="二-、Momentum"><a href="#二-、Momentum" class="headerlink" title="二 、Momentum"></a>二 、Momentum</h2><p>在梯度下降的基础上加入了动量，即前面的梯度将会影响本轮的梯度方向</p><p>更新方式</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/momentum.png" alt="momentum"></p><p><strong>Python实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Momentum</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lr=<span class="number">0.01</span>, momemtum=<span class="number">0.9</span>)</span>:</span></span><br><span class="line">        self.lr = lr</span><br><span class="line">        self.momemtum = momemtum</span><br><span class="line">        self.v = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, params, grads)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.v <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.v = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> key, val <span class="keyword">in</span> params.items():</span><br><span class="line">                self.v[key] = np.zeros_like(val)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> params.keys():</span><br><span class="line">            self.v[key] = self.momemtum * self.v[key] - self.lr * grads[key]</span><br><span class="line">            params[key] += self.v[key]</span><br></pre></td></tr></table></figure><h2 id="三、Nestrov"><a href="#三、Nestrov" class="headerlink" title="三、Nestrov"></a>三、Nestrov</h2><p>Nestrov也是一种动量更新的方式，但是与普通动量方式不同的是，Nestrov为了加速收敛，提前按照之前的动量走了一步，然后求导后按着梯度再走一步</p><p>更新方式</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/nestrov.png" alt="nestrov"></p><p>但是这样一来，就给实现带来了很大的麻烦，因为我们当前是在W的位置上，无法求得W+αv处的梯度，所以我们要进行一定改变。由于W与W+αv对参数来说没有什么区别，所以我们可以假设当前的参数就是W+αv。就像下图，按照Nestrov的本意，在0处应该先按照棕色的箭头走αv到1，然后求得1处的梯度，按照梯度走一步到2。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/nestrov_example.png" alt="nestrov_example"></p><p>现在，我们假设当前的W就是1处的参数，但是，当前的动量v仍然是0处的动量，那么更新方式就可以写作</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/nestrov2.png" alt="nestrov2"></p><p>但是下一轮的W应该在3处，所以W还要再走一步αv，即</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/nestrov3.png" alt="nestrov3"></p><p>或</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/nestrov4.png" alt="nestrov4"></p><p><strong>Python实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nestrov</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lr=<span class="number">0.01</span>, momentum=<span class="number">0.9</span>)</span>:</span></span><br><span class="line">        self.lr = lr</span><br><span class="line">        self.momentum = momentum</span><br><span class="line">        self.v = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, params, grads)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.v <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.v = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> key, val <span class="keyword">in</span> params.items():</span><br><span class="line">                self.v[key] = np.zeros_like(val)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> params.keys():</span><br><span class="line">            self.v[key] *= self.momentum * self.v[key] - self.lr * grads[key]</span><br><span class="line">            params[key] += self.momentum * self.v[key] - self.lr * grads[key]</span><br></pre></td></tr></table></figure><p>但是根据我看到的各个框架的代码，它们好像都把动量延迟更新了一步，所以实现起来有点不一样，我也找不到好的解释，但是再MNIST数据集上最终的结果要好于原来的实现。</p><p><strong>Python实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nestrov</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lr=<span class="number">0.01</span>, momentum=<span class="number">0.9</span>)</span>:</span></span><br><span class="line">        self.lr = lr</span><br><span class="line">        self.momentum = momentum</span><br><span class="line">        self.v = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, params, grads)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.v <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.v = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> key, val <span class="keyword">in</span> params.items():</span><br><span class="line">                self.v[key] = np.zeros_like(val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> params.keys():</span><br><span class="line">            self.v[key] *= self.momentum</span><br><span class="line">            self.v[key] -= self.lr * grads[key]</span><br><span class="line">            params[key] += self.momentum * self.momentum * self.v[key]</span><br><span class="line">            params[key] -= (<span class="number">1</span> + self.momentum) * self.lr * grads[key]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/04/27/optimizer_nesterov/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 137 Single Number II</title>
      <link>https://www.ph0en1x.space/2019/04/03/leetcode137/</link>
      <guid>https://www.ph0en1x.space/2019/04/03/leetcode137/</guid>
      <pubDate>Tue, 02 Apr 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;这题比起其他都是两个但有一个只出现一次要复杂一些，原来只需要统计（模2）出现0次，1次的情况，现在需要统计每一位出现了0次，1次和2次（模3）的状态。&lt;/li&gt;
&lt;li&gt;用one two three来统计每一位出现次数，出现在three中的可以从one two中约去&lt;/li&gt;
&lt;li&gt;每一个数，首先和one与一下，得到原来是1次，现在变成两次的情况，或到two中&lt;/li&gt;
&lt;li&gt;再和one抑或，原来是0的变成1，原来是1的由于进入two了变成0&lt;/li&gt;
&lt;li&gt;one和two与，得到出现三次的情况，把他们从one two中抑或掉或者与非掉就行&lt;/li&gt;
&lt;li&gt;最后的one就是最后的结果（模3为1）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><ol><li>这题比起其他都是两个但有一个只出现一次要复杂一些，原来只需要统计（模2）出现0次，1次的情况，现在需要统计每一位出现了0次，1次和2次（模3）的状态。</li><li>用one two three来统计每一位出现次数，出现在three中的可以从one two中约去</li><li>每一个数，首先和one与一下，得到原来是1次，现在变成两次的情况，或到two中</li><li>再和one抑或，原来是0的变成1，原来是1的由于进入two了变成0</li><li>one和two与，得到出现三次的情况，把他们从one two中抑或掉或者与非掉就行</li><li>最后的one就是最后的结果（模3为1）</li></ol></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int one = <span class="number">0</span>, two = <span class="number">0</span>, three = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            two |= (one &amp; nums[i]);</span><br><span class="line">            one ^= nums[i];</span><br><span class="line">            three = (two &amp; one);</span><br><span class="line">            one ^= three;</span><br><span class="line">            two ^= three;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> one;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/04/03/leetcode137/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 169 Majority Element</title>
      <link>https://www.ph0en1x.space/2019/04/03/leetcode229/</link>
      <guid>https://www.ph0en1x.space/2019/04/03/leetcode229/</guid>
      <pubDate>Tue, 02 Apr 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;169 Majority Element &lt;/p&gt;
&lt;p&gt;229 Majority Element II&lt;/p&gt;
&lt;p&gt;摩尔投票法&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>169 Majority Element </p><p>229 Majority Element II</p><p>摩尔投票法</p></blockquote><a id="more"></a><p>摩尔投票法</p><p>可以看作同归于尽法。当选择超过半数的数的时候，每一次都选择一个数站上擂台，或者与当前擂台上的数不同，就与其同归于尽一个，最后再扫描统计一遍站在擂台上的数出现次数，若没有超过半数则不存在超过半数的数。</p><p>同理，若要寻找超过1/3的数。擂台就设为两个，同时与两个不同的数同归于尽，最后站在擂台上的两个数再分别统计次数，若超过1/3，则是要找的数。</p><p>LeetCode 169 Majority Element</p><p><strong>Python Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            half = n // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            half = n // <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        cnt = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cnt.has_key(nums[i]):</span><br><span class="line">                cnt[nums[i]] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cnt[nums[i]] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cnt[nums[i]] &gt;= half:</span><br><span class="line">                <span class="keyword">return</span> nums[i]</span><br></pre></td></tr></table></figure><p>LeetCode 229 Majority Element II</p><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; majorityElement(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int tmp1, tmp2;</span><br><span class="line">        int cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == tmp1) &#123;</span><br><span class="line">                ++cnt1;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == tmp2) &#123;</span><br><span class="line">                ++cnt2;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cnt1 == <span class="number">0</span>) &#123;</span><br><span class="line">                tmp1 = nums[i];</span><br><span class="line">                cnt1 = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cnt2 == <span class="number">0</span>) &#123;</span><br><span class="line">                tmp2 = nums[i];</span><br><span class="line">                cnt2 = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                --cnt1;</span><br><span class="line">                --cnt2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt1 = <span class="number">0</span>;</span><br><span class="line">        cnt2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == tmp1) &#123;</span><br><span class="line">                ++cnt1;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == tmp2) &#123;</span><br><span class="line">                ++cnt2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(cnt1 &gt; nums.size() / <span class="number">3</span>) &#123;</span><br><span class="line">            res.push_back(tmp1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt2 &gt; nums.size() / <span class="number">3</span>) &#123;</span><br><span class="line">            res.push_back(tmp2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/04/03/leetcode229/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 164 Maximum Gap（桶排序）</title>
      <link>https://www.ph0en1x.space/2019/04/03/leetcode164/</link>
      <guid>https://www.ph0en1x.space/2019/04/03/leetcode164/</guid>
      <pubDate>Tue, 02 Apr 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;这题既然是hard，那么就肯定要求复杂度在O(1)内完成。&lt;/p&gt;
&lt;p&gt;考虑桶排序的方法，n个数大小相差最多为m的，那么大小相邻的两个数之间的间隔不会大于m / (n+1)&lt;/p&gt;
&lt;p&gt;然后只要按照这个间隔构造足够的桶，维护每个桶中的最大值和最小值，同一个桶中的数字间隔不会多余答案所以只需要考虑每个桶的最小值与前面出现的最大值之间的差值就可以了。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>这题既然是hard，那么就肯定要求复杂度在O(1)内完成。</p><p>考虑桶排序的方法，n个数大小相差最多为m的，那么大小相邻的两个数之间的间隔不会大于m / (n+1)</p><p>然后只要按照这个间隔构造足够的桶，维护每个桶中的最大值和最小值，同一个桶中的数字间隔不会多余答案所以只需要考虑每个桶的最小值与前面出现的最大值之间的差值就可以了。</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maximumGap(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int len = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        int mi = INT_MAX, mx = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            mi = min(mi, nums[i]);</span><br><span class="line">            mx = max(mx, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mi == mx)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        double bracket_size = (mx - mi) * <span class="number">1.0</span> / (len - <span class="number">1.0</span>);</span><br><span class="line">        int bracket_num = floor((mx - mi) / bracket_size + <span class="number">1</span>);</span><br><span class="line">        vector&lt;int&gt; bracket_mx(bracket_num, INT_MIN);</span><br><span class="line">        vector&lt;int&gt; bracket_mi(bracket_num, INT_MAX);</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            int pos = floor((nums[i] - mi) / bracket_size);</span><br><span class="line">            bracket_mx[pos] = max(bracket_mx[pos], nums[i]);</span><br><span class="line">            bracket_mi[pos] = min(bracket_mi[pos], nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        int ans = INT_MIN;</span><br><span class="line">        int pre_max = bracket_mx[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">1</span>; i &lt; bracket_num; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bracket_mi[i] != INT_MAX)&#123;</span><br><span class="line">                ans = max(ans, bracket_mi[i] - pre_max);</span><br><span class="line">                pre_max = bracket_mx[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/04/03/leetcode164/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 123 Best Time to Buy and Sell Stock III</title>
      <link>https://www.ph0en1x.space/2019/03/29/leetcode123/</link>
      <guid>https://www.ph0en1x.space/2019/03/29/leetcode123/</guid>
      <pubDate>Thu, 28 Mar 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;维护两个变量b与s，b[i]为前i日内买入的最大剩余钱量(可以为负)。s[i]为前i日卖出后的最大钱量。&lt;/li&gt;
&lt;li&gt;s[i]由b[i]迭代而来，b[i]由前一轮的s[i]迭代而来，所以只用一轮循环就可以完成更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><ol><li>维护两个变量b与s，b[i]为前i日内买入的最大剩余钱量(可以为负)。s[i]为前i日卖出后的最大钱量。</li><li>s[i]由b[i]迭代而来，b[i]由前一轮的s[i]迭代而来，所以只用一轮循环就可以完成更新。</li></ol></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxProfit(vector&lt;int&gt;&amp; prices) &#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        int b1 = <span class="number">-0x7fffffff</span>, s1 = <span class="number">0</span>, b2 = <span class="number">-0x7fffffff</span>, s2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; prices.size(); i++)&#123;</span><br><span class="line">            b1 = max(b1, -prices[i]);</span><br><span class="line">            s1 = max(s1, prices[i] + b1);</span><br><span class="line">            </span><br><span class="line">            b2 = max(b2, s1 - prices[i]);</span><br><span class="line">            s2 = max(s2, prices[i] + b2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/03/29/leetcode123/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hdu 2089 不要62</title>
      <link>https://www.ph0en1x.space/2019/03/19/hdu2089/</link>
      <guid>https://www.ph0en1x.space/2019/03/19/hdu2089/</guid>
      <pubDate>Mon, 18 Mar 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 数位dp，先预处理出所有i位数字的情况&lt;/p&gt;
&lt;p&gt; dp[i][j]，i代表数字的位数，j代表状况&lt;br&gt; dp[i][0],表示不存在不吉利数字的个数&lt;br&gt; dp[i][1],表示不存在不吉利数字，且最高位为2的个数&lt;br&gt; dp[i][2],表示存在不吉利数字的个数&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 数位dp，先预处理出所有i位数字的情况</p><p> dp[i][j]，i代表数字的位数，j代表状况<br> dp[i][0],表示不存在不吉利数字的个数<br> dp[i][1],表示不存在不吉利数字，且最高位为2的个数<br> dp[i][2],表示存在不吉利数字的个数</p></blockquote><a id="more"></a><p>从数字的最高位开始，例如98765，从9这一位开始，不幸运的个数为ans。</p><p>这一位数字如果由0~8这九个数字打头之后都是有完整的i-1位数的，所以这一位只考虑填入0~8，然后这一位作为9的时候讨论下一位就行了。</p><ol><li>加上之前就已经是不吉利的情况。直接ans+= 9*dp[i-1][2]</li><li><p>因为加上了这一位而变成不吉利的数的情况，一共分为三种情况。</p><ul><li>这位如果可以填入4，那么ans += dp[i-1][0]</li><li>这位可以填入6，那么ans += dp[i-1][1]</li><li>如果这一位可以填入2，并且前一位是6，那么ans += dp[i][1]</li></ul></li><li><p>最后该位填入arr[i]，进入下一位开始讨论。</p></li><li>算出ans之后，n-ans就是前n个数字中吉利的数字，算区间的话用头尾减一下就好了。</li></ol><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">10</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//dp[i][j]，i代表数字的位数，j代表状况</span></span><br><span class="line"><span class="comment">//dp[i][0],表示不存在不吉利数字</span></span><br><span class="line"><span class="comment">//dp[i][1],表示不存在不吉利数字，且最高位为2</span></span><br><span class="line"><span class="comment">//dp[i][2],表示存在不吉利数字</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)<span class="comment">//最大999999</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//最高位加上不含4的9个数字的状况，但因为会放6，所以要减去前一种开头为2的情况</span></span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">9</span> * dp[i<span class="number">-1</span>][<span class="number">0</span>] - dp[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//只有2</span></span><br><span class="line">        dp[i][<span class="number">1</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//已经含有的前面放什么数都可以，或者是放一个4，或者是在2前面放6</span></span><br><span class="line">        dp[i][<span class="number">2</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>] + dp[i<span class="number">-1</span>][<span class="number">1</span>] + <span class="number">10</span> * dp[i<span class="number">-1</span>][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span><span class="comment">///1到n（不算n）幸运数个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> counts = <span class="number">0</span>, tmp = n, flag = <span class="number">0</span>, arr[<span class="number">10</span>], ans = <span class="number">0</span>;<span class="comment">//ans为不幸运数</span></span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[++counts] = n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[counts + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">///每一步都只计算到0~arr[i]-1开头的情况，然后这一位作为arr[i]开始计算下一位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = counts; i &gt;=<span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">///0~arr[i]-1打头有完整的i-1位数</span></span><br><span class="line">        ans += dp[i<span class="number">-1</span>][<span class="number">2</span>] * arr[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">///因为加上该位才变成不吉利的情况</span></span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line"><span class="comment">///高位已经出现4或62了，所有数都要算</span></span><br><span class="line">            ans += dp[i<span class="number">-1</span>][<span class="number">0</span>] * arr[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">///若该位大于4，就要加上4+ i-1位幸运数构成的不幸运数</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; <span class="number">4</span>)</span><br><span class="line">                ans += dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(arr[i+<span class="number">1</span>] == <span class="number">6</span> &amp;&amp; arr[i] &gt; <span class="number">2</span>)</span><br><span class="line">                ans += dp[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; <span class="number">6</span>)</span><br><span class="line">                ans += dp[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == <span class="number">4</span> || (arr[i+<span class="number">1</span>] == <span class="number">6</span> &amp;&amp; arr[i] == <span class="number">2</span>))</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp - ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n+m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve(m + <span class="number">1</span>) - solve(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/03/19/hdu2089/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 440 K-th Smallest in Lexicographical Order</title>
      <link>https://www.ph0en1x.space/2019/03/18/leetcode440/</link>
      <guid>https://www.ph0en1x.space/2019/03/18/leetcode440/</guid>
      <pubDate>Sun, 17 Mar 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;按字典序排列1~n的数字字符串，找到第k个是什么数字&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>按字典序排列1~n的数字字符串，找到第k个是什么数字</p></blockquote><a id="more"></a><ol><li>把所有的数字看作是在一个字典树上，每个结点最多有10个子节点</li><li>一个个结点搜索，可以预先计算出这个结点所有子节点的数目，并加起来与k作比较，还不够则搜索下一个兄弟结点，否则就遍历到子节点继续计算子节点数量。</li><li>prefix记录的是当前从根节点到当前结点的路径，prefix+1则是下一个兄弟结点的路径。</li><li>以样例输入为例。例如计算1的子节点数，那么先计算1~2之间的个数（1个），然后计算10~20之间的个数（4个）。。。</li><li>若prefix的子节点数量超过了还需要的数量，那么搜索prefix的第一个子节点，即prefix*10 与 prefix*10 + 1</li></ol><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int findKthNumber(int n, int k) &#123;</span><br><span class="line">        long long prefix = <span class="number">1</span>;</span><br><span class="line">        k--;</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            long long <span class="keyword">from</span> = prefix;</span><br><span class="line">            long long to = prefix + <span class="number">1</span>;</span><br><span class="line">            long long step = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">from</span> &lt;= n)&#123;</span><br><span class="line">                step += min((long long)n+<span class="number">1</span>, to) - <span class="keyword">from</span>;</span><br><span class="line">                <span class="keyword">from</span> *= <span class="number">10</span>;</span><br><span class="line">                to *= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(step &lt;= k)&#123;</span><br><span class="line">                k -= step;</span><br><span class="line">                prefix++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                prefix *= <span class="number">10</span>;</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/03/18/leetcode440/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 81 Search in Rotated Sorted Array II</title>
      <link>https://www.ph0en1x.space/2019/03/17/leetcode81/</link>
      <guid>https://www.ph0en1x.space/2019/03/17/leetcode81/</guid>
      <pubDate>Sat, 16 Mar 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;与leetcode 33有所不同，会存在重复出现数字的情况&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>与leetcode 33有所不同，会存在重复出现数字的情况</p></blockquote><a id="more"></a><ol><li>在二分中若num[mid] == nums[left]就无法判断mid这个数落在右边的那段里还是左边的那段里，这时候只能先保守地left++然后进入下一轮</li><li>若num[mid] &gt; num[left]，那么mid与left落在同一个单调段内，那么如果这时候target正好在num[mid] 与num[left]之间，那么可以很放心的把right移到mid-1的位置。否则可以将left移到mid+1的位置</li><li>若num[mid] &lt; num[right]，情况与2相反。</li></ol><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool search(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125;</span><br><span class="line">        int left = <span class="number">0</span>, right = nums.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            int mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> true;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == nums[left])&#123;</span><br><span class="line">                left++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; nums[left])&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[left] &lt;= target &amp;&amp; target &lt; nums[mid])&#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[right] &gt;= target &amp;&amp; nums[mid] &lt; target)&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/03/17/leetcode81/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 72 Edit Distance</title>
      <link>https://www.ph0en1x.space/2019/03/12/leetcode72/</link>
      <guid>https://www.ph0en1x.space/2019/03/12/leetcode72/</guid>
      <pubDate>Mon, 11 Mar 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;编辑距离推导，动态规划。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>编辑距离推导，动态规划。</p></blockquote><a id="more"></a><p>给定两个字符串s、t，用增加、删除、替换三种操作，使得s变成t的最少次数。</p><p>动态规划，dp[i][j]表示s前i个字符变为t的前j个字符的编辑距离。</p><p>初始化：dp[0][j] = j, dp[i][0] = i</p><p>递推分为两种情况：</p><ol><li><p>s[i] == t[j]</p><blockquote><p>dp[i][j] = min(dp[i-1][j] + 1, dp[i][j-1] + 1, dp[i-1][j-1])</p></blockquote><p>分别对应删掉s[i]再变为t，s变为t[0: j-1]再加上t[j]，以及s[0: i-1]变为t[0: j-1]</p><p>但是，第一种情况可以改为直接将s[0: i-1]变为t，然后将t[j]去掉(因为s[i]还保留着)，步数不变并且不少于s[0: i-1]变为t[0: j-1]。同理可证第二种情况的步数不少于s[0: i-1]变为t[0: j-1]。所以只需要从最后一种情况进行更新就行。</p></li><li><p>s[i] != t[j]</p><blockquote><p>dp[i][j] = min(dp[i-1][j] + 1, dp[i][j-1] + 1, dp[i-1][j-1] + 1)</p></blockquote><p>分别对应删掉s[i]再变为t，s变为t[0: j-1]再加上t[j]，以及s[0: i-1]变为t[0: j-1]再替换s[i]</p></li></ol><p><strong>C++ Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int minDistance(string word1, string word2) &#123;</span><br><span class="line">        int len1 = word1.length();</span><br><span class="line">        int len2 = word2.length();</span><br><span class="line">        vector&lt;vector&lt;int&gt; &gt; dp;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt;= len1; i++)&#123;</span><br><span class="line">            vector&lt;int&gt; dpi;</span><br><span class="line">            <span class="keyword">for</span>(int j = <span class="number">0</span>; j &lt;= len2; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                    dpi.push_back(j);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</span><br><span class="line">                    dpi.push_back(i);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dpi.push_back(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp.push_back(dpi);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">1</span>; i &lt;= len1; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(int j = <span class="number">1</span>; j &lt;= len2; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>])&#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    int mi = min(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">                    mi = min(mi, dp[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">                    dp[i][j] = mi + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/03/12/leetcode72/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 2151 Check the difficulty of problems</title>
      <link>https://www.ph0en1x.space/2019/02/28/poj2151/</link>
      <guid>https://www.ph0en1x.space/2019/02/28/poj2151/</guid>
      <pubDate>Wed, 27 Feb 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 动态规划问题。需要使用动态规划求出下面几个值&lt;/p&gt;
&lt;p&gt; p[i][j]: 队i完成j题的概率，是题目的输入&lt;/p&gt;
&lt;p&gt; dp[i][j][k]: 队i在前j题中完成k题的概率&lt;/p&gt;
&lt;p&gt; s[i][j]: 队i完成不多于j题的概率，dp[i][m][0~j]的累加&lt;/p&gt;
&lt;p&gt; p1: 所有队都至少完成一题的概率，(1-s[i][0])累乘&lt;/p&gt;
&lt;p&gt; p2: 所有队都做出1~n-1题的概率，(s[i][n-1]-s[i][0])累乘&lt;/p&gt;
&lt;p&gt; 显然，最终的结果是p1-p2&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 动态规划问题。需要使用动态规划求出下面几个值</p><p> p[i][j]: 队i完成j题的概率，是题目的输入</p><p> dp[i][j][k]: 队i在前j题中完成k题的概率</p><p> s[i][j]: 队i完成不多于j题的概率，dp[i][m][0~j]的累加</p><p> p1: 所有队都至少完成一题的概率，(1-s[i][0])累乘</p><p> p2: 所有队都做出1~n-1题的概率，(s[i][n-1]-s[i][0])累乘</p><p> 显然，最终的结果是p1-p2</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T 1002</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> p[T][M]; <span class="comment">// probability of team i solves problem j</span></span><br><span class="line"><span class="keyword">double</span> dp[T][M][M]; <span class="comment">// probability of team i solves k of the first j problems</span></span><br><span class="line"><span class="keyword">double</span> s[T][M]; <span class="comment">//probability of team i solves at most j problems</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, t, n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;m, &amp;t, &amp;n) &amp;&amp; m != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;p[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= t; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1.0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                dp[i][j][<span class="number">0</span>] = dp[i][j<span class="number">-1</span>][<span class="number">0</span>] * (<span class="number">1</span> - p[i][j]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= j; k++)&#123;</span><br><span class="line">                    dp[i][j][k] = dp[i][j<span class="number">-1</span>][k<span class="number">-1</span>] * p[i][j] + dp[i][j<span class="number">-1</span>][k] * (<span class="number">1</span> - p[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++)&#123;</span><br><span class="line">            s[i][<span class="number">0</span>] = dp[i][m][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                s[i][j] = s[i][j<span class="number">-1</span>] + dp[i][m][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> p1 = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++)&#123;</span><br><span class="line">            p1 *= (<span class="number">1</span>-s[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> p2 = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++)&#123;</span><br><span class="line">            p2 *= (s[i][n<span class="number">-1</span>] - s[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.3f\n"</span>, p1-p2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/02/28/poj2151/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 3274 Gold Balanced Lineup（哈希）</title>
      <link>https://www.ph0en1x.space/2019/02/27/poj3274/</link>
      <guid>https://www.ph0en1x.space/2019/02/27/poj3274/</guid>
      <pubDate>Tue, 26 Feb 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 给定一串K位二进制数字，需要给出最大区间的大小，使得在这个区间内每一位数字的和相等。&lt;/p&gt;
&lt;p&gt; 设一个数组sum[i][k]用于记录从第一个数字到第i个数字中第k位数字的和，这样就可以简单地计算出任意一个区间内每一位数字的和，也就是要求出sum[j][k] - sum[i][k]对于所有k都相等的区间[i, j]。&lt;/p&gt;
&lt;p&gt; 但是这样直接搜索的复杂度是O(N&lt;sup&gt;2&lt;/sup&gt;)，所以需要用哈希来简化。&lt;/p&gt;
&lt;p&gt; sum[j][0] - sum[i][0] = sum[j][1] - sum[i][1]&lt;/p&gt;
&lt;p&gt; 有&lt;/p&gt;
&lt;p&gt; sum[j][1] - sum[j][0] = sum[i][1] - sum[i][0]&lt;/p&gt;
&lt;p&gt; 所以只要结点满足第k位数的总数与第0位数的总数差相等就可以。这一步可以使用哈希策略，详见代码。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 给定一串K位二进制数字，需要给出最大区间的大小，使得在这个区间内每一位数字的和相等。</p><p> 设一个数组sum[i][k]用于记录从第一个数字到第i个数字中第k位数字的和，这样就可以简单地计算出任意一个区间内每一位数字的和，也就是要求出sum[j][k] - sum[i][k]对于所有k都相等的区间[i, j]。</p><p> 但是这样直接搜索的复杂度是O(N<sup>2</sup>)，所以需要用哈希来简化。</p><p> sum[j][0] - sum[i][0] = sum[j][1] - sum[i][1]</p><p> 有</p><p> sum[j][1] - sum[j][0] = sum[i][1] - sum[i][0]</p><p> 所以只要结点满足第k位数的总数与第0位数的总数差相等就可以。这一步可以使用哈希策略，详见代码。</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH 100000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> num[K];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; table[HASH];</span><br><span class="line"><span class="keyword">int</span> sum[K];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, feature, hash, ans;</span><br><span class="line">    node tmp;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">        <span class="built_in">memset</span>(tmp.num, <span class="number">0</span>, <span class="keyword">sizeof</span>(tmp.num));</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        tmp.index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HASH; i++)&#123;</span><br><span class="line">            table[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">        table[<span class="number">0</span>].push_back(tmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            hash = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;feature);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((feature &gt;&gt; j) &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                    sum[j]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    tmp.num[j] = sum[j] - sum[<span class="number">0</span>];</span><br><span class="line">                    hash += tmp.num[j] * j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.index = i;</span><br><span class="line">            hash = <span class="built_in">abs</span>(hash) % HASH;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; table[hash].size(); j++)&#123;</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; k; l++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(table[hash][j].num[l] != tmp.num[l])&#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag == <span class="literal">true</span>)&#123;</span><br><span class="line">                    ans = max(ans, tmp.index - table[hash][j].index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            table[hash].push_back(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/02/27/poj3274/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Paxos made simple 阅读笔记</title>
      <link>https://www.ph0en1x.space/2019/01/10/Paxos/</link>
      <guid>https://www.ph0en1x.space/2019/01/10/Paxos/</guid>
      <pubDate>Wed, 09 Jan 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  参考文献：Lamport L. Paxos made simple[J]. ACM Sigact News, 2001, 32(4): 18-25.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  参考文献：Lamport L. Paxos made simple[J]. ACM Sigact News, 2001, 32(4): 18-25.</p></blockquote><a id="more"></a><h2 id="一、Paxos简介"><a href="#一、Paxos简介" class="headerlink" title="一、Paxos简介"></a>一、Paxos简介</h2><p>Paxos是Lamport提出的最著名的基于消息传递的一致性算法，在2006年Google将其运用于Chubby锁服务器上后便受到了巨大的关注。Paxos Made Simple这篇论文中Lamport用了比较通俗的叙述方式来讲解了Paxos这个模型，也是Paxos的基础版本，支持单提案的达成一致与提交。</p><p>在这个模型中进程一共有三种角色，分别是</p><ol><li>提案者(Proposers)</li><li>接受者(Acceptors)</li><li>学习者(Learners)</li></ol><p>而每一个进程不限于一种角色。</p><p>Paxos一共分为两个阶段(Phrase)，分别是</p><ol><li>提案阶段<br>在这个阶段内，提案者会向接受者发送准备请求(ready request)，准备请求中带有一个编号n。</li><li>接受阶段<br>在提案阶段一个提案者收到了超过半数的接受着返回的准备请求的应答，那么提案者将会向回复他的接受者发送一个带有编号n以及提案的接受请求(accept request)。</li></ol><p>这篇笔记将会介绍Paxos如此设计的思路以及过程的详细细节，后面还会将Paxos与近几年比较火的另一种一致性算法Raft进行简单的比较。</p><h2 id="二、要求与假设"><a href="#二、要求与假设" class="headerlink" title="二、要求与假设"></a>二、要求与假设</h2><p>Paxos是一个一致性算法，而一致性算法的目标是让所有的进程最终都能够对提案达成一致。所以实现Paxos的最终效果是若没有提出一个提案，那么就不会有提案被选中，而若有提案被提出，那么最终只有一个提案会被选中。文中提到了三个一致性的安全性(safety)需求：</p><ul><li>只有提出的提案能最终能被选中</li><li>只有一个提案能被选中</li><li>除非一个提案真的被选中了，否则进程不会选择这个提案</li></ul><p>而系统的活性(liveness)则是某些提出的提案最终能被选中，并且进程最终能够学到这个提案。</p><p>文章讨论基于以下几个假设：</p><ul><li>每个实体的执行速度不同，甚至会在任何时候崩溃、重启。因为有可能在提案选择后失效，因此想要得到一个解，必须要实现持久化某些信息。</li><li>消息传递的事件可以任意长，可以重复或丢失，但不会被破坏(无拜占庭问题)。</li></ul><h2 id="三、选择提案"><a href="#三、选择提案" class="headerlink" title="三、选择提案"></a>三、选择提案</h2><p>要保证上述的只有一个提案被最终选中的要求，同时保证系统的鲁棒性，那么需要做到一个提案能够被超过半数的接受者(majority)接受，因为无法找到两个majority能够接受不同的提案，只有所有进程都遵守这一规则，才能最终只有一个提案被选中。而要保证一定要有一个提案被选中，接受者应该对第一个提案进行接受。如果只有一个提案被提出却不接受，就无法得到majority，这就得到了第一个需求：</p><p>P1. 接受者必须接受它所接收到的第一个提案</p><p>但是这个要求在有两个或更多提案的时候可能会得不到一个majority，所以每个进程不能仅被允许接收这一个提案。于是每个提案除了要带有一个值(value)以外，还要带上一个互不相同的数(number)来区分它们。这样一来就可以允许选择多个不同的提案了。但是由于最终选出的提案的值必须唯一，所以要添加另外一个条件：</p><p>P2. 如果值为v的提案被选择了，那么所有被选择的数更大的提案的值也是v</p><p>由于提案的值被选中，那么这个提案一定要被某些接受者接受，所以P2的可以改写为</p><p>P2a. 如果值为v的提案被选择了，那么所有被任何一个接受者接受的数更大的提案的值也是v</p><p>但是还存在这样一种情况，有些接受者(c)还没有接受到任何的提案，但是这时一个新的数更大但值不同提案被提出且被发送给了c，由于P1的要求，c必须接受这个提案，那么这样一来就违反了P2a，所以P2a还应该进一步修改为：</p><p>P2b. 如果值为v的提案被选择了，那么任何一个提案者提出的数更大的提案的值也是v</p><p>根据提出-接受-选中的因果关系，可以得出P2b -&gt; P2a -&gt; P2，而要具体实现P2b，只需要满足另一个变体</p><p>P2c. 如果提出了一个值为v，数为n的提议，那么一定存在一个接受者majority集合<em>S</em>，满足下面的其中一个条件</p><ol><li><em>S</em>内不存在任何接受过数小于n的提案</li><li><p>v是<em>S</em>中接受者接受的数小于n的最大数提案的值v</p><p>为了维护P2c，提案者在提出数为n的提案的时候就需要去学习当前不大于n的最大数提案的值，这些提案有的已经被接受，有的还没被接受。如果已被接受的话，那么就直接让接受者告知提案者就行。如果还未接受，那就会造成困难，因为提案者无法预测未来。所以文中又做了一个限制，那就是提案者会请求接受者不再去接受那些数小于自己提案的数的提案。</p><p>而接受者这边，只要不违背安全性要求的请求都可以回复，也就是接受者可以回复所有的准备请求，除了前面承诺过的不再接受的提案的接受请求以外的其他请求也都可以回复，这就可以提出一个比P1更强的需求：</p></li></ol><p>P1a. 接受者可以接受一个数为n的提案，当且仅当接受者只要没有回复过大于n的准备请求</p><p>这里还有一些隐含的优化可以做，那就是虽然接受者可以回复一个数小于当前已经回复过的最大为n准备请求，但是这个没有必要，因为最终接受者也不会接受后续的接受请求，所以接受者可以直接忽略这样的请求。同时，对于已经和接受的提案相同的准备请求，也不予以回复。</p><p>要做这些优化，接受者也只需要记住两个变量，一个是当前已经回复过的最大的准备请求以及已经接受的数最大的提议。第一个用来确定是否要回复一个准备请求以及是否要接受一个提案，第二个用来告知后面更大数的提议者去修改自己的提议。</p><p>综合上面的推导，就可以合理地提出Paxos提出并一致通过提案的算法流程了：</p><p><strong>Phase1.</strong></p><ol><li>提案者要提出一个提案，赋予数n和值v，那么他将向至少过半数的(majority)接受者发送准备请求(prepare request)</li><li>接受者受到准备请求后，只要这个请求中的数n大于自己曾经回复过的最大的数，那么就向提案者发送回复信息，回复中包含两个内容<ul><li>向提案者承诺不再接受小于n的提案</li><li>如果已经接受过提案，则把已经接受过的提案的值v返回给提案者</li></ul></li></ol><p><strong>Phase2.</strong></p><ol><li>如果提案者收到了半数以上接受者对自己数为n的准备请求的回复，那么就可以向这些接受者发送自己的提案(n, v)，v要根据接受者的回复进行修改。如果接受者的回复中带有曾经接受过的提案的值，那就改成这个值，否则就按照原来提出的值v<ol start="2"><li>接受者如果在这段事件内没有回复其他的准备请求(其他提议者提出了n更大的提议，改变了这个接受者记录的最大回复值)，那么就可以接受这个提案。</li></ol></li></ol><p>只要遵守上面的流程，就可以保证算法的正确性，提案者可以在任何时候废除自己的提案。作为优化，提案者可以在得知已经有n更大的提案提出时放弃自己现在的提案。</p><h2 id="四、学习被选择的值"><a href="#四、学习被选择的值" class="headerlink" title="四、学习被选择的值"></a>四、学习被选择的值</h2><p>上面一个章节主要是一个提案提出后要如何得到一致通过，就像是一个公司的董事会对一个方案进行讨论，当得出最终结果或是得到半数董事通过后，就要讲这个最终结果通知给下面的员工。在Paxos模型中，学习者(learner)就扮演着员工这样一个角色。文中提出了三种不同的由接受者将通过的提案通知学习者的方案。</p><ol><li>第一种方法最简单，接受者在接受提案后，立即将自己接受的提案广播给所有的学习者。但是这么做，会产生大约n_{acceptor} * n_{learner}的信息量，信息量过大。所以要进行一定的优化，减少网络负载。</li><li>第二种方案是将方案都发送给指定的单个学习者，再由这个学习者转发给所有其他的学习者(不存在拜占庭问题)来避免不必要的信息量，这样一来就可以将复杂度降至比较理想的n_{acceptor} + n_{learner}，但这种方案容易产生单点失效的问题，单个学习者一旦失效后，所有的学习者都无法直到通过的提案。</li><li>最后一种是前两种方案的折中，接受者将自己的方案发送给一个特定集合<em>S</em>的学习者，然后由这个集合中的学习者将结论转发给其他的学习者，这个方法会在方案二的基础上带来| <em>S</em> |倍的复杂度提升，但是却可以大大提高可靠性。</li></ol><p>以上就是对Paxos算法的理解与讨论，可以看出Paxos算法设计的极为简洁，但却极为有效，这也是它能够逐渐被人们接受并流行的原因。然而这只是Paxos的Basic版，比较偏向理论，对于实现的讨论比较少，后续以此为基础还提出了很多优化和增强的版本。下一篇将会介绍近几年比较流行的一个算法<a href="https://www.ph0en1x.space/2019/01/10/Raft/">Raft</a>。</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/01/10/Paxos/#disqus_thread</comments>
    </item>
    
    <item>
      <title>In search of an understandable consensus algorithm 阅读笔记</title>
      <link>https://www.ph0en1x.space/2019/01/10/Raft/</link>
      <guid>https://www.ph0en1x.space/2019/01/10/Raft/</guid>
      <pubDate>Wed, 09 Jan 2019 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  参考文献：Ongaro D, Ousterhout J K. In search of an understandable consensus algorithm[C]//USENIX Annual Technical Conference. 2014: 305-319.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  参考文献：Ongaro D, Ousterhout J K. In search of an understandable consensus algorithm[C]//USENIX Annual Technical Conference. 2014: 305-319.</p></blockquote><a id="more"></a><h2 id="一、Raft简介"><a href="#一、Raft简介" class="headerlink" title="一、Raft简介"></a>一、Raft简介</h2><p>Raft的作者认为Paxos即使经过几次的重新描述，但依旧让人难以理解，同时Paxos在提出过程中大多数都集中于单提案的模型，没有对实际应用做太详细的规定，因此过于理论化，在实际投入生产过程中，还是必须要提出许多变体来对相对应的应用场景做相应的优化。所以他提出了一套更加容易理解、更适合工业实践和教学的一致性算法。因此Raft算法的设计目标就是易理解，让人更容易理解算法流程和设计目的。</p><p>Raft将每个服务器都看作一个状态机(state machine)，每个状态机中都维护着一个日志，客户机向一个状态机提交一个请求，也就是向对应的状态机的日志添加了个带有命令的log entry。Raft算法维护所有服务器中的日志保持一致。这样所有的状态机都按照相同的顺序执行所有的操作，输出相同的输出。</p><p>Raft中也是分为三种不同的角色，而且与Paxos一样，角色也并非与服务器一一对应，而是动态改变的，一台服务器可能因为某些事件的触发而产生角色的变动。但是，每个角色所需要执行的操作却大不相同，三种状态间的转换如图1所示：<br><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/distributed_algorithm/Fig3_1.PNG" alt=""></p><ul><li>领导者(Leaders)<br>  Raft引入了领导者这一角色，但这个想法并不是Raft最早提出的，早在Paxos的变体multi-paxos中已经有类似角色的体现。<br>  同时，Raft中使用任期(term)的概念。这一概念与Paxos中的number这一概念一样都充当了逻辑时钟的作用。在每一个任期的开始需要选出至少一个领导者(某些情况下一个任期内的所有候选者都竞选失败，没有领导者产生)，然后由领导者来控制后续的日志复制(log replication)。理论上只要当前的领导者服务器没有发生故障或者因为连接中断，任期可以无限长。在领导者失效时，为了防止单点失效的问题，Raft会重新在新的任期中进行一次选举来保证系统依旧可用。日志在Paxos当中相对应于提案，而复制日志相当于Paxos中确认提案与学习提案。但是，新的log只能由领导者提出，也就是客户端直接向领导者提出申请，然后由领导者去通知其他机器新的log和提交确认。</li><li>候选者(Candidates)<br>  候选者是一个中间状态，跟随者要想成为领导者，必须要先声明成为候选人，然后进行选举，请求其他服务器为自己投票，赢得由其他的跟随者投票，最终成为领导者，若在竞选中失败，则只能变回跟随者。</li><li>跟随者(Followers)<br>  跟随者有点像是Paxos中的学习者，被动地接受他人提出的变动。但是却和Paxos中的学习者不完全一样，Raft中的跟随者还有一个重要的任务，就是检查候选者的合法性以及给合法的候选者投票，让他们成为领导者。</li></ul><p>根据上面的一些设定，Raft一共研究的就是三个子问题：</p><ol><li>如何选举领导者，当现有的领导者失效的情况下，如何选出新的领导者，选举领导者的时候如何确定新的领导者不会破坏安全性原则</li><li>如何进行日志的复制，什么时候可以保证日志可以安全提交</li><li>如何保证系统的安全性，要维护包含以下的几个性质：<ul><li>选举安全性：每一个任期(term)内只能有一个服务器被选举为领导者。</li><li>领导者只做append操作：领导者的所有的日志entry只能append在队列尾，而不能删除和覆盖。</li><li>日志匹配：如果两个日志在相同的序号上的日志entry的任期相同，那么这个日志从头到这个序号之间的日志entry时完全相同的。</li><li>领导者完整性：在一个领导者上提交的日志entry，在后面的term的领导者中也必须出现。也就是说，只有同步了最新log的server才能够被选举为领导者。</li><li>状态机安全性：如果一个服务器已经执行了日志上某个entry中的指令，那么其他服务器上相同序号不同的日志entry将不能够执行。</li></ul></li></ol><h2 id="二、领导者选举"><a href="#二、领导者选举" class="headerlink" title="二、领导者选举"></a>二、领导者选举</h2><p>整个过程的第一步是选举领导者，在系统刚刚启动时或者是当现有的领导者失效时，都将会触发这个过程。当一个跟随者一段时间(所有跟随者都会设置一个一定区间内的随机的计时周期，election timeout)内没有收到来自领导者定时发送的心跳(Heartbeat)或是其他候选者发送来的投票请求时(其他服务器竞选请求也会阻止一个跟随者成为候选者)，就会为自己开始一轮选举。开始选举主要需要以下步骤：</p><ul><li>自己所知道的任期+1</li><li>给自己投一票</li><li>同时给所有人发送投票请求<br>规定所有的跟随者只能投第一个收到的请求一票。当候选者收到半数请求的确认回复时，则赢下了这次选举，将自己的状态改为领导者，并向其他所有服务器开始广播自己的心跳，告知新的任期的开始，以确保其他服务器不会开始新的选举。</li></ul><p>在候选者还在等待投票的时候，若收到一个任期不小于自己的其他领导者的心跳，说明已有其他候选者赢得了选举(若任期比自己小，可能是原来被网络阻隔的领导者的包达到了，在这种情况下，可以继续进行选举，等待选举胜利之后取代原来的领导者)，那么将放弃这次选举，将状态改回跟随者(不用改回任期，因为当前的新领导者的任期不会小于自己，他会通知自己以及其他所有的服务器将自己的任期进行更新)。</p><p>另一种情况是，同时有两个及以上的候选者产生，他们同时发出了投票请求，这样很可能就都得不到半数以上的投票。这种情况下候选者会在等待超时后重新执行一遍上述三步的流程，直到有一个领导者获胜，而election timeout的随机性也避免了这一情况的反复发生。</p><h2 id="三、日志复制"><a href="#三、日志复制" class="headerlink" title="三、日志复制"></a>三、日志复制</h2><p>按照上一章的领导者选举过程顺利完成领导者选举之后，胜出的领导者就开始接受客户端的请求。接收客户端请求后，领导者会在自己的状态机上append上包含最新命令的log entry，并通过AppendEntries远程过程调用(RPC)，将这个log entry同步到其他服务器上。当超过半数的服务(包括自己)应答append成功后，领导者会在状态机上确认提交这个命令并将结果返回给客户机，同时通知其他服务器提交这个命令。</p><p>然而，在复制日志的过程中，会出现各种各样的问题，图2展示了多种领导者与跟随者上日志不一致的情况。例如跟随者缺失一些日志(a-b)，也有可能多出一些(c-d)，也有可能即少一些又多一些(e-f)。例如当服务器在作为跟随者的时候崩溃或网络连接错误，就有可能造成日志的缺失。当作为领导者时的崩溃或网络连接错误而没有将用户提交的请求进行同步，就有可能造成未提交的日志的多出。而实际中情况可能更加复杂。<br><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/distributed_algorithm/Fig3_2.PNG" alt=""><br>为解决上面这种不一致的情况，领导者在同步日志的时候，需要进行一些一致性检测。上面提到，只要两个服务器日志内的某条entry的任期和序号都一致。那么领导者只需要记下每个服务器当前还未同步日志序号(nextIndex)，然后将这个位置之后的日志发送过去，并在AppendEntrie请求中带上自己的任期，跟随者就可以根据送来的日志内的任期和序号以及领导者的任期，检查自己是否能够同步这些日志。如果不能同步，那么跟随者将会将自己所需要的日志号发送回给领导者，让领导者调整对自己的nextIndex，最终就能保证日志的一致。</p><p>但是，这样还不能保证领导者完整性。存在这样一种情况，在前一个任期内网络连接断开而没有同步某些已提交日志entry的某个跟随者，在新的任期中成功当选。显然让这样的服务器成为领导者是不安全的，因为他会覆盖掉原来已经提交的log(Raft的日志只能由领导者同步到跟随者上，不能指望跟随者告诉领导者他的缺失)。所以Raft在选举的时候设置了一个机制，跟随者需要检查当前候选者的已提交日志是否比自己的要旧，若是更旧则不能投票给他让他当选。由于所有日志的提交都需要至少有半数以上的服务器的通过，所以这一机制也就保证了提交日志记录不是最新的服务器无法成功当选领导者。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>Paxos与Raft都是为解决分布式系统中一致性问题而提出的一致性算法。不同的是，Paxos更加偏向理论解释而Raft更偏向于实现。虽然本篇笔记所阅读的Paxos的论文只讨论了Paxos的最基础部分，但仍然能够看出其原理描述的优美精妙，让人切实地体会到算法的简洁有效，也是因为这些让Paxos在过去的十年间几乎成为了一致性算法的代名词。而Raft更加注重于可理解性和实现方面，在算法为何有效方面阐述的较为直白清晰。但Raft体现的细节较多，对每一种可能出现的情况都逐一进行讨论并说明给出的解决方案。</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2019/01/10/Raft/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Bigtable, A distributed storage system for structured data 阅读笔记</title>
      <link>https://www.ph0en1x.space/2018/12/18/Bigtable/</link>
      <guid>https://www.ph0en1x.space/2018/12/18/Bigtable/</guid>
      <pubDate>Mon, 17 Dec 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  参考文献：Chang F, Dean J, Ghemawat S, et al. Bigtable: A distributed storage system for structured data[J]. ACM Transactions on Computer Systems (TOCS), 2008, 26(2): 4.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  参考文献：Chang F, Dean J, Ghemawat S, et al. Bigtable: A distributed storage system for structured data[J]. ACM Transactions on Computer Systems (TOCS), 2008, 26(2): 4.</p></blockquote><a id="more"></a><h2 id="一、Bigtable简介"><a href="#一、Bigtable简介" class="headerlink" title="一、Bigtable简介"></a>一、Bigtable简介</h2><p>Bigtable是谷歌在其分布式文件系统GFS上设计的一个用于解决GFS无法对结构化数据进行访问与管理的结构化数据存储访问管理系统。基于HDFS的Apache HBase就是它的一个开源实现版本。谷歌将许多自己提供服务的数据使用Bigtable进行管理，例如Google Earth、Google Finance、Gmail等等。所以Bigtable不仅需要应对种类繁多的数据，在处理后端容量巨大的同时，还要保证对延迟敏感任务数据服务的及时性。同时由于谷歌众多的服务都由Bigtable提供支持，在系统设计中，除了上述的高适用性外，更要考虑系统设计的高容错性、高可用性以及可扩展性。</p><h2 id="二、数据模型"><a href="#二、数据模型" class="headerlink" title="二、数据模型"></a>二、数据模型</h2><p>首先要说明Bigtable中数据是以什么形式存储的。在Bigtable中，为了数据的高效管理与使用，数据被设计通过三个层次进行索引，它们分别是：</p><ul><li>行 (rows)<br>行标识可以有任意不超过64KB的字符串组成，任何在同一行内的读或者写操作都具有原子性。在维护数据表的过程中，数据按照行关键字进行字典序划分，同时，根据行关键字还可以将数据动态地划分为一个个称作“子表” (Tablet) 的区间，存储在不同的子表服务器上做负载均衡。一般来说字典序相接近的两个行关键字下数据被划分在同一个子表服务器的概率较大，存取的效率也更高。</li><li>列族 (column families)<br>实际的数据表中，通常拥有较多的列，但是传统关系型数据库中按列为粒度进行权限管理，给数据管理带来了很大的难度。Bigtable将数据表中的列先划分为不同的列族，在列族中还可以再定义相应的列关键字，组成形如family:qualifier的列关键字，来存储一些相似的数据。列族的设计目的是在能够容纳同样数量的列数的同时，将相同类型的列聚集为一个族来统一管理，甚至可以统一进行数据压缩，方便了数据管理，也提高了数据存储的灵活度。</li><li>时间戳 (timestamps)<br>数据表中的数据通常有版本上的更替，为了防止版本间的冲突，Bigtable设计了时间戳维度，同行同列的数据按照时间关系被赋予一个时间戳，时间戳既可以由客户机应用程序自行设置，也可以由时间的毫秒数来决定以64位整数形式存储，并且时间戳按照降序排列，方便获取最新的一个版本。Bigtable支持两种自动回收旧版本的机制，一是保留最新的几个版本，另一种策略是仅保留一定时间内的所有版本。</li></ul><p>所以，Bigtable中的每一个数据单元格式如下：</p><p>(row:string, coloum:string, time:int64) -&gt; string</p><p>文中举了一个例子如图1所示，这是一个网页数据表，row值中存储着所记录网页的倒叙URL，即“com.cnn.www”。倒叙存放可以使同一个域名下的不同页面根据字典序存放在一起。“content:”是一个列族，但这个列族中没有其他的qulifier，下面存放着网页html的内容，这里的内容一共有三个版本，按时间顺序的时间戳为t3, t5, t6。“anchor：”为第二个列族，这个列族中有两个不同的column keys，分别是“cnnsi.com”和“my.look.ca”，记录着所有连接到row值存储页面的所有页面，而对应列下存储的就是这些页面中连接到row页面的anchor。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/distributed_algorithm/Fig2_1.PNG" alt=""></p><h2 id="三、系统组成"><a href="#三、系统组成" class="headerlink" title="三、系统组成"></a>三、系统组成</h2><p>本章将会介绍Bigtable系统中的几个关键组成部分或者支撑技术。</p><ul><li>主服务器 (master)<br>主服务器上不存储子表，也不是用来提供表定位信息的，而是主要负责子表服务器的分配、负载均衡，监控子表服务器的状态，当子表服务器的租约到后仍然没有回应则要重新安排新的子表服务器来代替，同时当子表服务器的所存的子表过大的时候还要分配新的子表服务器进行负载均衡。同时，主服务器还要负责处理表模式更改、列族增加和GFS上垃圾回收等任务。</li><li>子表服务器 (tablet server)<br>Bigtable在存储表的时候会将表划分为一个个子表来进行存储。子表服务器上存储着子表信息，由于为了减小主服务器的负载，数据请求不会经过主服务器，子表服务器还需要直接响应客户机对字表服务器上存储的子表的读和写操作。在所存储的子表过大的时候需要对子表进行切分操作。需要注意的是，子表服务器也不是直接存放数据的，数据只是存放在GFS中，然后由子服务器来进行分片管理</li><li>客户端的库<br>客户端的库用于缓存子表的位置，只有当没有缓存子表的位置或子表的位置出错的情况下，客户机才会启动子表定位。</li><li>GFS<br>Bigtable底层所使用的分布式文件系统 (Google File System)，存放着数据文件和日志文件。</li><li>SSTable<br>Bigtable内部使用的文件格式，提供不变有序的键值映射，键与值都是用任意的字节串组成的。SSTable内部包含一系列默认大小为64KB的块 (block)，并将这些块的索引值存放在文件末尾。每一个子表可能对应着多个SSTable文件。</li><li>Chubby<br>Chubby是Google设计的一个锁服务，每个Chubby服务都利用Paxos算法保留了5个副本，其中一个作为主副本提供服务。Chubby提供了一系列的目录与文件，每个目录与文件都被当成“锁”来使用以保证，使用Chubby服务的客户机需要保持和Chubby服务之间的会话，并维护一个租期的关系，超出租期如果Chubby没有收到客户机的续约申请，那么客户机就会失去在Chubby服务中的所有锁。<br>Chubby在Bigtable中有非常重要的作用，以至于一旦Chubby服务失效，整个Bigtable就无法工作。无论是在主服务器的确定、子表服务器定位、子表服务器分配、表的权限控制等等方面都运用到了Chubby服务。这些运用将会在后面的章节中提到。</li></ul><h2 id="四、子表操作"><a href="#四、子表操作" class="headerlink" title="四、子表操作"></a>四、子表操作</h2><p>本章将会介绍子表的定位、子表分配以及子表的读写操作。</p><ol><li><p>子表定位<br>Bigtable将子表按照三层关系进行组织，三层关系如图1所示：</p><p>第一层，存储在Chubby file中，里面包含了Root tablet的位置信息。</p><p>第二层，根子表 (Root tablet) ，元数据子表 (METADATA tablets) 中的第一个子表，它存储着元数据表里其他子表的位置信息，根子表随着大小的增长是不会被分割的。</p><p>第三层，原数据子表 (METADATA tablets) ，保存其他用户数据表的子表信息。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/distributed_algorithm/Fig2_2.PNG" alt=""><br>​<br>在查找子表的时候，客户机首先会检查自己的库，看是否已经有这个子表位置的缓存，如果存在这个缓存且这个缓存还有效，就会按照这个位置去获取子表信息。如果这个子表的缓存信息错误，那么客户机将会递归向上一层的子表服务器进行查询。若缓存为空，则客户机将会从Chubby file开始获取根子表的位置，查询根子表查寻相应元数据子表的位置，再在元数据字表中找到需要的数据子表的位置，完成完整的一次询问的查找。</p></li><li><p>子表分配<br>前文中有提到主服务器master主要负责监控子表服务器状态以及子表的分配。主服务器需要通过Chubby确认每个子表服务器是否还在正常工作，跟踪子表都分配给了哪些子表服务器以及哪些子表还没有被分配。</p><p>当一个子表服务器启动的时候，它会在Chubby特定的目录下建立一个自己的文件并获得互斥锁，主服务器通过文件来监控存在哪些子表服务器，通过周期性尝试获取这些文件的互斥锁来确认这些子表服务器是否还在正常工作。当子表服务器失去与Chubby的连接后，就会失去这个互斥锁。但是只要子表服务器上的数据还存在并且Chubby相应文件还存在，它还会不断试图请求会这个互斥锁。一旦主服务器获得了这个互斥锁，它就会删除这个文件，导致子表服务器的最终停止。而子表服务器主动停止服务的时候，也会释放这个互斥锁，以便主服务器更快意识到这个子表服务器的退出。</p><p>当主服务器和Chubby连接被断开后，当前的主服务器会主动关闭自己，这时候系统就会重新选择一个新的主服务器出来。主服务器启动时，会首先获取一个Chubby上的master锁以防止其他服务器同时成为主服务器；然后新主服务器会扫描Chubby的特定目录尝试获取互斥锁来获得当前正在工作的子表服务器；之后再询问每个子表服务器被分配的子表；最后再统计METADATA子表中还未被分配的子表，准备将其分配 (若元数据子表还未被分配，则需先将根子表加入到待分配的子表集合中) 。</p></li><li><p>子表的读写操作<br>读写操作的基本示意图如图3所示。其中SSTable Files是已经持久化在GFS中的数据，memtable是还未存入SSTable Files的数据缓存，tablet log是写操作的日志，用于子表服务器启动时从重做点开始恢复子表。</p><p>读操作首先要经过权限的验证，通过验证后，由于数据的不同版本分布在位于内存的memtable中以及位于GFS的SSTable Files中，所以需要事先进行合并。</p><p>写操作也类似，首先要经过权限验证，然后使用日志先行 (WAL) 的方式先提交到日志中，然后再把变更插入到memtable中。</p></li></ol><p>  <img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/distributed_algorithm/Fig2_3.PNG" alt=""><br>​    </p><ol start="4"><li><p>子表压缩<br>每当进行一次写操作，新写的记录不会覆盖原有记录，而是被添加到memtable后面，当memtable的大小达到一定程度的时候，就要用新的一个memtable来代替原来的memtable并把原来的table保存为一个SSTable文件。这个操作过程叫作minor compaction。</p><p>但是minor compaction会逐渐增加SSTable的数量，会影响文件维护的效率。因此需要周期性的对SSTable文件和memtable进行合并，这个操作叫作merging compaction。</p><p>还有一种特殊的merging compaction叫作major compaction。这种compaction会把所有的SSTable和memtable都merge到一个单独的SSTable中，并且与前两种方法不同的是，major compaction将会删除掉那些已经无效的数据，节省集群空间，释放资源以适应巨大的容量需求。</p></li></ol><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>这篇文章介绍了谷歌在GFS上搭建的结构化数据表存储系统Bigtable，本篇笔记首先在其使用的数据模型、系统组成方面进行的简单的介绍，然后分别详细讨论了在Bigtable上如何进行数据定位、数据分配以及数据读写操作。讨论了主服务器如何产生，当主服务器以及子表服务器出现问题后应该如何将正在管理数据移交出去，新启动的服务器应当如何加入到系统中并获得数据。还提到了Bigtable底层如何维护与压缩保存的数据文件。虽然这里面每个问题谷歌设计的方法看似都并不复杂，但是通过一个个简单的模型，我们体会到了一些经典模型，是如何被运用到实际系统中的，是如何满足谷歌所提供的数据服务的大容量、低延迟的要求，这也激发了我们进一步对底层理论的了解与研究的兴趣。</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/12/18/Bigtable/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Time, clocks, and the ordering of events in a distributed system 阅读笔记</title>
      <link>https://www.ph0en1x.space/2018/11/18/Lamport_clocks/</link>
      <guid>https://www.ph0en1x.space/2018/11/18/Lamport_clocks/</guid>
      <pubDate>Sat, 17 Nov 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  参考文献：Lamport L. Time, clocks, and the ordering of events in a distributed system[J]. Communications of The ACM, 1978, 21(7): 558-565.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  参考文献：Lamport L. Time, clocks, and the ordering of events in a distributed system[J]. Communications of The ACM, 1978, 21(7): 558-565.</p></blockquote><a id="more"></a><h2 id="一、基本问题"><a href="#一、基本问题" class="headerlink" title="一、基本问题"></a>一、基本问题</h2><p>本篇文章所讨论的问题是分布式系统中事件发生的先后顺序的问题。在日常生活中，我们经常通过时间，也就是日期、时分秒等等概念来确定时间发生的先后顺序。虽然这样的解释在单机系统或者一个很小的空间范围内不会出现太大的歧义，但是，在复杂的分布式系统当中，由于不同进程或是不同主机之间用于规定时间的时钟无法保证实时同步以及传输过程中的时延问题，这样的规定也就变得无效。例如两个进程A、B分别要对一个共享变量进行修改，在实际时间上A要比B先发出请求，理论上应该先满足A所发出的请求，但是A进程的请求比B进程的请求晚到达，这就会导致变量最终与期望的值不同。作者在文中强调我们一定要意识到在分布式系统中事件发生仅仅存在偏序关系这一点。所以在分布式系统中需要定义一种新的时间发生“序”的概念，使得不同进程间时间发生的顺序能够得到确定。</p><h2 id="二、主要贡献"><a href="#二、主要贡献" class="headerlink" title="二、主要贡献"></a>二、主要贡献</h2><p>本文定义了一个应用于分布式多进程系统中事件发生的一个偏序关系“happen before”，并提出了一个算法，将这样的偏序关系推广为全序关系，并将全序关系应用于一个同步问题。但是这样的全序关系还会遇到一种异常情况，作者又提出利用同步物理时钟 (physical clocks) 来避免这样的问题。</p><h2 id="三、偏序关系"><a href="#三、偏序关系" class="headerlink" title="三、偏序关系"></a>三、偏序关系</h2><p>偏序关系与全系关系不同，全序关系具有反对称性，这也就意味着全序关系中，任何两个元素之间都可以有关系。但偏序关系不具有反对称性，故两个元素之间不一定具有关系。像前面所说的，很多人在描述事件发生先后顺序时，都隐含地运用了一个全序关系，也就是物理理论中的时间关系。但是分布式系统中很难保持一个统一的精确的时钟，也就是两个事件间可能无法确定先.后关系，所以，作者将事件发生的前后关系定义为一个偏序集，也就是“happen before”关系，记作”-&gt;”。“happen before”关系的定义如下：</p><ol><li>如果a和b是同一个进程中的事件，并且a在b之前发生，则a-&gt; b</li><li>a事件是一个进程发送请求，b事件是另一个进程接收请求，则a-&gt; b</li><li>如果a-&gt;b并且b-&gt; c​，则​a-&gt;c​，即偏序的传递性</li></ol><p>另外如果两个事件a，b既不满足a-&gt;b，也不满足b-&gt;a​，那么可以说两个事件是并发的 (concurrent)</p><p>作者通过一张“空间-时间”表来解释偏序关系，例如Figure 1，横向为不同的进程，纵向向上表示时间的推移，注意时间的推移只在单个进程上是有意义的。进程上的点代表了发生的事件，而波浪线表示消息，箭尾代表一个消息的发送事件而箭头表示消息到达的事件。按照上面的定义，偏序关系只定义在波浪线从箭尾到箭头以及进程线从下到上，这样一条路径上的点对这条路径上后续的点之间存在“happen before”关系（如p1​与r4​），若无法找到这样一条路径连接的两个点，则是并发关系（p3​与q3​）。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/distributed_algorithm/Fig1.PNG" alt=""></p><h2 id="四、逻辑时钟"><a href="#四、逻辑时钟" class="headerlink" title="四、逻辑时钟"></a>四、逻辑时钟</h2><p>为了与物理时钟进行区分，作者提出了逻辑时钟的概念，定义为：每个进程Pi都有一个时钟Ci，当b是进程j的一个事件的时候，系统全局时钟C给b分配的时间为C&lt;b&gt; = Cj&lt;b&gt;。</p><p>逻辑时钟的大小与物理时钟的先后没有关系，仅仅与时间发生的先后有关系，即定义时钟条件 (Clock Condition)</p><ul><li>Clock Condition. 对于任意的事件a，b，如果a-&gt;b则C&lt;a&gt; &lt; C&lt;b&gt;.</li></ul><p>这个条件的逆命题不能够成立，即C&lt;a&gt; &lt; C&lt;b&gt;不能够推出a-&gt;b。</p><p>根据时钟条件以及前面定义的“happen before”偏序关系可以很容易地得出下面两个条件：</p><p>C1. 在同一个进程i中如果a比b先发生，那么Ci&lt;a&gt; &lt; Ci&lt;b&gt;</p><p>C2. 若进程i的事件a是给进程j发送一条消息并且b事件是进程j接收这条消息的事件，那么Ci&lt;a&gt; &lt; Cj&lt;b&gt;</p><p>再引入一个逻辑时钟“滴答” (tick)的概念，根据上面两个时钟条件，逻辑时钟在同一个进程先后的两个事件之间至少存在一个时钟tick，而在进程之间消息发送与接收事件之间，也要存在一个时钟tick。在图上如果用虚线表示时间tick的连线，同个进程的两个点之间一定存在一条连线，而消息发送的波浪线一定会穿过至少一条的连线。同时，由于进程与进程之间的物理时钟并不影响逻辑时钟，所以可以将每个进程轴上的点的距离进行任意地拉伸，比如把对应的tick对齐，使得tick之间的连线相互平行并垂直于进程轴，方便观察，如Figure 3所示。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/distributed_algorithm/Fig2.PNG" alt=""></p><p>为了满足两个时钟条件C1和C2，就要遵守下面两个实现规则 (Implementation rule)：</p><p>IR1. 每一个进程中连续的两个事件之间时钟值C要递增。</p><p>IR2. 如果事件a需要发送一条消息，那么它需要在消息中包含自己的时间戳 (timestamp)，当b收到这个消息后，读取消息中的时间戳后，需要设置设置自己的时钟值，设置的值不能比当前自己的时钟值小并且要大于消息中的时间戳。</p><p>显然IR1保证了C1的满足，而IR2保证了C2的满足。可以想到的一种最简单的实现就是单个进程中的每个非接收消息的事件偏序时间都等于前一个事件偏序事件+1，若该事件接收消息，则需要设置为max(prev, Tm) + 1，其中prev是该进程前一个事件的逻辑时间，Tm是收到消息中包含的时间戳。</p><h2 id="五、扩展为事件的全序"><a href="#五、扩展为事件的全序" class="headerlink" title="五、扩展为事件的全序"></a>五、扩展为事件的全序</h2><p>文中提出了一种简单的方法，将事件的偏序关系推广到了整个分布式系统中所有事件的全序关系，这种定义的方法任意定义了一个进程上的全序关系“prec”，即给进程定义一个优先级，默认按照逻辑时钟值来进行排序，当逻辑时钟值相同时，则按照进程的全序关系来进行排序。</p><p>定义系统事件的全序关系“=&gt;”：</p><ol><li>Ci&lt;a&gt; &lt; Cj&lt;b&gt;，或者</li><li>Ci&lt;a&gt; = Cj&lt;b&gt; and Pi prec Pj</li></ol><p>这种定义方法有点类似于拓扑排序，即定义好偏序关系后，通过定义一个任意的优先级，形成最终的序列，但是其中的偏序关系也得到了保留。在本文讨论的问题中，就是当a-&gt;b则a=&gt;b。但是这种全序的定义时十分随意的，不同的逻辑时钟，即使满足前面提到的两个实现规则，最终会产生不同的全序关系，不同的进程全序关系，最终的序列也不同。</p><h2 id="六、互斥问题的应用"><a href="#六、互斥问题的应用" class="headerlink" title="六、互斥问题的应用"></a>六、互斥问题的应用</h2><p>我们希望一个给进程分配资源的算法需要满足以下条件：</p><p>I. 资源分配给其他进程之前，之前分配的进程需要先释放这个资源</p><p>II. 资源要按照请求的先后顺序来进行分配</p><p>III. 只要每个被赋予权限的进程最终都释放了资源，那么所有的请求最终都能够被赋予资源</p><p>这三点看来都是简单的要求，而在实际中却不那么好满足。例如，采用中心调度进程P0来进行资源分配时，进程P1先向P0申请资源，然后P1向P2发送消息，P2收到消息后，向P0发送一个资源申请的请求，显然P1的请求应该先被满足，但是我们无法保证P1的请求比P2先到达。</p><p>为解决这个问题，作者使用一个满足IR1、IR2的系统时钟，生成一个事件的全序关系，并假设两个进程间的通信不会丢失且按序到达，那么算法规则定义如下：</p><ol><li>申请资源时，进程Pi会发送一个带有时间戳的消息Tm:Pi给其他进程，并把这条消息放入自己的请求队列 (Request queue) 中</li><li>进程Pj接收到Tm:Pi后，也放入自己维护的请求队列中，并发回一个带有时间戳的消息</li><li>释放消息时，进程Pi移除所有自己请求队列中的Tm:Pi，并将释放进程的消息和时间戳发送给其他进程</li><li>当进程Pj收到释放资源消息时，也移除掉自己请求队列中的Tm:Pi</li><li>只有Pi本地验证当以下两个条件都满足的时候，进程Pi才会被分配资源：<ul><li>Tm:Pi存在于自己的请求队列中并且在规定的全序关系中排在最前面</li><li>收到了其他所有进程发来的时间戳晚于Tm的消息</li></ul></li></ol><p>这样的算法满足了前面的条件I-III：</p><ul><li>通过3和4可以保证条件I</li><li>由于满足了全序序列，同时也满足了所有偏序关系，所以偏序关系上后出现的请求的时间戳一定会比先出现的要高，根据规则5(i)就能够按序进行资源赋予，满足条件II</li><li>规则2保证了规则5(ii)的触发，规则3将会移除自己进程中需要释放的请求，规则4将会移除在其他进程中记录的请求，这样，无论按照全序规则的下一个请求出现在哪个进程中，都能够满足，即触发了规则5(i)，满足了条件III</li></ul><h2 id="七、物理时钟"><a href="#七、物理时钟" class="headerlink" title="七、物理时钟"></a>七、物理时钟</h2><p>上面所设计的系统已经能够利用逻辑时钟生成的全序序列来完成一个进程资源分配算法了，但是，上述的系统当一个进程崩溃时就无法运行，因为请求资源的的进程将无法收到所有其他进程的确认信息，也就无法满足规则5(ii)。然而仅仅凭借逻辑时钟，很难确认一个进程是否已经崩溃或只是处于事件的间隙间。</p><p>再考虑一种情况，当用户A使用计算机发送一个请求，然后他打电话让B（系统并不知到电话里的信息）也发送一个请求，由于系统并不知道电话里消息所形成的一个偏序关系，所以如果先收到B的消息的话，仍然会先满足B的请求，这就造成了一个异常行为 (Anomalous Behavior)。</p><p>上面两个例子表明了，在分布式系统中引入物理时钟是有必要的，逻辑时钟无法处理Anomalous Behavior这样的又系统外部信息所照成的异常。假设系统中产生的事件集合为ψ，而并上外部事件后的集合为<em>ψ</em>, 在<em>ψ</em>上定义新的“happen before”强时钟条件关系“–&gt;”:</p><ul><li>Strong Clock Condition. 对于任意的事件a，b，如果a–&gt;b则C&lt;a&gt; = C&lt;b&gt;.</li></ul><p>现在引入系统中物理时钟条件，系统中需要保证每个进程之间的物理时钟相互接近并且改变的速度之间也要相互接近，所以要满足以下两个物理时钟条件：</p><p>PC1. 存在一个常数κ &lt;&lt; 1，对于任意i: |dCi(t)/dt - 1|&lt;κ.</p><p>PC2. 对于任意i，j: |Ci(t)-Cj(t)|&lt;ε.</p><p>这两个物理时钟条件要保证不发生异常行为，需要对时钟同步的过程中的两个变量ε ， κ进行限制。要满足Ci(t+μ)-Cj(t)&gt;0，其中μ是进程间通信的时延，也就是说，两个进程间的物理时钟相差不能超过物理时延，在物理事件上较晚开始的事务当其他进程的消息到达后，依然要拥有更大的时间戳。同时根据PC2可以得出Ci(t+μ)-Ci(t)&gt;(1-κ)μ，可以推导出，要满足Ci(t+μ)-Cj(t)&gt;0，就要满足ε/(1-κ)&lt;= μ.这两个物理时钟条件要保证不发生异常行为，需要对时钟同步的过程中的两个变量ε ， κ进行限制。要满足</p><p>最后将实现规则IR1，IR2进行推广</p><p>IR1’. 当任意进程Pi如果在物理事件t没有收到消息，那么Ci在t处可微并且dCi(t)/dt &gt; 0.</p><p>IR2’. (a) Pi在t时刻发送一个带有一个时间戳Tm=Ci(t)的消息m. (b) Pj在t’时刻收到消息m，Pj设置Cj(t’)为max(Cj(t’-0), Tm+μm).</p><p>其中μm是传输的最小时延，Cj(t’-0)是Cj(t)在t’处的左极限。</p><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><p>本文定义了分布式系统中的偏序关系“happen before”，并将其扩展为了全序关系，展示如何解决同步问题。并且讨论如何引入物理时钟来避免异常行为以及同步物理时钟需要满足的条件。可以说这篇文章对分布式系统的发展起到了奠基的作用。</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/11/18/Lamport_clocks/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 3349 Snowflake Snow Snowflakes（哈希）</title>
      <link>https://www.ph0en1x.space/2018/10/28/poj3349/</link>
      <guid>https://www.ph0en1x.space/2018/10/28/poj3349/</guid>
      <pubDate>Sat, 27 Oct 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 先哈希，再对比，对比就是循环滚动对比&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 先哈希，再对比，对比就是循环滚动对比</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY 100000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> snowFlakes[MAX][<span class="number">6</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; head[KEY];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSame</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(snowFlakes[a][j] != snowFlakes[b][(i+j)%<span class="number">6</span>])&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(snowFlakes[a][j] != snowFlakes[b][(i-j+<span class="number">6</span>)%<span class="number">6</span>])&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num, sum;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;snowFlakes[i][j]);</span><br><span class="line">            sum += snowFlakes[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> key = sum % KEY;</span><br><span class="line">            <span class="keyword">if</span>(head[key].size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; head[key].size(); j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(isSame(head[key][j], i))&#123;</span><br><span class="line">                        flag = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head[key].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Twin snowflakes found.\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No two snowflakes are alike.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/10/28/poj3349/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 2299 Ultra-QuickSort（树状数组）</title>
      <link>https://www.ph0en1x.space/2018/10/27/poj2299/</link>
      <guid>https://www.ph0en1x.space/2018/10/27/poj2299/</guid>
      <pubDate>Fri, 26 Oct 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;求逆序数，记录一下原来的位置，快排一下看看每个位置的数应该排在什么地方，然后从第一个数开始把它排序后的位置放入树状数组，并且可以算出在这之前的数有多少个没有放在这个数前面（已放入的数量-在我前面的数量），也就是逆序数&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>求逆序数，记录一下原来的位置，快排一下看看每个位置的数应该排在什么地方，然后从第一个数开始把它排序后的位置放入树状数组，并且可以算出在这之前的数有多少个没有放在这个数前面（已放入的数量-在我前面的数量），也就是逆序数</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 500005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> order;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;b) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num &lt; b.num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;arr[M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ranks[M];</span><br><span class="line"><span class="keyword">int</span> cnt[M];</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &amp; (-x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(pos &lt;= num)&#123;</span><br><span class="line">        cnt[pos] += x;</span><br><span class="line">        pos += lowbit(pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(pos &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        ans += cnt[pos];</span><br><span class="line">        pos -= lowbit(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num) &amp;&amp; num != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i].num);</span><br><span class="line">            arr[i].order = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            ranks[arr[i].order] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            update(ranks[i], <span class="number">1</span>);</span><br><span class="line">            ans += (i - getSum(ranks[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/10/27/poj2299/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 2388 Who&#39;s in the Middle</title>
      <link>https://www.ph0en1x.space/2018/10/25/poj2388/</link>
      <guid>https://www.ph0en1x.space/2018/10/25/poj2388/</guid>
      <pubDate>Wed, 24 Oct 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;一个大顶堆一个小顶堆和一个中位数mid，

第一个数是中位数，后面比中位数大的放到大顶堆，比中位数小的放到小顶堆，

并且不断调整两个堆的大小相差不超过1，较小的一方push mid，较大的一方pop一个当作mid
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><pre><code>一个大顶堆一个小顶堆和一个中位数mid，第一个数是中位数，后面比中位数大的放到大顶堆，比中位数小的放到小顶堆，并且不断调整两个堆的大小相差不超过1，较小的一方push mid，较大的一方pop一个当作mid</code></pre></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; mi;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, less&lt;<span class="keyword">int</span>&gt; &gt; mx;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ca, tmp;</span><br><span class="line">    <span class="keyword">while</span>(!mi.empty())</span><br><span class="line">        mi.pop();</span><br><span class="line">    <span class="keyword">while</span>(!mx.empty())</span><br><span class="line">        mx.pop();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;ca, &amp;mid);</span><br><span class="line">    ca--;</span><br><span class="line">    <span class="keyword">while</span>(ca--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tmp);</span><br><span class="line">        <span class="keyword">if</span>(tmp &lt; mid)&#123;</span><br><span class="line">            mx.push(tmp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            mi.push(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mi.size() &gt;= mx.size() + <span class="number">2</span>)&#123;</span><br><span class="line">            mx.push(mid);</span><br><span class="line">            mid = mi.top();</span><br><span class="line">            mi.pop();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mx.size() &gt;= mi.size() + <span class="number">2</span>)&#123;</span><br><span class="line">            mi.push(mid);</span><br><span class="line">            mid = mx.top();</span><br><span class="line">            mx.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/10/25/poj2388/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1936 All in All</title>
      <link>https://www.ph0en1x.space/2018/10/25/poj1936/</link>
      <guid>https://www.ph0en1x.space/2018/10/25/poj1936/</guid>
      <pubDate>Wed, 24 Oct 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;😂&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>😂</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">100002</span>];</span><br><span class="line">    <span class="keyword">char</span> t[<span class="number">100002</span>];</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s %s"</span>, s, t))&#123;</span><br><span class="line">        <span class="keyword">int</span> slen = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">int</span> tlen = <span class="built_in">strlen</span>(t);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; slen &amp;&amp; j &lt; tlen)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == t[j])</span><br><span class="line">                i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == slen)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/10/25/poj1936/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 3080 Blue Jeans (KMP)</title>
      <link>https://www.ph0en1x.space/2018/10/20/poj3080/</link>
      <guid>https://www.ph0en1x.space/2018/10/20/poj3080/</guid>
      <pubDate>Fri, 19 Oct 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;   枚举第一个串的长度和起始点，然后用KMP去一个个比较，得到最后一个能匹配的长度，同时要替换字典序最大的那个串&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>   枚举第一个串的长度和起始点，然后用KMP去一个个比较，得到最后一个能匹配的长度，同时要替换字典序最大的那个串</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> dna[<span class="number">12</span>][<span class="number">65</span>];</span><br><span class="line"><span class="keyword">int</span> nex[<span class="number">65</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">char</span> *p, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    nex[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || p[i] == p[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            nex[i] = j;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j = nex[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">char</span>*b, <span class="keyword">int</span> len1, <span class="keyword">int</span> len2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; len1)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || a[i] == b[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j = nex[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == len2)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ca, num;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ca);</span><br><span class="line">    <span class="keyword">while</span>(ca--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, dna[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> tmp[<span class="number">65</span>];</span><br><span class="line">        <span class="keyword">char</span> tmp2[<span class="number">65</span>];</span><br><span class="line">        <span class="keyword">int</span> final_len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag1, flag2;</span><br><span class="line">        <span class="keyword">int</span> pos;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= <span class="number">60</span>; len++)&#123;</span><br><span class="line">            flag2 = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">60</span>-len; i++)&#123;</span><br><span class="line">                <span class="built_in">strncpy</span>(tmp, dna[<span class="number">0</span>]+i, len);</span><br><span class="line">                tmp[len] = <span class="string">'\0'</span>;</span><br><span class="line">                getNext(tmp, len);</span><br><span class="line">                flag1 = <span class="literal">true</span>;</span><br><span class="line">                pos = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; num; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(kmp(dna[j], tmp, <span class="number">60</span>, len) == <span class="literal">false</span>)&#123;</span><br><span class="line">                        flag1 = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag1 == <span class="literal">true</span>)&#123;</span><br><span class="line">                    final_len = len;</span><br><span class="line">                    <span class="keyword">if</span>(pos == <span class="number">-1</span> || <span class="built_in">strcmp</span>(tmp, tmp2) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        pos = i;</span><br><span class="line">                        <span class="built_in">strncpy</span>(tmp2, tmp, len);</span><br><span class="line">                        tmp2[len] = <span class="string">'\0'</span>;</span><br><span class="line">                        <span class="comment">// printf("tmp2 %s\n", tmp2);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    flag2 = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag2 == <span class="literal">false</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(final_len &lt; <span class="number">3</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"no significant commonalities\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, tmp2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/10/20/poj3080/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1035 Spell checker</title>
      <link>https://www.ph0en1x.space/2018/10/15/poj1035/</link>
      <guid>https://www.ph0en1x.space/2018/10/15/poj1035/</guid>
      <pubDate>Sun, 14 Oct 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  直接暴力比就可以&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  直接暴力比就可以</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> dic[<span class="number">10005</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> tmp[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dic_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, dic[dic_len]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(dic[dic_len][<span class="number">0</span>] == <span class="string">'#'</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        dic_len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp))&#123;</span><br><span class="line">    <span class="keyword">if</span>(tmp[<span class="number">0</span>] == <span class="string">'#'</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dic_len; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(tmp, dic[i]) == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s is correct\n"</span>, tmp);</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s:"</span>, tmp);</span><br><span class="line">    <span class="keyword">int</span> tmp_len = <span class="built_in">strlen</span>(tmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dic_len; i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tmp_len == <span class="built_in">strlen</span>(dic[i]))&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tmp_len; j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tmp[j] != dic[i][j])</span><br><span class="line">    cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %s"</span>, dic[i]);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp_len == <span class="built_in">strlen</span>(dic[i]) + <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(dic[j]) &amp;&amp; k &lt; tmp_len; j++, k++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dic[i][j] != tmp[k])&#123;</span><br><span class="line">    j--;</span><br><span class="line">    cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(cnt &lt;= <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %s"</span>, dic[i]);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp_len == <span class="built_in">strlen</span>(dic[i]) - <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(dic[i]) &amp;&amp; k &lt; tmp_len; j++, k++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dic[i][j] != tmp[k])&#123;</span><br><span class="line">    k--;</span><br><span class="line">    cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt &lt;= <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %s"</span>, dic[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/10/15/poj1035/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 3436 ACM Computer Factory（ISAP）</title>
      <link>https://www.ph0en1x.space/2018/10/13/poj3436/</link>
      <guid>https://www.ph0en1x.space/2018/10/13/poj3436/</guid>
      <pubDate>Fri, 12 Oct 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;   ISAP，每台机器都分成两个节点，中间连一条容量为工作效率的边；&lt;/p&gt;
&lt;p&gt;  如果输入没有1，则和源点连接，输出没有0的和汇点连接；&lt;/p&gt;
&lt;p&gt;  任意两个点之间输入和输出对应相加没有1则可以连接一条容量为INF的边。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>   ISAP，每台机器都分成两个节点，中间连一条容量为工作效率的边；</p><p>  如果输入没有1，则和源点连接，输出没有0的和汇点连接；</p><p>  任意两个点之间输入和输出对应相加没有1则可以连接一条容量为INF的边。</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 10005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> flow;</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    Edge(<span class="keyword">int</span> f, <span class="keyword">int</span> t, <span class="keyword">int</span> fl, <span class="keyword">int</span> c)&#123;</span><br><span class="line">        from = f;</span><br><span class="line">        to = t;</span><br><span class="line">        cap = c;</span><br><span class="line">        flow = fl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p, n;</span><br><span class="line"><span class="keyword">int</span> in[M][<span class="number">10</span>], out[M][<span class="number">10</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; head[M], prefix[M];</span><br><span class="line"><span class="keyword">int</span> deep[M], num[M], cur[M], pre[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap)</span></span>&#123;</span><br><span class="line">    edges.push_back(Edge(from, to, <span class="number">0</span>, cap));</span><br><span class="line">    edges.push_back(Edge(to, from, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> sz = edges.size();</span><br><span class="line">    head[from].push_back(sz<span class="number">-2</span>);</span><br><span class="line">    head[to].push_back(sz<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(deep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(deep));</span><br><span class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    deep[s] = <span class="number">0</span>;</span><br><span class="line">    num[deep[s]]++;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prefix[cur].size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> to = prefix[cur][i];</span><br><span class="line">            <span class="keyword">if</span>(deep[to] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                deep[to] = deep[cur] + <span class="number">1</span>;</span><br><span class="line">                num[deep[to]]++;</span><br><span class="line">                q.push(to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">augument</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = t;</span><br><span class="line">    <span class="keyword">int</span> flow = INF;</span><br><span class="line">    <span class="keyword">while</span>(pos != s)&#123;</span><br><span class="line">        Edge &amp;e = edges[pre[pos]];</span><br><span class="line">        flow = min(flow, e.cap - e.flow);</span><br><span class="line">        pos = e.from;</span><br><span class="line">    &#125;</span><br><span class="line">    pos = t;</span><br><span class="line">    <span class="keyword">while</span>(pos != s)&#123;</span><br><span class="line">        edges[pre[pos]].flow += flow;</span><br><span class="line">        edges[pre[pos]^<span class="number">1</span>].flow -= flow;</span><br><span class="line">        pos = edges[pre[pos]].from;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ISAP</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    bfs(t, s);</span><br><span class="line">    <span class="keyword">int</span> pos = s;</span><br><span class="line">    <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="keyword">sizeof</span>(cur));</span><br><span class="line">    <span class="keyword">while</span>(deep[s] &lt; <span class="number">2</span>*(n+<span class="number">1</span>))&#123;</span><br><span class="line"><span class="comment">//        cout &lt;&lt; flow &lt;&lt; " " &lt;&lt; pos &lt;&lt; " " &lt;&lt; deep[pos] &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span>(pos == t)&#123;</span><br><span class="line">            flow += augument(s, t);</span><br><span class="line">            pos = s;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = cur[pos]; i &lt; head[pos].size(); i++)&#123;</span><br><span class="line">            Edge &amp;e = edges[head[pos][i]];</span><br><span class="line">            <span class="keyword">if</span>(e.cap &gt; e.flow &amp;&amp; deep[pos] == deep[e.to] + <span class="number">1</span>)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                cur[pos] = i;</span><br><span class="line">                pre[e.to] = head[pos][i];</span><br><span class="line">                pos = e.to;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> mi = <span class="number">2</span>*n+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; head[pos].size(); i++)&#123;</span><br><span class="line">                Edge &amp;e = edges[head[pos][i]];</span><br><span class="line">                <span class="keyword">if</span>(e.cap &gt; e.flow)&#123;</span><br><span class="line">                    mi = min(mi, deep[e.to]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num[deep[pos]]--;</span><br><span class="line">            <span class="keyword">if</span>(num[deep[pos]] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            deep[pos] = mi+<span class="number">1</span>;</span><br><span class="line">            num[deep[pos]]++;</span><br><span class="line">            cur[pos] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(pos != s)</span><br><span class="line">                pos = edges[pre[pos]].from;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">bool</span> one, zero, flag;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p, &amp;n))&#123;</span><br><span class="line">        edges.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>*n+<span class="number">2</span>; i++)&#123;</span><br><span class="line">            head[i].clear();</span><br><span class="line">            prefix[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tmp);</span><br><span class="line">            add(i, i+n, tmp);</span><br><span class="line">            prefix[i+n].push_back(i);</span><br><span class="line">            one = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;in[i][j]);</span><br><span class="line">                <span class="keyword">if</span>(in[i][j] == <span class="number">1</span>)</span><br><span class="line">                    one = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            zero = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;out[i][j]);</span><br><span class="line">                <span class="keyword">if</span>(out[i][j] == <span class="number">0</span>)</span><br><span class="line">                    zero = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!one)&#123;</span><br><span class="line">                add(<span class="number">2</span>*n, i, INF);</span><br><span class="line">                prefix[i].push_back(<span class="number">2</span>*n);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!zero)&#123;</span><br><span class="line">                add(i+n, <span class="number">2</span>*n+<span class="number">1</span>, INF);</span><br><span class="line">                prefix[<span class="number">2</span>*n+<span class="number">1</span>].push_back(i+n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; p; k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(out[i][k] + in[j][k] == <span class="number">1</span>)&#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag == <span class="literal">true</span>)&#123;</span><br><span class="line">                    add(i+n, j, INF);</span><br><span class="line">                    prefix[j].push_back(i+n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = ISAP(<span class="number">2</span>*n, <span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(edges[i].flow &gt; <span class="number">0</span> &amp;&amp; edges[i].from % n != edges[i].to % n &amp;&amp; edges[i].from != <span class="number">2</span>*n &amp;&amp; edges[i].to != <span class="number">2</span>*n+<span class="number">1</span>)&#123;</span><br><span class="line">                v.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans, v.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++)&#123;</span><br><span class="line">            Edge &amp;e = edges[v[i]];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, (e.from)%n+<span class="number">1</span>, (e.to)%n+<span class="number">1</span>, e.flow);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/10/13/poj3436/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1459 Power Network（ISAP）</title>
      <link>https://www.ph0en1x.space/2018/10/02/poj1459/</link>
      <guid>https://www.ph0en1x.space/2018/10/02/poj1459/</guid>
      <pubDate>Mon, 01 Oct 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  ISAP算法模板&lt;/p&gt;
&lt;p&gt;  最大流增广路算法大致有三个优化等级&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;EK算法（Edmonds Karp）通过dfs每次在残量网络中找到一条可行的增广路进行增广&lt;/li&gt;
&lt;li&gt;Dinic算法 在每次dfs寻找增广路前，先进行一次dfs标号，流量只沿着源点到汇点之间的最短路进行增广，这就相当于给了流一个势能，水只会向下流而不会随处流动，大大所短了EK算法中发现的增广路，提高了效率&lt;/li&gt;
&lt;li&gt;ISAP算法，在Dinic算法的基础上进一步优化，并不需要在每次增广前都用bfs重新标号，而是只进行一次标号，之后在一个结点无法增广时才考虑修改节点的标号，同时加入一个gap优化，当某一个标号的节点个数为0时，停止增广，输出最大流。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  ISAP算法模板</p><p>  最大流增广路算法大致有三个优化等级</p><ol><li>EK算法（Edmonds Karp）通过dfs每次在残量网络中找到一条可行的增广路进行增广</li><li>Dinic算法 在每次dfs寻找增广路前，先进行一次dfs标号，流量只沿着源点到汇点之间的最短路进行增广，这就相当于给了流一个势能，水只会向下流而不会随处流动，大大所短了EK算法中发现的增广路，提高了效率</li><li>ISAP算法，在Dinic算法的基础上进一步优化，并不需要在每次增广前都用bfs重新标号，而是只进行一次标号，之后在一个结点无法增广时才考虑修改节点的标号，同时加入一个gap优化，当某一个标号的节点个数为0时，停止增广，输出最大流。</li></ol></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NODE 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 150000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    <span class="keyword">int</span> flow;</span><br><span class="line">    Edge(<span class="keyword">int</span> f, <span class="keyword">int</span> t, <span class="keyword">int</span> c, <span class="keyword">int</span> fw)&#123;</span><br><span class="line">        from = f;</span><br><span class="line">        to = t;</span><br><span class="line">        cap = c;</span><br><span class="line">        flow = fw;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mp[MAX_NODE], prefix[MAX_NODE]; <span class="comment">//the suffix edges of every node, the prefix nodes of every node</span></span><br><span class="line"><span class="keyword">int</span> deep[MAX_NODE], num[MAX_NODE], cur[MAX_NODE], pre[MAX_NODE];</span><br><span class="line"><span class="keyword">int</span> n, np, nc, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap)</span></span>&#123;</span><br><span class="line">    edges.push_back(Edge(from, to, cap, <span class="number">0</span>));</span><br><span class="line">    edges.push_back(Edge(to, from, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> sz = edges.size();</span><br><span class="line">    mp[from].push_back(sz<span class="number">-2</span>);</span><br><span class="line">    mp[to].push_back(sz<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(deep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(deep));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    deep[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prefix[cur].size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> to = prefix[cur][i];</span><br><span class="line">            <span class="keyword">if</span>(deep[to] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                deep[to] = deep[cur] + <span class="number">1</span>;</span><br><span class="line">                q.push(to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">augument</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = t;</span><br><span class="line">    <span class="keyword">int</span> flow = INF;</span><br><span class="line">    <span class="keyword">while</span>(pos != s)&#123;</span><br><span class="line">        Edge &amp;e = edges[pre[pos]];</span><br><span class="line">        flow = min(flow, e.cap - e.flow);</span><br><span class="line"><span class="comment">//        printf("flow %d\n", flow);</span></span><br><span class="line"><span class="comment">//        printf("%d %d\n", e.cap, e.flow);</span></span><br><span class="line">        pos = e.from;</span><br><span class="line">    &#125;</span><br><span class="line">    pos = t;</span><br><span class="line">    <span class="keyword">while</span>(pos != s)&#123;</span><br><span class="line">        edges[pre[pos]].flow += flow;</span><br><span class="line">        edges[pre[pos]^<span class="number">1</span>].flow -= flow;</span><br><span class="line">        pos = edges[pre[pos]].from;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ISAP</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    bfs(t, s);</span><br><span class="line">    <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="keyword">sizeof</span>(cur));</span><br><span class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        num[deep[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pos = s;</span><br><span class="line">    <span class="keyword">while</span>(deep[s] &lt; n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos == t)&#123;</span><br><span class="line">            <span class="comment">//augument one path successfully</span></span><br><span class="line">            flow += augument(s, t);</span><br><span class="line">            <span class="comment">//continue the next one</span></span><br><span class="line">            pos = s;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = cur[pos]; i &lt; mp[pos].size(); i++)&#123;</span><br><span class="line">            Edge &amp;e = edges[mp[pos][i]];</span><br><span class="line">            <span class="keyword">if</span>(e.cap &gt; e.flow &amp;&amp; deep[pos] == deep[e.to] + <span class="number">1</span>)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                cur[pos] = i;</span><br><span class="line">                pre[e.to] = mp[pos][i];</span><br><span class="line">                pos = e.to;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> mi = n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mp[pos].size(); i++)&#123;</span><br><span class="line">                Edge &amp;e = edges[mp[pos][i]];</span><br><span class="line">                <span class="keyword">if</span>(e.cap &gt; e.flow)&#123;</span><br><span class="line">                    mi = min(mi, deep[e.to]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//gap</span></span><br><span class="line">            num[deep[pos]]--;</span><br><span class="line">            <span class="keyword">if</span>(num[deep[pos]] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            num[mi+<span class="number">1</span>]++;</span><br><span class="line">            deep[pos] = mi+<span class="number">1</span>;</span><br><span class="line">            cur[pos] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(pos != s)</span><br><span class="line">                pos = edges[pre[pos]].from;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;np, &amp;nc, &amp;m))&#123;</span><br><span class="line">        n += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            mp[i].clear();</span><br><span class="line">            prefix[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">        edges.clear();</span><br><span class="line">        <span class="keyword">int</span> from, to, cap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" (%d,%d)%d"</span>, &amp;from, &amp;to, &amp;cap);</span><br><span class="line">            add(from, to, cap);</span><br><span class="line">            prefix[to].push_back(from);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; np; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" (%d)%d"</span>, &amp;from, &amp;cap);</span><br><span class="line">            add(n<span class="number">-2</span>, from, cap);</span><br><span class="line">            prefix[from].push_back(n<span class="number">-2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nc; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" (%d)%d"</span>, &amp;from, &amp;cap);</span><br><span class="line">            add(from, n<span class="number">-1</span>, cap);</span><br><span class="line">            prefix[n<span class="number">-1</span>].push_back(from);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = ISAP(n<span class="number">-2</span>, n<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/10/02/poj1459/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 3020 Antenna Placement（匈牙利算法）</title>
      <link>https://www.ph0en1x.space/2018/10/01/poj3020/</link>
      <guid>https://www.ph0en1x.space/2018/10/01/poj3020/</guid>
      <pubDate>Sun, 30 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  匈牙利算法&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  匈牙利算法</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">45</span>][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">bool</span> grid[<span class="number">405</span>][<span class="number">405</span>];</span><br><span class="line"><span class="keyword">char</span> in[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">405</span>];</span><br><span class="line"><span class="keyword">int</span> link[<span class="number">405</span>];</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; num; y++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[x][y] &amp;&amp; !vis[y])&#123;</span><br><span class="line">            vis[y] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(link[y] == <span class="number">-1</span> || dfs(link[y]))&#123;</span><br><span class="line">                link[y] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(link, <span class="number">-1</span>, <span class="keyword">sizeof</span>(link));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(dfs(i))&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ca;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ca);</span><br><span class="line">    <span class="keyword">while</span>(ca--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(mp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(mp));</span><br><span class="line">        <span class="built_in">memset</span>(grid, <span class="number">0</span>, <span class="keyword">sizeof</span>(grid));</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, in+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(in[j] == <span class="string">'*'</span>)&#123;</span><br><span class="line">                    mp[i][j] = num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] &gt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)&#123;</span><br><span class="line">                        <span class="keyword">int</span> x = i + dir[k][<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">int</span> y = j + dir[k][<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span>(mp[x][y] &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                            grid[mp[i][j]][mp[x][y]] = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        search();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num - cnt/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/10/01/poj3020/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 3041 Asteroids</title>
      <link>https://www.ph0en1x.space/2018/09/30/poj3041/</link>
      <guid>https://www.ph0en1x.space/2018/09/30/poj3041/</guid>
      <pubDate>Sat, 29 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  匈牙利算法模板&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  匈牙利算法模板</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> grid[M][M];</span><br><span class="line"><span class="keyword">bool</span> vis[M];<span class="comment">//本轮是否已经尝试通过y来增广并且失败</span></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> link[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[x][i] &amp;&amp; !vis[i])&#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(link[i] == <span class="number">-1</span> || dfs(link[i]) == <span class="literal">true</span>)&#123;</span><br><span class="line">                link[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(dfs(i))</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(link, <span class="number">-1</span>, <span class="keyword">sizeof</span>(link));</span><br><span class="line">        <span class="built_in">memset</span>(grid, <span class="literal">false</span>, <span class="keyword">sizeof</span>(grid));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">            grid[x][y] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        search();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/30/poj3041/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 3026 Borg Maze</title>
      <link>https://www.ph0en1x.space/2018/09/29/poj3026/</link>
      <guid>https://www.ph0en1x.space/2018/09/29/poj3026/</guid>
      <pubDate>Fri, 28 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  把每个S和A都看成节点，BFS求之间的距离然后套用Prim来计算最小生成树。注意输入有坑，整数输入完后可能有多个空格，要用gets()而不能用getchar()&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  把每个S和A都看成节点，BFS求之间的距离然后套用Prim来计算最小生成树。注意输入有坑，整数输入完后可能有多个空格，要用gets()而不能用getchar()</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 55</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M_ROBOT 105</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> step;</span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)&#123;</span><br><span class="line">        x = a;</span><br><span class="line">        y = b;</span><br><span class="line">        step = c;</span><br><span class="line">    &#125;</span><br><span class="line">    node()&#123;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        step = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;robots[M_ROBOT];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queueEdge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    queueEdge()&#123;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        v = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    queueEdge(to, len)&#123;</span><br><span class="line">        num = to;</span><br><span class="line">        v = len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> mp[M][M];</span><br><span class="line"><span class="keyword">int</span> arr[M_ROBOT][M_ROBOT];</span><br><span class="line"><span class="keyword">bool</span> vis[M][M];</span><br><span class="line"><span class="keyword">int</span> n, m, num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    robots[start].step = <span class="number">0</span>;</span><br><span class="line">    q.push(robots[start]);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        node cur = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[cur.x][cur.y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">char</span> tmp = mp[cur.x][cur.y];</span><br><span class="line">        <span class="keyword">if</span>(tmp != <span class="string">'#'</span> &amp;&amp; tmp != <span class="string">' '</span>)&#123;</span><br><span class="line">            arr[start][(<span class="keyword">int</span>)tmp] = cur.step;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mp[cur.x<span class="number">-1</span>][cur.y] != <span class="string">'#'</span> &amp;&amp; !vis[cur.x<span class="number">-1</span>][cur.y])</span><br><span class="line">            q.push(node(cur.x<span class="number">-1</span>, cur.y, cur.step+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(mp[cur.x+<span class="number">1</span>][cur.y] != <span class="string">'#'</span> &amp;&amp; !vis[cur.x+<span class="number">1</span>][cur.y])</span><br><span class="line">            q.push(node(cur.x+<span class="number">1</span>, cur.y, cur.step+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(mp[cur.x][cur.y<span class="number">-1</span>] != <span class="string">'#'</span> &amp;&amp; !vis[cur.x][cur.y<span class="number">-1</span>])</span><br><span class="line">            q.push(node(cur.x, cur.y<span class="number">-1</span>, cur.step+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(mp[cur.x][cur.y+<span class="number">1</span>] != <span class="string">'#'</span> &amp;&amp; !vis[cur.x][cur.y+<span class="number">1</span>])</span><br><span class="line">            q.push(node(cur.x, cur.y+<span class="number">1</span>, cur.step+<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    priority_queue&lt;queueEdge&gt; q;</span><br><span class="line">    q.push(queueEdge(start, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; num; k++)&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            node cur = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;<span class="keyword">while</span>(vis[cur.num]);</span><br><span class="line">        vis[cur.num] = <span class="literal">true</span>;</span><br><span class="line">        ans += vis.v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i])</span><br><span class="line">                q.push(queueEdge(i, arr[cur.num][i]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ca;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ca);</span><br><span class="line">    <span class="keyword">while</span>(ca--)&#123;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            gets(mp[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="string">'A'</span> || mp[i][j] == <span class="string">'S'</span>)&#123;</span><br><span class="line">                    mp[i][j] = num;</span><br><span class="line">                    robots[num].x = i;</span><br><span class="line">                    robots[num].y = j;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            bfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = prim(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/29/poj3026/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 2485 Highways</title>
      <link>https://www.ph0en1x.space/2018/09/29/poj2485/</link>
      <guid>https://www.ph0en1x.space/2018/09/29/poj2485/</guid>
      <pubDate>Fri, 28 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 要求能够让所有节点联通并且最大边权最小的问题，其实求的就是最小生成树的最大边权；&lt;/p&gt;
&lt;p&gt; 证明：最小生成树的最大边权一定是所有最小生成树中最小的&lt;/p&gt;
&lt;p&gt; 反证法：假设最小生成树T1的最大边(u, v)，和一个非最小生成树T2的最大边(a, b)，且(u, v) &amp;gt; (a, b) &amp;gt; T2中的其他所有边&lt;/p&gt;
&lt;p&gt; 去掉(u, v)，最小生成树会形成一个隔，u，v分别在割的两个分量中，且u，v在T2中一定存在一条唯一的路径，又由于u，v在T1中属于不同的分量，所以这条路径中一定存在着某条边两端分别在割的两个分量中，在T1中连上这条边就能够形成新的生成树，且比原来的最小生成树小，矛盾；&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 要求能够让所有节点联通并且最大边权最小的问题，其实求的就是最小生成树的最大边权；</p><p> 证明：最小生成树的最大边权一定是所有最小生成树中最小的</p><p> 反证法：假设最小生成树T1的最大边(u, v)，和一个非最小生成树T2的最大边(a, b)，且(u, v) &gt; (a, b) &gt; T2中的其他所有边</p><p> 去掉(u, v)，最小生成树会形成一个隔，u，v分别在割的两个分量中，且u，v在T2中一定存在一条唯一的路径，又由于u，v在T1中属于不同的分量，所以这条路径中一定存在着某条边两端分别在割的两个分量中，在T1中连上这条边就能够形成新的生成树，且比原来的最小生成树小，矛盾；</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 501</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> vis[MAX];</span><br><span class="line"><span class="keyword">int</span> ca, num;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;b) <span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> v &gt; b.v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">node tmp;</span><br><span class="line">tmp.num = start;</span><br><span class="line">tmp.v = <span class="number">0</span>;</span><br><span class="line">q.push(tmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; num; k++)&#123;</span><br><span class="line">node cur;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">cur = q.top();</span><br><span class="line">q.pop();</span><br><span class="line">&#125;<span class="keyword">while</span>(vis[cur.num]);</span><br><span class="line">vis[cur.num] = <span class="literal">true</span>;</span><br><span class="line">ans = max(ans, cur.v);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i] &amp;&amp; arr[cur.num][i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">node tmp;</span><br><span class="line">tmp.num = i;</span><br><span class="line">tmp.v = arr[cur.num][i];</span><br><span class="line">q.push(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ca))&#123;</span><br><span class="line"><span class="keyword">while</span>(ca--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = prim(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/29/poj2485/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1258 Agri-Net</title>
      <link>https://www.ph0en1x.space/2018/09/28/poj1258/</link>
      <guid>https://www.ph0en1x.space/2018/09/28/poj1258/</guid>
      <pubDate>Thu, 27 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; Prim模板&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> Prim模板</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> vis[MAX];</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;b) <span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> v &gt; b.v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">node tmp;</span><br><span class="line">tmp.num = start;</span><br><span class="line">tmp.v = <span class="number">0</span>;</span><br><span class="line">q.push(tmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; num; k++)&#123;</span><br><span class="line">node cur;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">cur = q.top();</span><br><span class="line">q.pop();</span><br><span class="line">&#125;<span class="keyword">while</span>(vis[cur.num]);</span><br><span class="line">vis[cur.num] = <span class="literal">true</span>;</span><br><span class="line">ans += cur.v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i] &amp;&amp; arr[cur.num][i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">node tmp;</span><br><span class="line">tmp.num = i;</span><br><span class="line">tmp.v = arr[cur.num][i];</span><br><span class="line">q.push(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = prim(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/28/poj1258/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1094 Sorting It All Out</title>
      <link>https://www.ph0en1x.space/2018/09/27/poj1094/</link>
      <guid>https://www.ph0en1x.space/2018/09/27/poj1094/</guid>
      <pubDate>Wed, 26 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 拓扑排序，加入一个关系后就判断一次，注意判断排序不能确定后不能马上跳过，还要继续看看会不会形成环&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 拓扑排序，加入一个关系后就判断一次，注意判断排序不能确定后不能马上跳过，还要继续看看会不会形成环</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> arr[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> degree[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">topoSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tmpDegree[<span class="number">26</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(tmpDegree, degree, <span class="keyword">sizeof</span>(tmpDegree));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span>(degree[i] == <span class="number">0</span>)</span><br><span class="line">            q.push(i);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">if</span>(q.size() &gt; <span class="number">1</span>)</span><br><span class="line">            ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        ans[pos++] = cur + <span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[cur][i])&#123;</span><br><span class="line">                tmpDegree[i]--;</span><br><span class="line">                <span class="keyword">if</span>(tmpDegree[i] == <span class="number">0</span>)</span><br><span class="line">                    q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt; n)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[pos] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">        <span class="built_in">memset</span>(degree, <span class="number">0</span>, <span class="keyword">sizeof</span>(degree));</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch);</span><br><span class="line">            arr[ch[<span class="number">0</span>]-<span class="string">'A'</span>][ch[<span class="number">2</span>]-<span class="string">'A'</span>] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(flag)    <span class="keyword">continue</span>;</span><br><span class="line">            degree[ch[<span class="number">2</span>]-<span class="string">'A'</span>]++;</span><br><span class="line">            <span class="keyword">int</span> topo = topoSort();</span><br><span class="line">            <span class="keyword">if</span>(topo == <span class="number">1</span>)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Sorted sequence determined after %d relations: %s.\n"</span>, i+<span class="number">1</span>, ans);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(topo == <span class="number">-1</span>)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Inconsistency found after %d relations.\n"</span>, i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Sorted sequence cannot be determined.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/27/poj1094/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1789 Truck History（Prim）</title>
      <link>https://www.ph0en1x.space/2018/09/26/poj1789/</link>
      <guid>https://www.ph0en1x.space/2018/09/26/poj1789/</guid>
      <pubDate>Tue, 25 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; &lt;a href=&quot;http://poj.org/problem?id=1789&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 最小生成树&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> <a href="http://poj.org/problem?id=1789" target="_blank" rel="noopener"></a></p><p> 最小生成树</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 2000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> t[M][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> arr[M][M];</span><br><span class="line"><span class="keyword">bool</span> vis[M];</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;b) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> len &gt; b.len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t[a][i] != t[b][i])</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    node tmp;</span><br><span class="line">    tmp.num = start;</span><br><span class="line">    tmp.len = <span class="number">0</span>;</span><br><span class="line">    q.push(tmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; num; k++)&#123;</span><br><span class="line">        node cur;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            cur = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;<span class="keyword">while</span>(vis[cur.num]);</span><br><span class="line">        vis[cur.num] = <span class="literal">true</span>;</span><br><span class="line">        ans += cur.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">                node tmp;</span><br><span class="line">                tmp.num = i;</span><br><span class="line">                tmp.len = arr[cur.num][i];</span><br><span class="line">                q.push(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num) &amp;&amp; num != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            arr[i][i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; num; j++)&#123;</span><br><span class="line">                arr[i][j] = arr[j][i] = dist(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = prim(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The highest possible quality is 1/%d.\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/26/poj1789/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 2240 Arbitrage</title>
      <link>https://www.ph0en1x.space/2018/09/25/poj2240/</link>
      <guid>https://www.ph0en1x.space/2018/09/25/poj2240/</guid>
      <pubDate>Mon, 24 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; SPFA找正环或者用Floyd找自己到自己最长路大于1的点&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> SPFA找正环或者用Floyd找自己到自己最长路大于1的点</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><p>SPFA</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 35</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 80000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> arr[M][M];</span><br><span class="line"><span class="keyword">bool</span> isInqueue[M];</span><br><span class="line"><span class="keyword">int</span> numInqueue[M];</span><br><span class="line"><span class="keyword">int</span> num, numedge;</span><br><span class="line"><span class="keyword">double</span> dis[M];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(numInqueue, <span class="number">0</span>, <span class="keyword">sizeof</span>(numInqueue));</span><br><span class="line">    <span class="built_in">memset</span>(isInqueue, <span class="number">0</span>, <span class="keyword">sizeof</span>(isInqueue));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">        q.push(i);</span><br><span class="line">        isInqueue[i] = <span class="literal">true</span>;</span><br><span class="line">        numInqueue[i]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        isInqueue[cur] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[cur][i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[i] &lt; dis[cur]*arr[cur][i])&#123;</span><br><span class="line">                    dis[i] = dis[cur] * arr[cur][i];</span><br><span class="line">                    <span class="keyword">if</span>(!isInqueue[i])&#123;</span><br><span class="line">                        q.push(i);</span><br><span class="line">                        isInqueue[i] = <span class="literal">true</span>;</span><br><span class="line">                        numInqueue[i] ++;</span><br><span class="line">                        <span class="keyword">if</span>(numInqueue[i] &gt;= num)</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ca = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num) &amp;&amp; num != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(arr, <span class="number">0</span> , <span class="keyword">sizeof</span>(arr));</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="built_in">string</span> name, c1, c2;</span><br><span class="line">        <span class="keyword">double</span> rate;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">            m[name] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;numedge);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numedge; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; c1 &gt;&gt; rate &gt;&gt; c2;</span><br><span class="line">            arr[m[c1]][m[c2]] = rate;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag = spfa();</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: Yes\n"</span>, ca++);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: No\n"</span>, ca++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Floyd</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> arr[<span class="number">31</span>][<span class="number">31</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; name;</span><br><span class="line">    <span class="keyword">int</span> num , m;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">double</span> trans;</span><br><span class="line">    <span class="built_in">string</span> cash1, cash2;</span><br><span class="line">    <span class="keyword">int</span> ca = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; num &amp;&amp; num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; cash1;</span><br><span class="line">            name[cash1] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; cash1;</span><br><span class="line">            a = name[cash1];</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; trans;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; cash2;</span><br><span class="line">            b = name[cash2];</span><br><span class="line">            arr[a][b] = trans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; num; k++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++)</span><br><span class="line">                    arr[i][j] = max(arr[i][j], arr[i][k]*arr[k][j]);</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i][i] &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; ca++ &lt;&lt; <span class="string">": Yes"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: No\n"</span>, ca++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/25/poj2240/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1125 Stockbroker Grapevine</title>
      <link>https://www.ph0en1x.space/2018/09/24/poj1125/</link>
      <guid>https://www.ph0en1x.space/2018/09/24/poj1125/</guid>
      <pubDate>Sun, 23 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; &lt;a href=&quot;http://poj.org/problem?id=1125&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; Floyd&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> <a href="http://poj.org/problem?id=1125" target="_blank" rel="noopener"></a></p><p> Floyd</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[M][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num, contact;</span><br><span class="line">    <span class="keyword">int</span> to, cost;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num) &amp;&amp; num != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)</span><br><span class="line">                    arr[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    arr[i][j] = INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;contact);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; contact; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;to, &amp;cost);</span><br><span class="line">                arr[i][to] = cost;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= num; k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num; j++)&#123;</span><br><span class="line">                    arr[i][j] = min(arr[i][j], arr[i][k] + arr[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> mi = INF;</span><br><span class="line">        <span class="keyword">int</span> pos;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">int</span> mx = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i][j] &gt;= INF)&#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mx = max(mx, arr[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="literal">false</span> &amp;&amp; mi &gt; mx)&#123;</span><br><span class="line">                mi = mx;</span><br><span class="line">                pos = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mi == INF)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"disjoint\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, pos, mi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/24/poj1125/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 2253 Frogger（Floyd）</title>
      <link>https://www.ph0en1x.space/2018/09/23/poj2253/</link>
      <guid>https://www.ph0en1x.space/2018/09/23/poj2253/</guid>
      <pubDate>Sat, 22 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 利用Floyd的更新策略，只不过把要更新的值类型从最短路变成最大跨度。输出用%lf WA死我了，改用%f或cout就好了。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 利用Floyd的更新策略，只不过把要更新的值类型从最短路变成最大跨度。输出用%lf WA死我了，改用%f或cout就好了。</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 202</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x;</span><br><span class="line"><span class="keyword">double</span> y;</span><br><span class="line">&#125;stones[MAX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> arr[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> ca = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num) &amp;&amp; num != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;stones[i].x, &amp;stones[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            arr[i][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; num; j++)&#123;</span><br><span class="line">arr[i][j] = arr[j][i] = <span class="built_in">sqrt</span>((stones[i].x - stones[j].x)*(stones[i].x - stones[j].x) + (stones[i].y - stones[j].y)*(stones[i].y - stones[j].y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; num; k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++)&#123;</span><br><span class="line">arr[i][j] = min(arr[i][j], max(arr[i][k], arr[k][j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Scenario #%d\n"</span>, ca++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Frog Distance = %.3f\n\n"</span>, (arr[<span class="number">0</span>][<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/23/poj2253/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1062 昂贵的聘礼</title>
      <link>https://www.ph0en1x.space/2018/09/22/poj1062/</link>
      <guid>https://www.ph0en1x.space/2018/09/22/poj1062/</guid>
      <pubDate>Fri, 21 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 每个物品是一个节点，当前dis是直接用钱换的价值，从被申请交换的物品向申请交换的物品方向建边，边权是交换后还需要的优惠价。至于等级的限制，因为最后一定要和酋长交换，否则答案就是酋长给出的原价，所以将所有包含酋长的等级长为m的区间都枚举出来，求所有点到酋长的最短路，spfa就直接把所有点push一遍到queue中就行。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 每个物品是一个节点，当前dis是直接用钱换的价值，从被申请交换的物品向申请交换的物品方向建边，边权是交换后还需要的优惠价。至于等级的限制，因为最后一定要和酋长交换，否则答案就是酋长给出的原价，所以将所有包含酋长的等级长为m的区间都枚举出来，求所有点到酋长的最短路，spfa就直接把所有点push一遍到queue中就行。</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NODE 101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[MAX_NODE][MAX_NODE];</span><br><span class="line"><span class="keyword">int</span> ranks[MAX_NODE];</span><br><span class="line"><span class="keyword">int</span> cost[MAX_NODE];</span><br><span class="line"><span class="keyword">int</span> dis[MAX_NODE];</span><br><span class="line"><span class="keyword">bool</span> isInqueue[MAX_NODE];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">int</span> p, l, x;</span><br><span class="line"><span class="keyword">int</span> t, v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isInqueue, <span class="number">0</span>, <span class="keyword">sizeof</span>(isInqueue));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        dis[i] = cost[i];</span><br><span class="line">        <span class="keyword">if</span>(ranks[i] &gt;= ranks[<span class="number">1</span>]-m+pos &amp;&amp; ranks[i] &lt;= ranks[<span class="number">1</span>]+pos)&#123;</span><br><span class="line">            q.push(i);</span><br><span class="line">            isInqueue[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        isInqueue[cur] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[cur][i] &gt; <span class="number">0</span> &amp;&amp; (ranks[i] &gt;= ranks[<span class="number">1</span>]-m+pos &amp;&amp; ranks[i] &lt;= ranks[<span class="number">1</span>]+pos))&#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[i] &gt; arr[cur][i] + dis[cur])&#123;</span><br><span class="line">                    dis[i] = arr[cur][i] + dis[cur];</span><br><span class="line">                    <span class="keyword">if</span>(!isInqueue[i])&#123;</span><br><span class="line">                        isInqueue[i] = <span class="literal">true</span>;</span><br><span class="line">                        q.push(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;p, &amp;l, &amp;x);</span><br><span class="line">            cost[i] = dis[i] = p;</span><br><span class="line">            ranks[i] = l;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;t, &amp;v);</span><br><span class="line">                arr[t][i] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mi = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            spfa(i);</span><br><span class="line">            mi = min(mi, dis[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/22/poj1062/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 3259 Wormholes</title>
      <link>https://www.ph0en1x.space/2018/09/21/poj3259/</link>
      <guid>https://www.ph0en1x.space/2018/09/21/poj3259/</guid>
      <pubDate>Thu, 20 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 同样判断是否存在&lt;code&gt;负环/正环&lt;/code&gt;的&lt;code&gt;最短路/最长路&lt;/code&gt;问题，用SPFA或Bellman-Ford直接求负环就行&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 同样判断是否存在<code>负环/正环</code>的<code>最短路/最长路</code>问题，用SPFA或Bellman-Ford直接求负环就行</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><p>这是这次写的SPFA的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NODE 501</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_EDGE 5402</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ca, n, m, w;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAX_NODE];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> dis[MAX_NODE];</span><br><span class="line"><span class="keyword">bool</span> isInqueue[MAX_NODE];</span><br><span class="line"><span class="keyword">int</span> num_inqueue[MAX_NODE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    <span class="keyword">int</span> nex;</span><br><span class="line">&#125;edges[MAX_EDGE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> cap)</span></span>&#123;</span><br><span class="line">    edges[cnt].cap = cap;</span><br><span class="line">    edges[cnt].v = t;</span><br><span class="line">    edges[cnt].nex = head[s];</span><br><span class="line">    head[s] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">        q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(num_inqueue, <span class="number">0</span>, <span class="keyword">sizeof</span>(num_inqueue));</span><br><span class="line">    <span class="built_in">memset</span>(isInqueue, <span class="literal">false</span>, <span class="keyword">sizeof</span>(isInqueue));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_NODE; i++)</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">    dis[start] = <span class="number">0</span>;</span><br><span class="line">    q.push(start);</span><br><span class="line">    isInqueue[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        isInqueue[cur] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> pos = head[cur]; pos != <span class="number">-1</span>; pos = edges[pos].nex)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = edges[pos].v;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[cur] + edges[pos].cap)&#123;</span><br><span class="line">                dis[v] = dis[cur] + edges[pos].cap;</span><br><span class="line">                <span class="keyword">if</span>(!isInqueue[v])&#123;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                    isInqueue[v] = <span class="literal">true</span>;</span><br><span class="line">                    num_inqueue[v]++;</span><br><span class="line">                    <span class="keyword">if</span>(num_inqueue[v] &gt;= n)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> from, to, cap;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ca);</span><br><span class="line">    <span class="keyword">while</span>(ca--)&#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;w);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;from, &amp;to, &amp;cap);</span><br><span class="line">            add(from, to, cap);</span><br><span class="line">            add(to, from, cap);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;from, &amp;to, &amp;cap);</span><br><span class="line">            add(from, to, -cap);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> ans = spfa(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ans)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>翻模板的时候发现了几年前写的时候用Bellman-Ford的版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, cap;</span><br><span class="line">&#125;edge[<span class="number">5040</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">520</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, w;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bellman_Ford</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[edge[j].v] &gt; dis[edge[j].u] + edge[j].cap)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                dis[edge[j].v] = dis[edge[j].u] + edge[j].cap;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>)   <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (i == n+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].u = u;</span><br><span class="line">    edge[cnt].v = v;</span><br><span class="line">    edge[cnt++].cap = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ca;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ca);</span><br><span class="line">    <span class="keyword">while</span>(ca--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;w);</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            add(a, b, c);</span><br><span class="line">            add(b, a, c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(w--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            add(a, b, -c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = Bellman_Ford();</span><br><span class="line">        <span class="keyword">if</span>(ans == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/21/poj3259/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1860 Currency Exchange（SPFA）</title>
      <link>https://www.ph0en1x.space/2018/09/20/poj1860/</link>
      <guid>https://www.ph0en1x.space/2018/09/20/poj1860/</guid>
      <pubDate>Wed, 19 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 判断是否存在&lt;code&gt;负环/正环&lt;/code&gt;的&lt;code&gt;最短路/最长路&lt;/code&gt;问题，把每种货币当作节点，兑换货币就是图上的有向边，使用SPFA查找是否会让起点进入一个正环就行了&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 判断是否存在<code>负环/正环</code>的<code>最短路/最长路</code>问题，把每种货币当作节点，兑换货币就是图上的有向边，使用SPFA查找是否会让起点进入一个正环就行了</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> rate[MAX][MAX];</span><br><span class="line"><span class="keyword">double</span> com[MAX][MAX];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">bool</span> isInqueue[MAX];</span><br><span class="line"><span class="keyword">double</span> dis[MAX];</span><br><span class="line"><span class="keyword">int</span> n, m, start;</span><br><span class="line"><span class="keyword">double</span> v;</span><br><span class="line"><span class="keyword">int</span> c1, c2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dis[start] = v;</span><br><span class="line">    q.push(start);</span><br><span class="line">    isInqueue[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        isInqueue[cur] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[i] &lt; (dis[cur] - com[cur][i])*rate[cur][i])&#123;</span><br><span class="line">                dis[i] = (dis[cur] - com[cur][i])*rate[cur][i];</span><br><span class="line">                <span class="keyword">if</span>(!isInqueue[i])&#123;</span><br><span class="line">                    q.push(i);</span><br><span class="line">                    isInqueue[i] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dis[start] &gt; v)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%lf"</span>, &amp;n, &amp;m, &amp;start, &amp;v))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(rate, <span class="number">0</span>, <span class="keyword">sizeof</span>(rate));</span><br><span class="line">        <span class="built_in">memset</span>(com, <span class="number">0</span>, <span class="keyword">sizeof</span>(com));</span><br><span class="line">        <span class="built_in">memset</span>(isInqueue, <span class="number">0</span>, <span class="keyword">sizeof</span>(isInqueue));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++)&#123;</span><br><span class="line">            dis[i] = -INF;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;c1, &amp;c2);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>, &amp;rate[c1][c2], &amp;com[c1][c2], &amp;rate[c2][c1], &amp;com[c2][c1]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> isIncrease = spfa();</span><br><span class="line">        <span class="keyword">if</span>(isIncrease)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/20/poj1860/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 2996 Help Me with the Game</title>
      <link>https://www.ph0en1x.space/2018/09/19/poj2996/</link>
      <guid>https://www.ph0en1x.space/2018/09/19/poj2996/</guid>
      <pubDate>Tue, 18 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 又是大模拟，注意黑白的迭代顺序不大一样，和poj2993相反的题目（2993不做了😂，单纯就是在各种操作字符串）&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 又是大模拟，注意黑白的迭代顺序不大一样，和poj2993相反的题目（2993不做了😂，单纯就是在各种操作字符串）</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; white[<span class="number">6</span>];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; black[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">char</span> tmp[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">char</span> board[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line">    <span class="built_in">memset</span>(board, <span class="number">0</span>, <span class="keyword">sizeof</span>(board));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">            board[i][j] = tmp[<span class="number">2</span>+j*<span class="number">4</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">'K'</span>)&#123;</span><br><span class="line">                <span class="built_in">string</span> pushStr = <span class="string">"Ka1"</span>;</span><br><span class="line">                pushStr[<span class="number">1</span>] = <span class="string">'a'</span> + j;</span><br><span class="line">                pushStr[<span class="number">2</span>] = <span class="string">'1'</span> + i;</span><br><span class="line">                white[<span class="number">0</span>].push_back(pushStr);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'Q'</span>)&#123;</span><br><span class="line">                <span class="built_in">string</span> pushStr = <span class="string">"Qa1"</span>;</span><br><span class="line">                pushStr[<span class="number">1</span>] = <span class="string">'a'</span> + j;</span><br><span class="line">                pushStr[<span class="number">2</span>] = <span class="string">'1'</span> + i;</span><br><span class="line">                white[<span class="number">1</span>].push_back(pushStr);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'R'</span>)&#123;</span><br><span class="line">                <span class="built_in">string</span> pushStr = <span class="string">"Ra1"</span>;</span><br><span class="line">                pushStr[<span class="number">1</span>] = <span class="string">'a'</span> + j;</span><br><span class="line">                pushStr[<span class="number">2</span>] = <span class="string">'1'</span> + i;</span><br><span class="line">                white[<span class="number">2</span>].push_back(pushStr);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'B'</span>)&#123;</span><br><span class="line">                <span class="built_in">string</span> pushStr = <span class="string">"Ba1"</span>;</span><br><span class="line">                pushStr[<span class="number">1</span>] = <span class="string">'a'</span> + j;</span><br><span class="line">                pushStr[<span class="number">2</span>] = <span class="string">'1'</span> + i;</span><br><span class="line">                white[<span class="number">3</span>].push_back(pushStr);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'N'</span>)&#123;</span><br><span class="line">                <span class="built_in">string</span> pushStr = <span class="string">"Na1"</span>;</span><br><span class="line">                pushStr[<span class="number">1</span>] = <span class="string">'a'</span> + j;</span><br><span class="line">                pushStr[<span class="number">2</span>] = <span class="string">'1'</span> + i;</span><br><span class="line">                white[<span class="number">4</span>].push_back(pushStr);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'P'</span>)&#123;</span><br><span class="line">                <span class="built_in">string</span> pushStr = <span class="string">"a1"</span>;</span><br><span class="line">                pushStr[<span class="number">0</span>] = <span class="string">'a'</span> + j;</span><br><span class="line">                pushStr[<span class="number">1</span>] = <span class="string">'1'</span> + i;</span><br><span class="line">                white[<span class="number">5</span>].push_back(pushStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">'k'</span>)&#123;</span><br><span class="line">                <span class="built_in">string</span> pushStr = <span class="string">"Ka1"</span>;</span><br><span class="line">                pushStr[<span class="number">1</span>] = <span class="string">'a'</span> + j;</span><br><span class="line">                pushStr[<span class="number">2</span>] = <span class="string">'1'</span> + i;</span><br><span class="line">                black[<span class="number">0</span>].push_back(pushStr);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'q'</span>)&#123;</span><br><span class="line">                <span class="built_in">string</span> pushStr = <span class="string">"Qa1"</span>;</span><br><span class="line">                pushStr[<span class="number">1</span>] = <span class="string">'a'</span> + j;</span><br><span class="line">                pushStr[<span class="number">2</span>] = <span class="string">'1'</span> + i;</span><br><span class="line">                black[<span class="number">1</span>].push_back(pushStr);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'r'</span>)&#123;</span><br><span class="line">                <span class="built_in">string</span> pushStr = <span class="string">"Ra1"</span>;</span><br><span class="line">                pushStr[<span class="number">1</span>] = <span class="string">'a'</span> + j;</span><br><span class="line">                pushStr[<span class="number">2</span>] = <span class="string">'1'</span> + i;</span><br><span class="line">                black[<span class="number">2</span>].push_back(pushStr);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'b'</span>)&#123;</span><br><span class="line">                <span class="built_in">string</span> pushStr = <span class="string">"Ba1"</span>;</span><br><span class="line">                pushStr[<span class="number">1</span>] = <span class="string">'a'</span> + j;</span><br><span class="line">                pushStr[<span class="number">2</span>] = <span class="string">'1'</span> + i;</span><br><span class="line">                black[<span class="number">3</span>].push_back(pushStr);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'n'</span>)&#123;</span><br><span class="line">                <span class="built_in">string</span> pushStr = <span class="string">"Na1"</span>;</span><br><span class="line">                pushStr[<span class="number">1</span>] = <span class="string">'a'</span> + j;</span><br><span class="line">                pushStr[<span class="number">2</span>] = <span class="string">'1'</span> + i;</span><br><span class="line">                black[<span class="number">4</span>].push_back(pushStr);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'p'</span>)&#123;</span><br><span class="line">                <span class="built_in">string</span> pushStr = <span class="string">"a1"</span>;</span><br><span class="line">                pushStr[<span class="number">0</span>] = <span class="string">'a'</span> + j;</span><br><span class="line">                pushStr[<span class="number">1</span>] = <span class="string">'1'</span> + i;</span><br><span class="line">                black[<span class="number">5</span>].push_back(pushStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"White:"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; white[i].size(); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">","</span>);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; white[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nBlack:"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; black[i].size(); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">","</span>);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; black[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/19/poj2996/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1573 Robot Motion</title>
      <link>https://www.ph0en1x.space/2018/09/18/poj1573/</link>
      <guid>https://www.ph0en1x.space/2018/09/18/poj1573/</guid>
      <pubDate>Mon, 17 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 大模拟，就酱&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 大模拟，就酱</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line"><span class="keyword">int</span> flags[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, start;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;start) &amp;&amp; n != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(flags, <span class="number">-1</span>, <span class="keyword">sizeof</span>(flags));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;arr[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> y = start;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= m)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(flags[x][y] != <span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d step(s) before a loop of %d step(s)\n"</span>, flags[x][y], cnt-flags[x][y]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                flags[x][y] = cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[x][y] == <span class="string">'W'</span>)</span><br><span class="line">                y-=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[x][y] == <span class="string">'E'</span>)</span><br><span class="line">                y+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[x][y] == <span class="string">'N'</span>)</span><br><span class="line">                x-=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[x][y] == <span class="string">'S'</span>)</span><br><span class="line">                x+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!(x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= m))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d step(s) to exit\n"</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/18/poj1573/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 2632 Crashing Robots</title>
      <link>https://www.ph0en1x.space/2018/09/16/poj2632/</link>
      <guid>https://www.ph0en1x.space/2018/09/16/poj2632/</guid>
      <pubDate>Sat, 15 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  模拟机器人走的序列，用一个数组标记当前每个位置是否有机器人以及机器人的编号就行&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  模拟机器人走的序列，用一个数组标记当前每个位置是否有机器人以及机器人的编号就行</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">robot</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> dir;</span><br><span class="line">&#125;robots[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ca;</span><br><span class="line">    <span class="keyword">int</span> num, step;</span><br><span class="line">    <span class="keyword">int</span> A, B, N, M;</span><br><span class="line">    <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ca);</span><br><span class="line">    <span class="keyword">while</span>(ca--)&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;A, &amp;B, &amp;N, &amp;M);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;robots[i].x, &amp;robots[i].y);</span><br><span class="line">            arr[robots[i].x][robots[i].y] = i;</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;tmp);</span><br><span class="line">            <span class="keyword">if</span>(tmp == <span class="string">'W'</span>)</span><br><span class="line">                robots[i].dir = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tmp == <span class="string">'N'</span>)</span><br><span class="line">                robots[i].dir = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tmp == <span class="string">'E'</span>)</span><br><span class="line">                robots[i].dir = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tmp == <span class="string">'S'</span>)</span><br><span class="line">                robots[i].dir = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;tmp);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;step);</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="literal">false</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(tmp == <span class="string">'F'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(robots[num].dir == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= step &amp;&amp; robots[num].x-j &gt; <span class="number">0</span>; j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(arr[robots[num].x - j][robots[num].y] != <span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Robot %d crashes into robot %d\n"</span>, num, arr[robots[num].x-j][robots[num].y]);</span><br><span class="line">                            flag = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(flag == <span class="literal">false</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(robots[num].x-step &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        arr[robots[num].x][robots[num].y] = <span class="number">0</span>;</span><br><span class="line">                        robots[num].x -= step;</span><br><span class="line">                        arr[robots[num].x][robots[num].y] = num;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Robot %d crashes into the wall\n"</span>, num);</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(robots[num].dir == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= step &amp;&amp; robots[num].y+j &lt;= B; j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(arr[robots[num].x][robots[num].y+j] != <span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Robot %d crashes into robot %d\n"</span>, num, arr[robots[num].x][robots[num].y+j]);</span><br><span class="line">                            flag = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(flag == <span class="literal">false</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(robots[num].y+step &lt;= B)&#123;</span><br><span class="line">                        arr[robots[num].x][robots[num].y] = <span class="number">0</span>;</span><br><span class="line">                        robots[num].y += step;</span><br><span class="line">                        arr[robots[num].x][robots[num].y] = num;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Robot %d crashes into the wall\n"</span>, num);</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(robots[num].dir == <span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= step &amp;&amp; robots[num].x+j &lt;= A; j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(arr[robots[num].x + j][robots[num].y] != <span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Robot %d crashes into robot %d\n"</span>, num, arr[robots[num].x+j][robots[num].y]);</span><br><span class="line">                            flag = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(flag == <span class="literal">false</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(robots[num].x+step &lt;= A)&#123;</span><br><span class="line">                        arr[robots[num].x][robots[num].y] = <span class="number">0</span>;</span><br><span class="line">                        robots[num].x += step;</span><br><span class="line">                        arr[robots[num].x][robots[num].y] = num;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Robot %d crashes into the wall\n"</span>, num);</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(robots[num].dir == <span class="number">3</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= step &amp;&amp; robots[num].y-j &gt; <span class="number">0</span>; j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(arr[robots[num].x][robots[num].y-j] != <span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Robot %d crashes into robot %d\n"</span>, num, arr[robots[num].x][robots[num].y-j]);</span><br><span class="line">                            flag = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(flag == <span class="literal">false</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(robots[num].y-step &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        arr[robots[num].x][robots[num].y] = <span class="number">0</span>;</span><br><span class="line">                        robots[num].y -= step;</span><br><span class="line">                        arr[robots[num].x][robots[num].y] = num;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Robot %d crashes into the wall\n"</span>, num);</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp == <span class="string">'L'</span>)&#123;</span><br><span class="line">                robots[num].dir = (robots[num].dir - (step%<span class="number">4</span>) + <span class="number">4</span>) % <span class="number">4</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp == <span class="string">'R'</span>)&#123;</span><br><span class="line">                robots[num].dir = (robots[num].dir + (step%<span class="number">4</span>) + <span class="number">4</span>) % <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">true</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/16/poj2632/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 3295 Tautology</title>
      <link>https://www.ph0en1x.space/2018/09/15/poj3295/</link>
      <guid>https://www.ph0en1x.space/2018/09/15/poj3295/</guid>
      <pubDate>Fri, 14 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  求一个式子是否是重言式，符号在前，直接构造一个栈来枚举并求出式子是否都为真&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  求一个式子是否是重言式，符号在前，直接构造一个栈来枚举并求出式子是否都为真</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">char</span>* wff, <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> st[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(wff);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(wff[i] == <span class="string">'p'</span>)&#123;</span><br><span class="line">            st[top++] = ((<span class="number">1</span>&amp;num) == <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(wff[i] == <span class="string">'q'</span>)&#123;</span><br><span class="line">            st[top++] = (((<span class="number">1</span>&lt;&lt;<span class="number">1</span>)&amp;num) == (<span class="number">1</span>&lt;&lt;<span class="number">1</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(wff[i] == <span class="string">'r'</span>)&#123;</span><br><span class="line">            st[top++] = (((<span class="number">1</span>&lt;&lt;<span class="number">2</span>)&amp;num) == (<span class="number">1</span>&lt;&lt;<span class="number">2</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(wff[i] == <span class="string">'s'</span>)&#123;</span><br><span class="line">            st[top++] = (((<span class="number">1</span>&lt;&lt;<span class="number">3</span>)&amp;num) == (<span class="number">1</span>&lt;&lt;<span class="number">3</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(wff[i] == <span class="string">'t'</span>)&#123;</span><br><span class="line">            st[top++] = (((<span class="number">1</span>&lt;&lt;<span class="number">4</span>)&amp;num) == (<span class="number">1</span>&lt;&lt;<span class="number">4</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(wff[i] == <span class="string">'K'</span>)&#123;</span><br><span class="line">            st[top<span class="number">-2</span>] = (st[top<span class="number">-1</span>] &amp;&amp; st[top<span class="number">-2</span>]);</span><br><span class="line">            top--;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(wff[i] == <span class="string">'A'</span>)&#123;</span><br><span class="line">            st[top<span class="number">-2</span>] = (st[top<span class="number">-1</span>] || st[top<span class="number">-2</span>]);</span><br><span class="line">            top--;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(wff[i] == <span class="string">'C'</span>)&#123;</span><br><span class="line">            st[top<span class="number">-2</span>] = ((!st[top<span class="number">-2</span>]) || st[top<span class="number">-1</span>]);</span><br><span class="line">            top--;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(wff[i] == <span class="string">'E'</span>)&#123;</span><br><span class="line">            st[top<span class="number">-2</span>] = (st[top<span class="number">-1</span>] == st[top<span class="number">-2</span>]);</span><br><span class="line">            top--;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(wff[i] == <span class="string">'N'</span>)&#123;</span><br><span class="line">            st[top<span class="number">-1</span>] = !st[top<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> st[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> wff[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, wff) &amp;&amp; <span class="built_in">strcmp</span>(wff, <span class="string">"0"</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span>&lt;&lt;<span class="number">5</span>); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(valid(wff, i) == <span class="literal">false</span>)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"tautology\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"not\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/15/poj3295/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1068 Parencodings</title>
      <link>https://www.ph0en1x.space/2018/09/15/poj1068/</link>
      <guid>https://www.ph0en1x.space/2018/09/15/poj1068/</guid>
      <pubDate>Fri, 14 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  &lt;a href=&quot;http://poj.org/problem?id=1068&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  给定括号串的两种编码，第一种是显示每个右括号左边有多少个左括号，第二种显示每个右括号与其匹配的左括号间有多少个右括号（包括自己），给出第一种编码，求第二种编码&lt;/p&gt;
&lt;p&gt;  可以直接模拟，算出原括号串然后去数出第二种编码，也可以定位与右括号匹配的左括号在哪个右括号分割出的区间内，即给出的第一种编码两个数之间是两个相邻右括号之间的左括号数，找的时候就从左边相邻的右括号开始枚举，每次加一个右括号数&lt;code&gt;num_right&lt;/code&gt;同时加上中间相应的左括号数&lt;code&gt;num_left&lt;/code&gt;直到&lt;code&gt;num_left &amp;gt; num_right&lt;/code&gt;为止&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  <a href="http://poj.org/problem?id=1068" target="_blank" rel="noopener"></a></p><p>  给定括号串的两种编码，第一种是显示每个右括号左边有多少个左括号，第二种显示每个右括号与其匹配的左括号间有多少个右括号（包括自己），给出第一种编码，求第二种编码</p><p>  可以直接模拟，算出原括号串然后去数出第二种编码，也可以定位与右括号匹配的左括号在哪个右括号分割出的区间内，即给出的第一种编码两个数之间是两个相邻右括号之间的左括号数，找的时候就从左边相邻的右括号开始枚举，每次加一个右括号数<code>num_right</code>同时加上中间相应的左括号数<code>num_left</code>直到<code>num_left &gt; num_right</code>为止</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ca;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> diff[<span class="number">25</span>];</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">25</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ca);</span><br><span class="line">    <span class="keyword">while</span>(ca--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(diff, <span class="number">0</span>, <span class="keyword">sizeof</span>(diff));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">            diff[i] = arr[i] - arr[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="comment">/*number of right parentheses between (j-1)th and (i)th right parentheses, including (i)th*/</span></span><br><span class="line">            <span class="keyword">int</span> num_right = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">/*number of left parentheses between (j-1)th and (i)th right parentheses*/</span></span><br><span class="line">            <span class="keyword">int</span> num_left = diff[j];</span><br><span class="line">            <span class="keyword">while</span>(num_right &gt; num_left)&#123;</span><br><span class="line">                num_right += <span class="number">1</span>;</span><br><span class="line">                j--;</span><br><span class="line">                num_left += diff[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, num_right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/15/poj1068/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 2586 Y2K Accounting Bug</title>
      <link>https://www.ph0en1x.space/2018/09/14/poj2586/</link>
      <guid>https://www.ph0en1x.space/2018/09/14/poj2586/</guid>
      <pubDate>Thu, 13 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  给出盈利和亏损的固定值，任意连续五个月都是亏损的，问最大能够盈利多少。&lt;/p&gt;
&lt;p&gt;  先求出5个月中能够最小化亏损的组合然后依次循环，排列中应尽量将盈利月排在前面，这样最后两个月才能最大化盈利。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  给出盈利和亏损的固定值，任意连续五个月都是亏损的，问最大能够盈利多少。</p><p>  先求出5个月中能够最小化亏损的组合然后依次循环，排列中应尽量将盈利月排在前面，这样最后两个月才能最大化盈利。</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s, d;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;d))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s*<span class="number">4</span> &lt; d)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">10</span>*s &gt; <span class="number">2</span>*d)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">10</span>*s - <span class="number">2</span>*d);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Deficit\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s*<span class="number">3</span> &lt; d*<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">8</span>*s &gt; <span class="number">4</span>*d)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">8</span>*s - <span class="number">4</span>*d);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Deficit\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s*<span class="number">2</span> &lt; d*<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">6</span>*s &gt; <span class="number">6</span>*d)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">6</span>*s - <span class="number">6</span>*d);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Deficit\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s &lt; d*<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">3</span>*s &gt; <span class="number">9</span>*d)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">3</span>*s - <span class="number">9</span>*d);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Deficit\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Deficit\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/14/poj2586/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 2109 Power of Cryptography</title>
      <link>https://www.ph0en1x.space/2018/09/13/poj2109/</link>
      <guid>https://www.ph0en1x.space/2018/09/13/poj2109/</guid>
      <pubDate>Wed, 12 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  给两个数n, p，求k使得k的n次方等于p。理论上应该使用大数来保证精度，但是这题用C++编译器的情况下直接pow也是可以的。大数的代码今后有时间调试好后补上。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  给两个数n, p，求k使得k的n次方等于p。理论上应该使用大数来保证精度，但是这题用C++编译器的情况下直接pow也是可以的。大数的代码今后有时间调试好后补上。</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Only C++ compiler can Accepted*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> n, p;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;n, &amp;p))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.0lf\n"</span>, <span class="built_in">pow</span>(p, <span class="number">1</span>/n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/13/poj2109/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1328 Radar Installation</title>
      <link>https://www.ph0en1x.space/2018/09/12/poj1328/</link>
      <guid>https://www.ph0en1x.space/2018/09/12/poj1328/</guid>
      <pubDate>Tue, 11 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; &lt;a href=&quot;http://poj.org/problem?id=1328&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 预处理出每个岛所能容许的雷达范围，按照右端点排序，每次都新放置一个在新线段的右边，然后往后找哪个的左端点够不着了，再放在这个线段的右端点，以此类推&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> <a href="http://poj.org/problem?id=1328" target="_blank" rel="noopener"></a></p><p> 预处理出每个岛所能容许的雷达范围，按照右端点排序，每次都新放置一个在新线段的右边，然后往后找哪个的左端点够不着了，再放在这个线段的右端点，以此类推</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">land</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> l;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> land&amp; b) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(r == b.r)&#123;</span><br><span class="line">            <span class="keyword">return</span> l &lt; b.l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r &lt; b.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;lands[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, d;</span><br><span class="line">    <span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;d) &amp;&amp; n != <span class="number">0</span>)&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;lands[i].y);</span><br><span class="line">            <span class="keyword">if</span>(lands[i].y &gt; d || lands[i].y &lt; <span class="number">0</span>)</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            lands[i].l = x - <span class="built_in">sqrt</span>(d*d - lands[i].y*lands[i].y);</span><br><span class="line">            lands[i].r = x + <span class="built_in">sqrt</span>(d*d - lands[i].y*lands[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, cas++, <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(lands, lands+n);</span><br><span class="line">        <span class="keyword">double</span> cur = lands[<span class="number">0</span>].r;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(lands[i].l &gt; cur)&#123;</span><br><span class="line">                cur = lands[i].r;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, cas++, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/12/poj1328/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 2965 The Pilots Brothers&#39; refrigerator</title>
      <link>https://www.ph0en1x.space/2018/09/11/poj2965/</link>
      <guid>https://www.ph0en1x.space/2018/09/11/poj2965/</guid>
      <pubDate>Mon, 10 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 七灯问题变形，一共有16个开关，递归枚举变动的个数&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 七灯问题变形，一共有16个开关，递归枚举变动的个数</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSame</span><span class="params">(<span class="keyword">int</span>* pan)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pan[i] != <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span>* pan, <span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = pos / <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> y = pos % <span class="number">4</span>;</span><br><span class="line">    pan[pos] = !(pan[pos]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">        pan[<span class="number">4</span>*x + i] = !(pan[<span class="number">4</span>*x + i]);</span><br><span class="line">        pan[<span class="number">4</span>*i + y] = !(pan[<span class="number">4</span>*i + y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>* pan, <span class="keyword">int</span> cur, <span class="keyword">int</span>* ans, <span class="keyword">int</span> curPos, <span class="keyword">int</span>* result, <span class="keyword">int</span>* tmpResult)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isSame(pan))&#123;</span><br><span class="line">        *ans = min((<span class="keyword">int</span>)(*ans), cur);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)(*ans); i++)</span><br><span class="line">            result[i] = tmpResult[i];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(curPos == <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    dfs(pan, cur, ans, curPos+<span class="number">1</span>, result, tmpResult);</span><br><span class="line">    flip(pan, curPos);</span><br><span class="line">    tmpResult[cur] = curPos;</span><br><span class="line">    dfs(pan, cur+<span class="number">1</span>, ans, curPos+<span class="number">1</span>, result, tmpResult);</span><br><span class="line">    flip(pan, curPos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pan[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">char</span> row[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> result[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">int</span> tmpResult[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, row);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(row[j] == <span class="string">'+'</span>)</span><br><span class="line">                pan[pos++] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pan[pos++] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">20</span>;</span><br><span class="line">    dfs(pan, <span class="number">0</span>, &amp;ans, <span class="number">0</span>, result, tmpResult);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ans; j++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, result[j]/<span class="number">4</span> + <span class="number">1</span>, result[j]%<span class="number">4</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/11/poj2965/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ 1753 Flip Game</title>
      <link>https://www.ph0en1x.space/2018/09/10/poj1753/</link>
      <guid>https://www.ph0en1x.space/2018/09/10/poj1753/</guid>
      <pubDate>Sun, 09 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;  太久不练实在是手生啊，干脆从POJ的分类题目开始重新训练。虽然研究僧时间还是蛮紧的，但是还是要抽点时间出来啊！！！😂&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;http://poj.org/problem?id=1753&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  七灯问题变形，一共有16个开关，递归枚举变动的个数&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>  太久不练实在是手生啊，干脆从POJ的分类题目开始重新训练。虽然研究僧时间还是蛮紧的，但是还是要抽点时间出来啊！！！😂</p><p>  <a href="http://poj.org/problem?id=1753" target="_blank" rel="noopener"></a></p><p>  七灯问题变形，一共有16个开关，递归枚举变动的个数</p></blockquote><a id="more"></a><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSame</span><span class="params">(<span class="keyword">int</span>* pan)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">16</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pan[i] != pan[i<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span>* pan, <span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = pos / <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> y = pos % <span class="number">4</span>;</span><br><span class="line">    pan[pos] = !(pan[pos]);</span><br><span class="line">    <span class="keyword">if</span>(y &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        pan[pos+<span class="number">1</span>] = !(pan[pos+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        pan[pos<span class="number">-1</span>] = !(pan[pos<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        pan[pos + <span class="number">4</span>] = !(pan[pos + <span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        pan[pos - <span class="number">4</span>] = !(pan[pos - <span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>* pan, <span class="keyword">int</span> cur, <span class="keyword">int</span> len, <span class="keyword">int</span> curPos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur == len)</span><br><span class="line">        <span class="keyword">if</span>(isSame(pan))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">16</span> - curPos &lt; len - cur)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span>* new_pan = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = curPos; i &lt; <span class="number">16</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)&#123;</span><br><span class="line">            new_pan[j] = pan[j];</span><br><span class="line">        &#125;</span><br><span class="line">        flip(new_pan, i);</span><br><span class="line">        <span class="keyword">if</span>(dfs(new_pan, cur+<span class="number">1</span>, len, i+<span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pan[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">char</span> row[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, row);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(row[j] == <span class="string">'b'</span>)</span><br><span class="line">                pan[pos++] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pan[pos++] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isSame(pan))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">16</span>; i++)&#123;</span><br><span class="line">            <span class="comment">/*number of flipped*/</span></span><br><span class="line">            <span class="keyword">if</span>(dfs(pan, <span class="number">0</span>, i, <span class="number">0</span>))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">17</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/10/poj1753/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在Spring Boot框架内使用Shiro与Mybatis完成用户登录</title>
      <link>https://www.ph0en1x.space/2018/09/09/springboot_shiro/</link>
      <guid>https://www.ph0en1x.space/2018/09/09/springboot_shiro/</guid>
      <pubDate>Sat, 08 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;在采用Spring Boot框架的Web应用内使用Shiro与Mybatis完成用户的登录的验证&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>在采用Spring Boot框架的Web应用内使用Shiro与Mybatis完成用户的登录的验证</p></blockquote><a id="more"></a><p>前面的笔记已经说到了如何<a href="https://www.ph0en1x.space/2018/03/18/spring_boot/">创建一个Spring Boot项目</a>并<a href="https://www.ph0en1x.space/2018/09/03/springboot_mybatis/">在Spring Boot框架内使用Mybatis</a>，接下来就要在现有的基础上结合<a href="https://www.ph0en1x.space/2018/09/02/shiro/">Shiro框架</a>来实现一个简单的用户登录功能了</p><ol><li><p>首先需要创建需要的数据表，这里我们一共需要创建5张表，分别是：</p><ul><li>user（用户表）</li><li>role（角色表）</li><li>permission（权限表）</li><li>user_role（用户-角色映射表）</li><li>role_permission（角色-权限映射表）</li></ul><p>采用的是用户与角色关联，然后再给不同角色分配权限的模式，具体表格式如下所示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">role</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> permission(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_role(</span><br><span class="line">    user_id <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">    role_id <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">    foreign <span class="keyword">key</span>(user_id) <span class="keyword">references</span> <span class="keyword">user</span>(<span class="keyword">id</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>,</span><br><span class="line">    foreign <span class="keyword">key</span>(role_id) <span class="keyword">references</span> <span class="keyword">role</span>(<span class="keyword">id</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> role_permission(</span><br><span class="line">    role_id <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">    permission_id <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">    foreign <span class="keyword">key</span>(role_id) <span class="keyword">references</span> <span class="keyword">role</span>(<span class="keyword">id</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>,</span><br><span class="line">    foreign <span class="keyword">key</span>(permission_id) <span class="keyword">references</span> permission(<span class="keyword">id</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>为了作为模板示范，添加两种角色<code>user</code>与<code>admin</code></p><p>为<code>user</code>添加<code>read</code>权限，为<code>admin</code>同时添加<code>read</code>与<code>write</code>权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">role</span>(<span class="keyword">name</span>) <span class="keyword">value</span>(<span class="string">'user'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">role</span>(<span class="keyword">name</span>) <span class="keyword">value</span>(<span class="string">'admin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> permission(<span class="keyword">name</span>) <span class="keyword">value</span>(<span class="string">'read'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> permission(<span class="keyword">name</span>) <span class="keyword">value</span>(<span class="string">'write'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> role_permission(role_id, permission_id) <span class="keyword">value</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> role_permission(role_id, permission_id) <span class="keyword">value</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> role_permission(role_id, permission_id) <span class="keyword">value</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>然后就要参照每一张表创建MyBatis实例和映射文件，创建方法参考<a href="https://www.ph0en1x.space/2018/09/03/springboot_mybatis/">在Spring Boot框架内使用Mybatis</a></p></li><li><p>紧接着就是配置Shiro，最重要的就是一个配置文件和一个Realm，这两个文件是shiro工作的核心</p><p>首先是配置文件，主要负责Shiro的主体设置、Realm设置，加密设置，这在之前<a href="https://www.ph0en1x.space/2018/09/02/shiro/">Shiro框架</a>中已经提到过。最重要的，Shiro与Spring Boot Web框架整合，还需要设置过滤器，即让Shiro收到网页请求后逐个检查改请求访问的页面或方法是否需要身份验证，需要什么身份或权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.phoenix.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.ehcache.EhCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.LifecycleBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.filter.authc.LogoutFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负责org.apache.shiro.util.Initializable类型bean的生命周期的，初始化和销毁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"lifecycleBeanPostProcessor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"hashCredentialsMatcher"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">hashedCredentialsMatcher</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(<span class="string">"MD5"</span>);</span><br><span class="line">        credentialsMatcher.setHashIterations(<span class="number">1</span>);</span><br><span class="line">        credentialsMatcher.setStoredCredentialsHexEncoded(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> credentialsMatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"myRealm"</span>)</span><br><span class="line">    <span class="meta">@DependsOn</span>(<span class="string">"lifecycleBeanPostProcessor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyRealm <span class="title">myRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyRealm realm = <span class="keyword">new</span> MyRealm();</span><br><span class="line">        realm.setCredentialsMatcher(hashedCredentialsMatcher());</span><br><span class="line">        <span class="keyword">return</span> realm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"ehCacheManager"</span>)</span><br><span class="line">    <span class="meta">@DependsOn</span>(<span class="string">"lifecycleBeanPostProcessor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EhCacheManager <span class="title">ehCacheManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EhCacheManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"securityManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(myRealm());</span><br><span class="line"><span class="comment">//        add later</span></span><br><span class="line"><span class="comment">//        securityManager.setCacheManager(ehCacheManager());</span></span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"shiroFilter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Filter&gt; filters = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        LogoutFilter logoutFilter = <span class="keyword">new</span> LogoutFilter();</span><br><span class="line">        logoutFilter.setRedirectUrl(<span class="string">"/login"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilters(filters);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; filterChainDefinitionManger = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//logout直接加载logout</span></span><br><span class="line">        filterChainDefinitionManger.put(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line">        <span class="comment">//访问index下url需要authentication</span></span><br><span class="line">        filterChainDefinitionManger.put(<span class="string">"/index"</span>, <span class="string">"authc, perms[read]"</span>);</span><br><span class="line">        filterChainDefinitionManger.put(<span class="string">"/admin"</span>, <span class="string">"authc, perms[write]"</span>);</span><br><span class="line">        filterChainDefinitionManger.put(<span class="string">"/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionManger);</span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">"/index"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/403"</span>);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>shiroFilterFactoryBean()</code>中设置了<code>/index</code>页面和<code>/admin</code>页面需要身份验证<code>authc</code>，也就是登录状态，否则就会跳转到。同时<code>/index</code>需要用户具有<code>read</code>权限而<code>/admin</code>需要有<code>read</code>和<code>write</code>权限，如不具有相应权限则会跳转到错误页面。</p></li></ol><p>   对于Realm设置如下：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.phoenix.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.phoenix.bean.Permission;</span><br><span class="line"><span class="keyword">import</span> org.phoenix.bean.Role_Permission;</span><br><span class="line"><span class="keyword">import</span> org.phoenix.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.phoenix.bean.User_Role;</span><br><span class="line"><span class="keyword">import</span> org.phoenix.dao.PermissionDao;</span><br><span class="line"><span class="keyword">import</span> org.phoenix.dao.RoleDao;</span><br><span class="line"><span class="keyword">import</span> org.phoenix.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleDao roleDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionDao permissionDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        SimpleAuthorizationInfo authorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        String username = (String)principalCollection.getPrimaryPrincipal();</span><br><span class="line">        User user = userDao.getByUserName(username);</span><br><span class="line">        <span class="keyword">for</span>(User_Role user_role : userDao.getRoles(user.getId()))&#123;</span><br><span class="line">            <span class="keyword">for</span>(Role_Permission role_permission: roleDao.getPermissions(user_role.getRoleId()))&#123;</span><br><span class="line">                Permission permission = permissionDao.getById(role_permission.getPermissionId());</span><br><span class="line">                authorizationInfo.addStringPermission(permission.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        String userName = token.getUsername();</span><br><span class="line"></span><br><span class="line">        User user = userDao.getByUserName(userName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Session session = SecurityUtils.getSubject().getSession();</span><br><span class="line">            session.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">            SimpleAuthenticationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(userName, user.getPassword(), getName());</span><br><span class="line">            authenticationInfo.setCredentialsSalt(ByteSource.Util.bytes(userName));</span><br><span class="line">            <span class="keyword">return</span> authenticationInfo;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   Realm进行身份验证的时候需要创建一个该用户的会话（这一点与单独的Shiro框架不同）</p><p>   进行身份授权的时候首先要查询用户的Role，然后再根据Role查询相应的Permission加入AuthorizationInfo中返回</p><ol start="4"><li><p>注册两个用户，然后分别赋予<code>user</code>角色和<code>admin</code>角色</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_role <span class="keyword">value</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_role <span class="keyword">value</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>系统效果</p><p>登录界面</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/spring_boot/login.png" alt="login"></p><p>首先以user身份进行登录进入<code>/index</code></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/spring_boot/index.png" alt="index"></p><p>点击<code>试试管理员权限</code>，发现并不能进入<code>/admin</code>页面，而是跳转到了<code>/403</code>页面</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/spring_boot/403.png" alt="403"></p><p>返回选择<code>登出</code>重新以管理员身份登录，然后再<code>试试管理员权限</code>，成功进入</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/spring_boot/admin.png" alt="admin"></p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/09/springboot_shiro/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ubuntu 18.04中安装MySQL以及普通用户无法登录问题</title>
      <link>https://www.ph0en1x.space/2018/09/06/ubuntu_mysql/</link>
      <guid>https://www.ph0en1x.space/2018/09/06/ubuntu_mysql/</guid>
      <pubDate>Wed, 05 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 在ubuntu 18.04下安装/升级MySQL数据库并解决安装后普通用户无法登录MySQL，必须使用sudo才能够登录的问题。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 在ubuntu 18.04下安装/升级MySQL数据库并解决安装后普通用户无法登录MySQL，必须使用sudo才能够登录的问题。</p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>删除旧版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt --purge remove mysql-server mysql-common mysql-client</span><br></pre></td></tr></table></figure><p>安装新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server mysql-common mysql-client</span><br></pre></td></tr></table></figure><p>这时候登录mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>输入密码后无法登录，出现Error，但是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p>却能够正常登录的话，那么就按照下面的步骤修改root密码</p><h2 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; select User, plugin from user;</span><br></pre></td></tr></table></figure><p>发现root用户的plugin不太一样，重建一个root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop user <span class="string">'root'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">Query OK, 0 rows affected (0,00 sec)</span><br><span class="line">mysql&gt; create user <span class="string">'root'</span>@<span class="string">'localhost'</span> identified by <span class="string">'new_password'</span></span><br><span class="line">Query OK, 0 rows affected (0,00 sec)</span><br></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">'localhost'</span> with grant option;</span><br><span class="line">Query OK, 0 rows affected (0,00 sec)</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0,00 sec)</span><br></pre></td></tr></table></figure><p>再次输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>应该就可以正常登录了</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/06/ubuntu_mysql/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在Spring Boot框架内使用Mybatis</title>
      <link>https://www.ph0en1x.space/2018/09/03/springboot_mybatis/</link>
      <guid>https://www.ph0en1x.space/2018/09/03/springboot_mybatis/</guid>
      <pubDate>Sun, 02 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;Mybatis是一个基于Java的持久层框架，帮助将SQL数据可以中的实体映射到Java实例中，方便增删改查的实现。本篇笔记记录如何将Mybatis与Spring Boot框架相结合进行使用&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Mybatis是一个基于Java的持久层框架，帮助将SQL数据可以中的实体映射到Java实例中，方便增删改查的实现。本篇笔记记录如何将Mybatis与Spring Boot框架相结合进行使用</p></blockquote><a id="more"></a><p>首先需要创建一个<a href="https://www.ph0en1x.space/2018/03/18/spring_boot/">Spring Boot项目</a> 然后以用户（User）为例来使用Mybatis</p><ol><li><p>Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.2.7<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.phoenix.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不返回password</span></span><br><span class="line"><span class="comment">//    @JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"UserDao&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + uid +</span><br><span class="line">                <span class="string">", username="</span> + username +</span><br><span class="line">                <span class="string">", password="</span> + password +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>DAO（Data Access Object）层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.phoenix.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.phoenix.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getByMap</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">getById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function">Integer <span class="title">create</span><span class="params">(User user)</span> <span class="keyword">throws</span> DataAccessException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">getByUserName</span><span class="params">(String userNmae)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>Service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.phoenix.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.phoenix.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.phoenix.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getByMap</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.getByMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">create</span><span class="params">(User user)</span><span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">        userDao.create(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">update</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        userDao.update(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getByUserName</span><span class="params">(String userName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.getByUserName(userName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>UserDaoMapper，连接了Dao层与Mapper，就是Mybatis工作的地方，这里面用XML语法编写了所有操作要用到的SQL语句，并与DAO层内的接口一一对应，当调用DAO层内接口的时候，就会完成对数据库的操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.phoenix.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"org.phoenix.bean.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"queryCondition"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"uid != null and uid != ''"</span>&gt;</span></span><br><span class="line">                and uid = #&#123;uid&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null and username != ''"</span>&gt;</span></span><br><span class="line">                and username = #&#123;username&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null and password != ''"</span>&gt;</span></span><br><span class="line">                and password = #&#123;password&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"keywords != null and keywords != ''"</span>&gt;</span></span><br><span class="line">                and username like CONCAT('%', #&#123;keywords&#125;,'%')</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getByMap"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"queryCondition"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE uid =#&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getByUserName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE username =#&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"create"</span> <span class="attr">parameterType</span>=<span class="string">"org.phoenix.bean.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;selectKey resultType="int"  order="AFTER" keyProperty="id" &gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SELECT LAST_INSERT_ID()--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/selectKey&gt;--&gt;</span></span><br><span class="line">        INSERT INTO user(</span><br><span class="line">        username,</span><br><span class="line">        password</span><br><span class="line">        )VALUES(</span><br><span class="line">        #&#123;username&#125;,</span><br><span class="line">        #&#123;password&#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"org.phoenix.bean.User"</span>&gt;</span></span><br><span class="line">        UPDATE user SET</span><br><span class="line">        username = #&#123;username&#125;,</span><br><span class="line">        password = #&#123;password&#125;</span><br><span class="line">        WHERE uid = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        DELETE FROM user WHERE uid = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>接下来就是要配置Mybatis，让它知道要在哪里找Dao层，哪里找Mapper，用什么数据库，数据库地址是什么，用户密码是什么，在用哪个database等等</p><p>配置数据连接，提供数据库连接的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.phoenix.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置数据库连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComboPooledDataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException</span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(env.getProperty(<span class="string">"jdbc.driverClassName"</span>));</span><br><span class="line">        dataSource.setJdbcUrl(env.getProperty(<span class="string">"jdbc.url"</span>));</span><br><span class="line">        dataSource.setUser(env.getProperty(<span class="string">"jdbc.username"</span>));</span><br><span class="line">        dataSource.setPassword(env.getProperty(<span class="string">"jdbc.password"</span>));</span><br><span class="line">        dataSource.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">        dataSource.setMinPoolSize(<span class="number">5</span>);</span><br><span class="line">        dataSource.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line">        dataSource.setMaxIdleTime(<span class="number">300</span>);</span><br><span class="line">        dataSource.setAcquireIncrement(<span class="number">5</span>);</span><br><span class="line">        dataSource.setIdleConnectionTestPeriod(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后需要提供DAO层所在的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.phoenix.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扫描DAO文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperSacnnerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperSacnnerConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"**.dao"</span>);</span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory"</span>);</span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用上面的信息来设置MyBatis，并告诉Mybatis映射文件Mapper的位置，MyBatis就会自动将UserDao自动对应到同前缀文件UserDaoMapper.xml上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.phoenix.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置Mybatis映射文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ApplicationContext applicationContext)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"> </span><br><span class="line">        SqlSessionFactoryBean sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sessionFactory.setDataSource(dataSource);</span><br><span class="line"> </span><br><span class="line">        org.apache.ibatis.session.Configuration configuration = <span class="keyword">new</span> org.apache.ibatis.session.Configuration();</span><br><span class="line">        configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">        configuration.setJdbcTypeForNull(JdbcType.NULL);</span><br><span class="line">        sessionFactory.setMapperLocations(applicationContext.getResources(<span class="string">"classpath:mapper/*.xml"</span>));</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> sessionFactory;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>最后配置Spring Boot的REST接口来通过UserService调用UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.phoenix.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.phoenix.Service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.phoenix.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/users"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getByMap(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">detail</span><span class="params">(@PathVariable Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>启动应用，在浏览器地址栏内输入<a href="http://localhost:8080/users" target="_blank" rel="noopener">http://localhost:8080/users</a> 就会出现预先在数据库里存号的用户信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">"username"</span>:<span class="string">"123"</span>,<span class="attr">"password"</span>:<span class="string">"af17a6d2be6676b4cf53b3ae81796fa6"</span>,<span class="attr">"id"</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">"username"</span>:<span class="string">"admin"</span>,<span class="attr">"password"</span>:<span class="string">"c0e024d9200b5705bc4804722636378a"</span>,<span class="attr">"id"</span>:<span class="number">2</span>&#125;]</span><br></pre></td></tr></table></figure><p>如果要按id查找，例如查找id=1的用户，就输入<a href="http://localhost:8080/users/1" target="_blank" rel="noopener">http://localhost:8080/users/1</a> 就可以了</p></li></ol><p>项目的<a href="https://github.com/Ph0en1xGSeek/Shiro/tree/master/ShiroMybatis" target="_blank" rel="noopener">Github地址</a></p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/03/springboot_mybatis/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Shiro安全框架入门</title>
      <link>https://www.ph0en1x.space/2018/09/02/shiro/</link>
      <guid>https://www.ph0en1x.space/2018/09/02/shiro/</guid>
      <pubDate>Sat, 01 Sep 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;对Shiro安全框架的各种操作进行简单的入门，为Shiro框架嵌入Web应用进行基础练习讲解&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>对Shiro安全框架的各种操作进行简单的入门，为Shiro框架嵌入Web应用进行基础练习讲解</p></blockquote><a id="more"></a><h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><p>Apache Shiro是一个简单强大的Java安全框架，提供了用户身份验证、权限授权、加密和会话管理等功能，通过Shiro可以简单快速地帮助各种应用确保安全</p><ul><li><p>Authentication（身份验证）</p><p>通过数据库或其他地方存储的用户信息进行比较，确认用户是否登录登录</p></li><li><p>Authorization（授权）</p><p>通过数据库内存储的用户<code>角色</code>信息确认用户权限</p></li><li><p>Cryptography（加密）</p><p>对信息，如密码，进行加密操作</p></li><li><p>Session Management（会话管理）</p><p>进行用户会话管理，保持登录状态</p></li></ul><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><ol><li><p>maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>Authentication简单测试，使用Junit进行单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.phoenix.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.SimpleAccountRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutenticationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SimpleAccountRealm simpleAccountRealm = <span class="keyword">new</span> SimpleAccountRealm();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        simpleAccountRealm.addAccount(<span class="string">"Ph0en1x"</span>, <span class="string">"1234"</span>, <span class="string">"admin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAutentication</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建SecurityManager环境</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        defaultSecurityManager.setRealm(simpleAccountRealm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主体提交认证请求</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"Ph0en1x"</span>, <span class="string">"1234"</span>);</span><br><span class="line">        subject.login(token);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"isAutenticated: "</span> + subject.isAuthenticated());</span><br><span class="line"></span><br><span class="line">        subject.checkRole(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">        subject.logout();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"isAutenticated: "</span> + subject.isAuthenticated());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是Shiro安全模块最简单结构的构建，首先需要构建SecurityManager环境。而构建SecurityManager环境需要一个叫作Realm的组件，Realm里面将会进行用户身份认证以及授权等一系列操作。这里我只创建了简单的，只能进行预先加入到内存中的用户的身份验证和授权的SimpleRealm。</p><p>在Junit的<code>@Before</code>标签中我们就预先加入了一个用户用于测试</p><p>这之后需要将刚刚完成Realm配置的SecurityManager配置到环境中，并生成一个主体（Subject），后面将由主体来发送认证请求给Realm</p><p>身份认证请求被包含在一个UsernamePasswordToken中，然后由主体发送login请求，同时进行admin权限验证</p><p>上述代码将会得到以下输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isAutenticated: true</span><br><span class="line">isAutenticated: false</span><br></pre></td></tr></table></figure><p>当主体发送logout请求后再进行身份验证就会返回false</p></li></ol><p>   当UsernamePasswordToken中的用户密码不正确时，会抛出异常</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.shiro.authc.IncorrectCredentialsException: Submitted credentials for token [org.apache.shiro.authc.UsernamePasswordToken - Ph0en1x, rememberMe=false] did not match the expected credentials.</span><br></pre></td></tr></table></figure><p>   当验证用户不具有相应身份或权限时，会抛出异常</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.shiro.authz.UnauthorizedException: Subject does not have role [admin]</span><br></pre></td></tr></table></figure><ol start="3"><li><p>CustomRealm自定义Realm</p><p>Realm是Shiro进行身份验证和授权的最核心组件，所以也一定能开放给用户进行自定义，例如想根据某个数据库或者文件中的信息来进行相应的验证，密码加密验证等等操作。我这里也写了一个简单的从数据库中查询用户密码来验证登录用户身份的CustomRealm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.phoenix.shiro.realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.Md5Hash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//角色授权</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//认证用户</span></span><br><span class="line"></span><br><span class="line">        String username = (String)authenticationToken.getPrincipal();</span><br><span class="line">        String password = getPasswordByUserName(username);</span><br><span class="line">        <span class="keyword">if</span>(password == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleAuthenticationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                <span class="string">"Ph0en1x"</span>, password, <span class="string">"customRealm"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 传回的时候也要带盐</span></span><br><span class="line">        authenticationInfo.setCredentialsSalt(ByteSource.Util.bytes(username));</span><br><span class="line">        <span class="keyword">return</span> authenticationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPasswordByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">"jdbc:mysql://127.0.0.1/test"</span>;</span><br><span class="line">        String name = <span class="string">"root"</span>;</span><br><span class="line">        String password = <span class="string">"1234"</span>;</span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Connection con = DriverManager.getConnection(url, name, password);</span><br><span class="line">            String sql = String.format(<span class="string">"select password from user where username = \'%s\'"</span>, username);</span><br><span class="line">            Statement statement = con.createStatement();</span><br><span class="line">            ResultSet rs = statement.executeQuery(sql);</span><br><span class="line">            rs.next();</span><br><span class="line">            <span class="comment">// md5加盐操作</span></span><br><span class="line">            result = (<span class="keyword">new</span> Md5Hash(rs.getString(<span class="string">"password"</span>), username)).toString();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CustomerRealm都继承于AuthorizingRealm，而AuthorizingRealm继承于AuthenticatingRealm</p><p>而完成CustomerRealm，需要实现两个abstract方法<code>doGetAuthorizationInfo</code>和<code>doGetAuthenticationInfo</code>分别用于授权和身份验证请求的处理。</p><p>还有就是密码的<strong>加盐</strong>操作，数据并不会明文存在数据库中。通常会通过一些加密操作，例如MD5码，在加密的过程中为了加大破译的难度，往往还会带上一些别的信息，叫作“盐”（salt）。例如上面我获取密码的方法<code>getPasswordByUserName</code>就在获得密码后进行了加盐加密的操作（用来模拟存储加密后的密码，实际使用中是加盐加密后再存入数据库中），并且通过<code>setCredentialsSalt</code>方法告诉验证信息加入的<strong>盐</strong>是什么。</p></li></ol><p>   相应的，在Shiro的配置中也要加入相应的加密方法和<strong>盐</strong>的配置</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.phoenix.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.phoenix.shiro.realm.CustomerRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealmTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAutentication</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        CustomerRealm customerRealm = <span class="keyword">new</span> CustomerRealm();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建SecurityManager环境</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        defaultSecurityManager.setRealm(customerRealm);</span><br><span class="line"><span class="comment">//加密设置</span></span><br><span class="line">        HashedCredentialsMatcher matcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        matcher.setHashAlgorithmName(<span class="string">"md5"</span>);</span><br><span class="line">        matcher.setHashIterations(<span class="number">1</span>);</span><br><span class="line">        customerRealm.setCredentialsMatcher(matcher);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主体提交认证请求</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"Ph0en1x"</span>, <span class="string">"1234"</span>);</span><br><span class="line">        subject.login(token);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"isAutenticated: "</span> + subject.isAuthenticated());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        subject.checkRole("admin");</span></span><br><span class="line"><span class="comment">//        subject.checkPermission("user:delete");</span></span><br><span class="line">        subject.logout();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"isAutenticated: "</span> + subject.isAuthenticated());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   加密设置就是告诉Shiro我的密码是用了一次迭代的md5加密的，再配合<code>setCredentialsSalt</code>里的<strong>盐</strong>信息，就可以完成身份验证</p><p>   ​</p><ol start="4"><li>这里还有其他的一些关于<a href="https://github.com/Ph0en1xGSeek/Shiro/tree/master/shiroHello" target="_blank" rel="noopener">Shiro的简单代码</a></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/02/shiro/#disqus_thread</comments>
    </item>
    
    <item>
      <title>搭建第一个Angular Web应用</title>
      <link>https://www.ph0en1x.space/2018/09/01/angular/</link>
      <guid>https://www.ph0en1x.space/2018/09/01/angular/</guid>
      <pubDate>Fri, 31 Aug 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;使用node.js搭建第一个简单的angular应用&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>使用node.js搭建第一个简单的angular应用</p></blockquote><a id="more"></a><ol><li><p>安装node.js</p><p>在<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs官网</a>上下载新版本的Node.js安装包到本地(这里用Ubuntu为例，使用apt默认源中的nodejs版本过旧，所以到官网下载安装包)</p><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf node-v8.11.4-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><p>将解压后目录内的<code>bin/</code>下的node和npm的链接放置在系统目录下，配置全局使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /home/ph0en1x/Program_Files/node-v8.11.4-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">sudo ln -s /home/ph0en1x/Program_Files/node-v8.11.4-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br></pre></td></tr></table></figure><p>由于我的根目录与home目录挂载着不同的硬盘，所以只能使用软链接，如果是同一块硬盘也可以使用硬链接</p><p>确认版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br><span class="line">npm --version</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>搭建Angular应用</p><p>全局安装Angular CLI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure><p>新建工程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new my-app</span><br></pre></td></tr></table></figure><p>启动应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">ng serve --open</span><br></pre></td></tr></table></figure><p>最后进入浏览器输入 <a href="http://localhost:4200" target="_blank" rel="noopener">http://localhost:4200</a> 看到demo</p><p><img src="https://angular.io/generated/images/guide/cli-quickstart/app-works.png" alt="Angular"></p><p>具体教程参考<a href="https://angular.io/guide/quickstart" target="_blank" rel="noopener">Angular官方文档</a></p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/09/01/angular/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 42 Trapping Rain Water</title>
      <link>https://www.ph0en1x.space/2018/08/24/leetcode42/</link>
      <guid>https://www.ph0en1x.space/2018/08/24/leetcode42/</guid>
      <pubDate>Thu, 23 Aug 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;2-SUM 同类型题目， 与LeetCode11思想相似&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>2-SUM 同类型题目， 与LeetCode11思想相似</p><a id="more"></a><blockquote><p>Given <em>n</em> non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p><p><img src="http://www.leetcode.com/static/images/problemset/rainwatertrap.png" alt="img"><br>The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. <strong>Thanks Marcos</strong>for contributing this image!</p></blockquote><hr><ul><li>这题会卡时间限制，要求使用O(n)的方法来解决这个问题；</li><li>实际上只需要计算每个格子左右的高度最大值中取较小的那个与当前的高度取正差值即可；</li><li><strong>优化：</strong>可以仅遍历一次就完成计算，即设置左指针与右指针，并且记录左指针左边的最大值以及右指针右边的最大值，每次比较两个最大值，如果左最大值小于右最大值，那么右边不会对左指针指的位置产生限制，直接用左最大值计算即可，右边同理；</li></ul><hr><p><strong>Python Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type height: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        length = len(height)</span><br><span class="line">        <span class="keyword">if</span> height == <span class="keyword">None</span> <span class="keyword">or</span> length == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = length - <span class="number">1</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        maxL = maxR = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            maxL = max(height[l], maxL)</span><br><span class="line">            maxR = max(height[r], maxR)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> maxL &lt; maxR:</span><br><span class="line">                result += maxL - height[l]</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result += maxR - height[r]</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/08/24/leetcode42/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 41 First Missing Positive</title>
      <link>https://www.ph0en1x.space/2018/08/23/leetcode41/</link>
      <guid>https://www.ph0en1x.space/2018/08/23/leetcode41/</guid>
      <pubDate>Wed, 22 Aug 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 桶排序思想，一种理想情况下接近O(n)的排序算法&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 桶排序思想，一种理想情况下接近O(n)的排序算法</p></blockquote><a id="more"></a><blockquote><p>Given an unsorted integer array, find the smallest missing positive integer.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [1,2,0]</span><br><span class="line">&gt; Output: 3</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [3,4,-1,1]</span><br><span class="line">&gt; Output: 2</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [7,8,9,11,12]</span><br><span class="line">&gt; Output: 1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>Note:</strong></p><p>Your algorithm should run in <em>O</em>(<em>n</em>) time and uses constant extra space.</p></blockquote><hr><ul><li>假设这n个数就是1-n进行排序，即i应该放在nums[i-1]上</li><li>扫描一遍数组，只要当前位置上的数不是在1-n之间并且没有正确摆放，就与正确位置上的数进行一次交换</li><li>所有的数都会被扫描到一遍，每一次交换都会使得一个数到达它应该在的位置上，所以最多交换n次，扫描过后所有在1-n区间内的数都会被换到它应该在的位置上</li><li>再从头扫描一遍数组，第一个放置错误的位置就是第一个缺失的数，如果都正确了，那么就是n+1缺失</li></ul><hr><p><strong>Python Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">firstMissingPositive</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">            <span class="keyword">while</span> nums[i] &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] &lt;= length <span class="keyword">and</span> nums[i] != i+<span class="number">1</span> <span class="keyword">and</span> nums[i] != nums[nums[i]<span class="number">-1</span>]:</span><br><span class="line">                tmp = nums[nums[i]<span class="number">-1</span>]</span><br><span class="line">                nums[nums[i]<span class="number">-1</span>] = nums[i]</span><br><span class="line">                nums[i] = tmp</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != i+<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> length+<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/08/23/leetcode41/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 11 Container With Most Water</title>
      <link>https://www.ph0en1x.space/2018/08/23/leetcode11/</link>
      <guid>https://www.ph0en1x.space/2018/08/23/leetcode11/</guid>
      <pubDate>Wed, 22 Aug 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;2-SUM 同类型题目&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>2-SUM 同类型题目</p><a id="more"></a><blockquote><p>Given <em>n</em> non-negative integers <em>a1</em>, <em>a2</em>, …, <em>an </em>, where each represents a point at coordinate (<em>i</em>, <em>ai</em>). <em>n</em> vertical lines are drawn such that the two endpoints of line <em>i</em> is at (<em>i</em>, <em>ai</em>) and (<em>i</em>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><p><strong>Note: </strong>You may not slant the container and <em>n</em> is at least 2.</p><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg" alt="img"></p><p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p></blockquote><hr><ul><li><p><strong>算法：</strong></p><p>刚开始设置最左边和最右边两个板，记录当前面积，然后把短的那边的指针向中心移动一个位置，比较面积，以此类推；</p></li><li><p><strong>证明：</strong></p><p>以左边指针为例，如果左边较短，那么右边的指针无论怎么向左移动都不可能得到更大的面积了，所以可以看作直接跳过大层循环，即左边指针向右一位。右边指针同理；</p><p>左边向右一位后，右边的指针不需要回到最右边，因为右边指针的右边不可能有比左边指针移动前更大的（相当于双方打擂台，守擂的一定比对方之前打擂失败的都要强），所以左指针移动后不可能通过右指针右边的数得到更好的答案。</p></li></ul><hr><p><strong>Python Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type height: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        mx = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = len(height) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            v = min(height[i], height[j]) * (j-i)</span><br><span class="line">            mx = max(mx, v)</span><br><span class="line">            <span class="keyword">if</span> height[i] &lt; height[j]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> mx</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/08/23/leetcode11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用Jsoup编写网络爬虫</title>
      <link>https://www.ph0en1x.space/2018/07/16/jsoup/</link>
      <guid>https://www.ph0en1x.space/2018/07/16/jsoup/</guid>
      <pubDate>Sun, 15 Jul 2018 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;以爬取Stack Overflow的搜索结果为例，使用Jsoup库编写Java网络爬虫&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jsoup是一个非常好用并且开源的Java爬虫（用来发送请求和解析Html的库），本篇笔记将会介绍如何使用Jsoup编
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>以爬取Stack Overflow的搜索结果为例，使用Jsoup库编写Java网络爬虫</p></blockquote><p>Jsoup是一个非常好用并且开源的Java爬虫（用来发送请求和解析Html的库），本篇笔记将会介绍如何使用Jsoup编写一个简单的网络爬虫，用来获取Stack Overflow的搜索结果</p><p><a href="https://jsoup.org/" target="_blank" rel="noopener">Jsoup官网</a>有非常棒的文档，建议有能力的可以直接参考;</p><p>下面开始编写一个自己的Demo</p><ol><li><p>首先创建一个Maven工程项目，并在<code>pom.xml</code>文件中导入jsoup包引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>创建一个java文件，命名为<code>JsoupTest.java</code> 引入需要的相应的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>进入Stack Overflow首页，以IOException为例搜索一下，然后打开调试工具查看网页的结构，我们需要获取每个问题、问题的摘要以及问题的链接。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/crawler/stackOverflow.png" alt="stackOverflow"></p><p>选取我们需要的结果区域，可以看到我们要的元素在一个类型为<code>question-summary</code>的<code>div</code>下一个类型为<code>summary</code>的<code>div</code>下，其中：</p><p><code>class=&quot;result-link&quot;</code>里面存着问题以及问题的链接;</p><p><code>class=&quot;excerpt&quot;</code>里面存着问题的摘要;</p><p><code>class=&quot;tags&quot;</code>里面存着问题的标签;</p><p><code>class=&quot;started&quot;</code>里面存着提问日期</p><p>​</p></li><li><p>知道结构以后就可以开始编写爬虫了</p><p>首先定义URL，Stackoverflow使用GET请求的方式来进行搜索，所以创建两个串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> String url = <span class="string">"https://stackoverflow.com/search?q="</span>;</span><br><span class="line"><span class="keyword">static</span> String query = <span class="string">"IOException"</span>;</span><br></pre></td></tr></table></figure><p>第二个query串就是要搜索的内容，前面是查询url的前缀</p><p>然后使用Jsoup发送请求，把query直接接在url后面就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Document doc = Jsoup.connect(url+query).get();</span><br></pre></td></tr></table></figure><p>doc为收到的response，也就是整个页面，这时候就可以使用Jsoup的解析功能来提取我们需要的内容了：</p><p>提取<code>question-summary</code>类下的<code>summary</code>类(CSS语法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Elements elements = doc.select(<span class="string">".question-summary .summary"</span>);</span><br></pre></td></tr></table></figure><p>这样将得到一个Html元素的队列，然后迭代地进行内容的提取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Element e : elements)&#123;</span><br><span class="line">    Elements title = e.select(<span class="string">".result-link h3 a"</span>);</span><br><span class="line">    System.out.println(<span class="string">"title: "</span> + title.get(<span class="number">0</span>).attr(<span class="string">"title"</span>));</span><br><span class="line">    System.out.println(<span class="string">"url: "</span> + title.get(<span class="number">0</span>).absUrl(<span class="string">"href"</span>));</span><br><span class="line">    Elements excerpt = e.select(<span class="string">".excerpt"</span>);</span><br><span class="line">    System.out.println(<span class="string">"Excerpt: "</span> + excerpt.text() + <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样也是采用CSS语法，attr()方法会获取元素里的某个属性值(Attribute)，由于很多页面内的链接都是相对路径，absurl()会获取href属性中的url后，自动形成我们需要的绝对路径，text()将会获取元素中的文本元素(不包含标签)，html()则是获得该元素下的所有内容;</p><p>​</p></li><li><p>然后查看显示结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">title: HttpClient request throws IOException</span><br><span class="line">url: https://stackoverflow.com/questions/13141434/httpclient-request-throws-ioexception</span><br><span class="line">Excerpt: The following code throws a IOException with the message: &quot;The specified registry key does not exist.&quot; HttpClient client = new HttpClient(); Uri uri = new Uri(&quot;http://www.google.com …</span><br><span class="line"></span><br><span class="line">title: How to avoid Java code in JSP files?</span><br><span class="line">url: https://stackoverflow.com/questions/3177733/how-to-avoid-java-code-in-jsp-files/3180202#3180202</span><br><span class="line">Excerpt: , IOException &#123; if (((HttpServletRequest) request).getSession().getAttribute(&quot;user&quot;) == null) &#123; ((HttpServletResponse) response).sendRedirect(&quot;login&quot;); // Not logged in, redirect to login page … ServletException, IOException &#123; try &#123; List&lt;Product&gt; products = productService.list(); // Obtain all products. request.setAttribute(&quot;products&quot;, products); // Store products in …</span><br><span class="line"></span><br><span class="line">title: Understanding Java IOException</span><br><span class="line">url: https://stackoverflow.com/questions/5819121/understanding-java-ioexception</span><br><span class="line">Excerpt: I need some help with understanding the IOException. I&apos;ve reviewed a lot of information on the internet, and looked at the technical specifications at Oracle&apos;s Java website. Am I correct in my … understanding of the IOException class and all of it&apos;s sub-classes, that there are no associated &quot;error messages&quot; or &quot;return code&quot; values? So if one wanted to issue some message and/or return code value …</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>​</p></li></ol><p>完成我们要的提取</p><p><a href="https://github.com/Ph0en1xGSeek/Jsoup/blob/master/JsoupHello/src/main/java/JsoupTest.java" target="_blank" rel="noopener">完整的代码</a></p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/07/16/jsoup/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 34 Search for a Range</title>
      <link>https://www.ph0en1x.space/2018/06/03/leetcode34/</link>
      <guid>https://www.ph0en1x.space/2018/06/03/leetcode34/</guid>
      <pubDate>Sat, 02 Jun 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;用不同的二分查找方式找到最左边和最右边的target&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>用不同的二分查找方式找到最左边和最右边的target</p><a id="more"></a><blockquote><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p><p>Your algorithm’s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><p>If the target is not found in the array, return <code>[-1, -1]</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">&gt; Output: [3,4]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">&gt; Output: [-1,-1]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><hr><p><strong>Python Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="comment"># left most</span></span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            mid = (l+r) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt;= target:</span><br><span class="line">                r = mid<span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> l &gt;= len(nums) <span class="keyword">or</span> nums[l] != target:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">        left = l</span><br><span class="line"></span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="comment"># right most</span></span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            mid = (l+r) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; target:</span><br><span class="line">                r = mid<span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = mid+<span class="number">1</span></span><br><span class="line">        right = r</span><br><span class="line">        <span class="keyword">return</span> [left, right]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/06/03/leetcode34/#disqus_thread</comments>
    </item>
    
    <item>
      <title>机器学习实战--Apriori算法挖掘关联规则</title>
      <link>https://www.ph0en1x.space/2018/05/29/Apriori2/</link>
      <guid>https://www.ph0en1x.space/2018/05/29/Apriori2/</guid>
      <pubDate>Mon, 28 May 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; Apriori算法是最著名的关联规则的挖掘方法，可以使用它挖掘频繁项集发现数据中的规律。著名的“啤酒与尿布”案例就是在分析大量超市的事务之后发现了“啤酒”与“尿布”这一频繁项集。这篇笔记主要是记录Apriori的Python3代码实现的，会就算法来讲解Apriori挖掘频繁项集的步骤，算法的详细内容在《数据挖掘-概念与技术》一书中有非常详细的讲解，这里不再赘述&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> Apriori算法是最著名的关联规则的挖掘方法，可以使用它挖掘频繁项集发现数据中的规律。著名的“啤酒与尿布”案例就是在分析大量超市的事务之后发现了“啤酒”与“尿布”这一频繁项集。这篇笔记主要是记录Apriori的Python3代码实现的，会就算法来讲解Apriori挖掘频繁项集的步骤，算法的详细内容在《数据挖掘-概念与技术》一书中有非常详细的讲解，这里不再赘述</p></blockquote><a id="more"></a><p><a href="https://github.com/Ph0en1xGSeek/Data_Mining/blob/master/Homework/DM_assignment2/Apriori.py" target="_blank" rel="noopener">完整代码</a>在这里</p><p>前面文章<a href="机器学习实战--Apriori算法频繁项集">https://www.ph0en1x.space/2018/05/13/Apriori/</a>介绍了如何利用Apriori算法挖掘频繁项集，这篇文章将继续介绍如何找到关联规则</p><ol><li><p>生成关联规则的入口函数，从先减少一个项集开始，然后交由rulesFromConseq进行递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateRules</span><span class="params">(L, supportData, minConf=<span class="number">0.7</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    L: itemsets</span></span><br><span class="line"><span class="string">    supportData: map of the item to the number</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    bigRuleList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(L)):</span><br><span class="line">        <span class="keyword">for</span> freqSet <span class="keyword">in</span> L[i]:</span><br><span class="line">            Hl = [frozenset([item]) <span class="keyword">for</span> item <span class="keyword">in</span> freqSet]</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">1</span>:</span><br><span class="line">                rulesFromConseq(freqSet, Hl, supportData, bigRuleList,</span><br><span class="line">                minConf)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                calcConf(freqSet, Hl, supportData, bigRuleList, minConf)</span><br><span class="line">    <span class="keyword">return</span> bigRuleList</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>计算置信度是否超过阈值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcConf</span><span class="params">(freqSet, H, supportData, brl, minConf=<span class="number">0.7</span>)</span>:</span></span><br><span class="line">    prunedH=[]</span><br><span class="line">    <span class="keyword">for</span> conseq <span class="keyword">in</span> H:</span><br><span class="line">        conf = supportData[freqSet] / supportData[freqSet-conseq]</span><br><span class="line">        <span class="keyword">if</span> conf &gt;= minConf:</span><br><span class="line">            <span class="keyword">print</span> (freqSet-conseq, <span class="string">'---&gt;'</span>, conseq, <span class="string">'conf:'</span>, conf)</span><br><span class="line">            brl.append((freqSet-conseq, conseq, conf))</span><br><span class="line">            <span class="comment"># 剪枝，如果置信度已经低于阈值，就不用继续加了</span></span><br><span class="line">            prunedH.append(conseq)</span><br><span class="line">    <span class="keyword">return</span> prunedH</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>递归增加分子中的item数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rulesFromConseq</span><span class="params">(freqSet, H, supportData, brl, minConf=<span class="number">0.7</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    递归扫描关联关系</span></span><br><span class="line"><span class="string">    少1个 少2个...</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    m = len(H[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> len(freqSet) &gt; (m+<span class="number">1</span>):</span><br><span class="line">        Hmp1 = aprioriGen(H, m+<span class="number">1</span>)</span><br><span class="line">        Hmp1 = calcConf(freqSet, Hmp1, supportData, brl, minConf)</span><br><span class="line">        <span class="keyword">if</span> len(Hmp1) &gt; <span class="number">1</span>:</span><br><span class="line">            rulesFromConseq(freqSet, Hmp1, supportData, brl, minConf)</span><br></pre></td></tr></table></figure></li><li><p>在main函数中添加关联关系的调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># dataSet, dataMap = loadDataSet()</span></span><br><span class="line">    dataSet = loadDataSet()</span><br><span class="line">    start = time.time()</span><br><span class="line">    L, suppData = apriori(dataSet, minSupport=<span class="number">100</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    cnt = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line">        print(cnt, i)</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">    print(<span class="string">'Apriori total time:'</span>, end-start, <span class="string">'s'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Generate Rule Begin:"</span>)</span><br><span class="line">    <span class="comment"># 生成关联关系</span></span><br><span class="line">    generateRules(L, suppData, minConf=<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/05/29/Apriori2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>机器学习实战--FP-growth算法挖掘频繁项集</title>
      <link>https://www.ph0en1x.space/2018/05/13/FPgrowth/</link>
      <guid>https://www.ph0en1x.space/2018/05/13/FPgrowth/</guid>
      <pubDate>Sat, 12 May 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; FP-growth是频繁项集挖掘的一种优化算法。它先将事务先构造成一棵FP树，这样一来就不用像Apriori一项反复地扫描原来的事务了，大大提高了效率。这篇笔记主要是记录FP-growth的Python3代码实现的，会就算法来讲解FP-growth挖掘频繁项集的步骤，算法的详细内容在《数据挖掘-概念与技术》一书中有非常详细的讲解，这里不再赘述&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> FP-growth是频繁项集挖掘的一种优化算法。它先将事务先构造成一棵FP树，这样一来就不用像Apriori一项反复地扫描原来的事务了，大大提高了效率。这篇笔记主要是记录FP-growth的Python3代码实现的，会就算法来讲解FP-growth挖掘频繁项集的步骤，算法的详细内容在《数据挖掘-概念与技术》一书中有非常详细的讲解，这里不再赘述</p></blockquote><a id="more"></a><p><a href="https://github.com/Ph0en1xGSeek/Data_Mining/blob/master/Homework/DM_assignment2/FPgrowth.py" target="_blank" rel="noopener">完整代码</a>在这里</p><ol><li><p>数据格式</p><p>类似下方的二维数组，每一个list代表一个transaction，里面的每个数都是item的编号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[1,2,5], [2,4], [2,3], [1,2,4],[1,3], [2,3], [1,3], [1,2,3,5], [1,2,3]]</span><br></pre></td></tr></table></figure></li><li><p>读取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    thing_arr = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data/Groceries.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        X = f.read()</span><br><span class="line">        thing_arr = json.loads(X)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">return</span> thing_arr</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>FP-Growth实现起来相对复杂，需要定义树结点结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">treeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nameValue, numOccur, parentNode)</span>:</span></span><br><span class="line">        <span class="comment"># 值</span></span><br><span class="line">        self.name = nameValue</span><br><span class="line">        <span class="comment"># 计数</span></span><br><span class="line">        self.count = numOccur</span><br><span class="line">        <span class="comment"># 下一个相同值的结点</span></span><br><span class="line">        self.nodeLink = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 父节点</span></span><br><span class="line">        self.parent = parentNode</span><br><span class="line">        <span class="comment"># 孩子结点</span></span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inc</span><span class="params">(self, numOccur)</span>:</span></span><br><span class="line">        self.count += numOccur</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disp</span><span class="params">(self, ind=<span class="number">1</span>)</span>:</span></span><br><span class="line">        print(<span class="string">" "</span>*ind, self.name, <span class="string">' '</span>, self.count)</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> self.children.values():</span><br><span class="line">            child.disp(ind+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>初始化transaction计数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createInitSet</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    retDict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> trans <span class="keyword">in</span> dataSet:</span><br><span class="line">        retDict[frozenset(trans)] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> retDict</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>建立FP树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createTree</span><span class="params">(dataSet, minSup = <span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    创建根结点以及搜索链表表头</span></span><br><span class="line"><span class="string">    :param dataSet: </span></span><br><span class="line"><span class="string">    :param minSup: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索链表头</span></span><br><span class="line">    headerTable = &#123;&#125;</span><br><span class="line">    <span class="comment"># 在搜索用的链表头除记录每个item的频数</span></span><br><span class="line">    <span class="keyword">for</span> trans <span class="keyword">in</span> dataSet:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> trans:</span><br><span class="line">            headerTable[item] = headerTable.get(item, <span class="number">0</span>) + dataSet[trans]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 小于最小支持度的item不用考虑</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> list(headerTable.keys()):</span><br><span class="line">        <span class="keyword">if</span> headerTable[k] &lt; minSup:</span><br><span class="line">            <span class="keyword">del</span>(headerTable[k])</span><br><span class="line">    freqItemSet = set(headerTable.keys())</span><br><span class="line">    <span class="comment"># 如果不存在频繁项集则直接返回空</span></span><br><span class="line">    <span class="keyword">if</span> len(freqItemSet) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span>, <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># 为每个结点增加一个指向下一个同值结点的指针</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> headerTable.keys():</span><br><span class="line">        headerTable[k] = [headerTable[k], <span class="keyword">None</span>]</span><br><span class="line">    <span class="comment"># 树根</span></span><br><span class="line">    retTree = treeNode(<span class="string">'Null Set'</span>, <span class="number">1</span>, <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> tranSet, count <span class="keyword">in</span> dataSet.items():</span><br><span class="line">        localD = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> tranSet:</span><br><span class="line">            <span class="keyword">if</span> item <span class="keyword">in</span> freqItemSet:</span><br><span class="line">                localD[item] = headerTable[item][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> len(localD) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 每个transaction中的item按出现的次数从高到低排</span></span><br><span class="line">            orderedItems = [v[<span class="number">0</span>] <span class="keyword">for</span> v <span class="keyword">in</span> sorted(localD.items(), key=<span class="keyword">lambda</span> p: p[<span class="number">1</span>], reverse=<span class="keyword">True</span>)]</span><br><span class="line">            <span class="comment"># 建树</span></span><br><span class="line">            updateTree(orderedItems, retTree, headerTable, count)</span><br><span class="line">    <span class="keyword">return</span> retTree, headerTable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateTree</span><span class="params">(items, inTree, headerTable, count)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    每个transaction递归更新到树上，并更新搜索链表</span></span><br><span class="line"><span class="string">    :param items:</span></span><br><span class="line"><span class="string">    :param inTree:</span></span><br><span class="line"><span class="string">    :param headerTable:</span></span><br><span class="line"><span class="string">    :param count: 每个transaction的出现次数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 每个transaction的最高出现词数item直接接在root上</span></span><br><span class="line">    <span class="keyword">if</span> items[<span class="number">0</span>] <span class="keyword">in</span> inTree.children:</span><br><span class="line">        <span class="comment"># 有该元素项时计数值+1</span></span><br><span class="line">        inTree.children[items[<span class="number">0</span>]].inc(count)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 没有这个元素项时创建一个新节点</span></span><br><span class="line">        inTree.children[items[<span class="number">0</span>]] = treeNode(items[<span class="number">0</span>], count, inTree)</span><br><span class="line">        <span class="comment"># 更新头指针表或前一个相似元素项节点的指针指向新节点</span></span><br><span class="line">        <span class="keyword">if</span> headerTable[items[<span class="number">0</span>]][<span class="number">1</span>] == <span class="keyword">None</span>:</span><br><span class="line">            headerTable[items[<span class="number">0</span>]][<span class="number">1</span>] = inTree.children[items[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            updateHeader(headerTable[items[<span class="number">0</span>]][<span class="number">1</span>], inTree.children[items[<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归建树</span></span><br><span class="line">    <span class="keyword">if</span> len(items) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 对剩下的元素项迭代调用updateTree函数</span></span><br><span class="line">        updateTree(items[<span class="number">1</span>:], inTree.children[items[<span class="number">0</span>]], headerTable, count)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateHeader</span><span class="params">(nodeToTest, targetNode)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    找到链表尾加上一个</span></span><br><span class="line"><span class="string">    :param nodeToTest: </span></span><br><span class="line"><span class="string">    :param targetNode: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">while</span> (nodeToTest.nodeLink != <span class="keyword">None</span>):</span><br><span class="line">        nodeToTest = nodeToTest.nodeLink</span><br><span class="line">    nodeToTest.nodeLink = targetNode</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>在每次查询条件FP树时，需要递归寻找其条件前缀路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ascendTree</span><span class="params">(leafNode, prefixPath)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    递归寻找父节点</span></span><br><span class="line"><span class="string">    :param leafNode:</span></span><br><span class="line"><span class="string">    :param prefixPath:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> leafNode.parent != <span class="keyword">None</span>:</span><br><span class="line">        prefixPath.append(leafNode.name)</span><br><span class="line">        ascendTree(leafNode.parent, prefixPath)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findPrefixPath</span><span class="params">(basePat, treeNode)</span>:</span></span><br><span class="line">    condPats = &#123;&#125;</span><br><span class="line">    <span class="keyword">while</span> treeNode != <span class="keyword">None</span>:</span><br><span class="line">        prefixPath = []</span><br><span class="line">        <span class="comment"># 获得某个叶子节点的前缀路径</span></span><br><span class="line">        ascendTree(treeNode, prefixPath)</span><br><span class="line">        <span class="keyword">if</span> len(prefixPath) &gt;= <span class="number">2</span>:</span><br><span class="line">            <span class="comment"># 去掉自己获得前缀路径，且权重为当前结点的权重，用于建立条件前缀树</span></span><br><span class="line">            condPats[frozenset(prefixPath[<span class="number">1</span>:])] = treeNode.count</span><br><span class="line">        treeNode = treeNode.nodeLink</span><br><span class="line">    <span class="keyword">return</span> condPats</span><br></pre></td></tr></table></figure></li><li><p>进行频繁项挖掘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mineTree</span><span class="params">(inTree, headerTable, minSup, preFix, freqItemList)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    递归查找频繁项集</span></span><br><span class="line"><span class="string">    :param inTree: FP树</span></span><br><span class="line"><span class="string">    :param headerTable:</span></span><br><span class="line"><span class="string">    :param minSup:</span></span><br><span class="line"><span class="string">    :param preFix: 当前前缀</span></span><br><span class="line"><span class="string">    :param freqItemList: 存储频繁项集</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 从出现次数少的开始找</span></span><br><span class="line">    bigL = [v[<span class="number">0</span>] <span class="keyword">for</span> v <span class="keyword">in</span> sorted(headerTable.items(), key=<span class="keyword">lambda</span> p: p[<span class="number">1</span>][<span class="number">0</span>])]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> basePat <span class="keyword">in</span> bigL:</span><br><span class="line">        newFreqSet = preFix.copy()</span><br><span class="line">        newFreqSet.add(basePat)</span><br><span class="line">        freqItemList.append(newFreqSet)</span><br><span class="line">        condPattBases = findPrefixPath(basePat, headerTable[basePat][<span class="number">1</span>])</span><br><span class="line">        CondTree, Header = createTree(condPattBases, minSup)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> Header != <span class="keyword">None</span>:</span><br><span class="line">            mineTree(CondTree, Header, minSup, newFreqSet, freqItemList)</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/05/13/FPgrowth/#disqus_thread</comments>
    </item>
    
    <item>
      <title>机器学习实战--Apriori算法挖掘频繁项集</title>
      <link>https://www.ph0en1x.space/2018/05/13/Apriori/</link>
      <guid>https://www.ph0en1x.space/2018/05/13/Apriori/</guid>
      <pubDate>Sat, 12 May 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; Apriori算法是最著名的关联规则的挖掘方法，可以使用它挖掘频繁项集发现数据中的规律。著名的“啤酒与尿布”案例就是在分析大量超市的事务之后发现了“啤酒”与“尿布”这一频繁项集。这篇笔记主要是记录Apriori的Python3代码实现的，会就算法来讲解Apriori挖掘频繁项集的步骤，算法的详细内容在《数据挖掘-概念与技术》一书中有非常详细的讲解，这里不再赘述&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> Apriori算法是最著名的关联规则的挖掘方法，可以使用它挖掘频繁项集发现数据中的规律。著名的“啤酒与尿布”案例就是在分析大量超市的事务之后发现了“啤酒”与“尿布”这一频繁项集。这篇笔记主要是记录Apriori的Python3代码实现的，会就算法来讲解Apriori挖掘频繁项集的步骤，算法的详细内容在《数据挖掘-概念与技术》一书中有非常详细的讲解，这里不再赘述</p></blockquote><a id="more"></a><p><a href="https://github.com/Ph0en1xGSeek/Data_Mining/blob/master/Homework/DM_assignment2/Apriori.py" target="_blank" rel="noopener">完整代码</a>在这里</p><ol><li><p>数据格式</p><p>类似下方的二维数组，每一个list代表一个transaction，里面的每个数都是item的编号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[1,2,5], [2,4], [2,3], [1,2,4],[1,3], [2,3], [1,3], [1,2,3,5], [1,2,3]]</span><br></pre></td></tr></table></figure></li><li><p>读取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    thing_arr = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data/Groceries.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        X = f.read()</span><br><span class="line">        thing_arr = json.loads(X)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">return</span> thing_arr</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>首先生成C<sub>1</sub>集合，将所有出现过的item编号都加入到C<sub>1</sub>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createC1</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    生成C1</span></span><br><span class="line"><span class="string">    :param dataSet:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    C1 = []</span><br><span class="line">    <span class="keyword">for</span> transaction <span class="keyword">in</span> dataSet:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> transaction:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> [item] <span class="keyword">in</span> C1:</span><br><span class="line">                C1.append([item])</span><br><span class="line">    C1.sort()</span><br><span class="line">    <span class="comment">#将项集列表转换为不可变集和</span></span><br><span class="line">    <span class="keyword">return</span> [frozenset(item) <span class="keyword">for</span> item <span class="keyword">in</span> C1]</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>扫描数据集计数，去除C<sub>k</sub>中的非频繁项集，生成L<sub>1</sub></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scanD</span><span class="params">(D, Ck, minSupport = <span class="number">50</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    扫描事务集D过滤Ck</span></span><br><span class="line"><span class="string">    :param D:</span></span><br><span class="line"><span class="string">    :param Ck:</span></span><br><span class="line"><span class="string">    :param minSupport:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    ssCnt = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> tid <span class="keyword">in</span> D:</span><br><span class="line">        <span class="keyword">for</span> can <span class="keyword">in</span> Ck:</span><br><span class="line">            <span class="keyword">if</span> can.issubset(tid):</span><br><span class="line">                <span class="keyword">if</span> can <span class="keyword">not</span> <span class="keyword">in</span> ssCnt.keys() : ssCnt[can] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>: ssCnt[can] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    retList = []</span><br><span class="line">    supportData = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> ssCnt:</span><br><span class="line">        support = ssCnt[key]</span><br><span class="line">        <span class="keyword">if</span> support &gt;= minSupport:</span><br><span class="line">            retList.insert(<span class="number">0</span>, key)</span><br><span class="line">        supportData[key] = support</span><br><span class="line">    <span class="keyword">return</span> retList, supportData</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>从L<sub>k-1</sub>集中生成C<sub>k</sub>集合，需要将L<sub>k-1</sub>项集进行排序，然后将前k-2项相同的集合进行合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aprioriGen</span><span class="params">(Lk, k)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    生成Ck</span></span><br><span class="line"><span class="string">    :param Lk:</span></span><br><span class="line"><span class="string">    :param k:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    retList = []</span><br><span class="line">    lenLk = len(Lk)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(lenLk):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, lenLk):</span><br><span class="line">            L1 = list(Lk[i])[:k<span class="number">-2</span>]</span><br><span class="line">            L2 = list(Lk[j])[:k<span class="number">-2</span>]</span><br><span class="line">            L1.sort()</span><br><span class="line">            L2.sort()</span><br><span class="line">            <span class="keyword">if</span> L1 == L2:</span><br><span class="line">                retList.append(Lk[i] | Lk[j])</span><br><span class="line">    <span class="keyword">return</span> retList</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>将上述步骤结合起来，就可以生成所有的频繁项集，直到为空终止算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apriori</span><span class="params">(dataSet, minSupport = <span class="number">50</span>)</span>:</span></span><br><span class="line">    C1 = createC1(dataSet=dataSet)</span><br><span class="line">    D = [set(item) <span class="keyword">for</span> item <span class="keyword">in</span> dataSet]</span><br><span class="line">    L1, supportData = scanD(D, C1, minSupport)</span><br><span class="line">    L = [L1]</span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(len(L[k<span class="number">-2</span>]) &gt; <span class="number">0</span>):</span><br><span class="line">        Ck = aprioriGen(L[k<span class="number">-2</span>], k)</span><br><span class="line">        Lk, supK = scanD(D, Ck, minSupport)</span><br><span class="line">        supportData.update(supK)</span><br><span class="line">        L.append(Lk)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> L, supportData</span><br></pre></td></tr></table></figure></li><li><p>到此使用Apriori挖掘频繁项集就编写完了，后面还有关联规则的挖掘，未完。。</p></li></ol><p>​</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/05/13/Apriori/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ubuntu自己创建桌面快捷方式</title>
      <link>https://www.ph0en1x.space/2018/04/25/ubuntu_shortcut/</link>
      <guid>https://www.ph0en1x.space/2018/04/25/ubuntu_shortcut/</guid>
      <pubDate>Tue, 24 Apr 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 本篇文章将会介绍如何在Ubuntu下创建自己的快捷方式&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 本篇文章将会介绍如何在Ubuntu下创建自己的快捷方式</p></blockquote><a id="more"></a><p><strong>操作步聚：</strong></p><ol><li><p>新建空白文档</p></li><li><p>写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name = Studio</span><br><span class="line">comment= android studio</span><br><span class="line">Exec=可执行文件位置</span><br><span class="line">Icon=图标位置</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br></pre></td></tr></table></figure></li><li><p>更改文件名为xxx.desktop</p></li><li><p>右键属性—权限—允许作为程序执行文件</p></li><li><p>创建完成</p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/04/25/ubuntu_shortcut/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ubuntu下安装Matlab 2018a</title>
      <link>https://www.ph0en1x.space/2018/04/23/ubuntu_matlab/</link>
      <guid>https://www.ph0en1x.space/2018/04/23/ubuntu_matlab/</guid>
      <pubDate>Sun, 22 Apr 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;在Ubuntu在安装Matlab用于学习、研究用途。Linux上可以使用开源免费的Octave代替&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>在Ubuntu在安装Matlab用于学习、研究用途。Linux上可以使用开源免费的Octave代替</p></blockquote><a id="more"></a><ol><li><p>下载Matlab 2018a 安装包</p><p>matlab是收费软件，所以这篇笔记没有提供下载和破解资源，各位想把Matlab用做学习研究用途的童鞋可以到各大PT站取下载</p><p>​</p></li><li><p>进入安装包内，和Windows安装一样，里面会有三个文件，分别是破解用的证书文件，光盘镜像1，光盘镜像2</p><p>​</p></li><li><p>创建挂载点<code>~/matlab</code>挂载映像文件1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ mkdir matlab </span><br><span class="line">$ sudo mount -t auto -o loop YOUR_DOWNLOAD_DIR/R2018a_glnxa64_dvd1.iso ~/matlab/</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>挂载之后，进入<code>根目录</code>开始安装(注意不能直接在挂载目录下启动install)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /</span><br><span class="line">$ sudo ./home/phoenix/matlab/install</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>安装中提示输入key的可以到破解文件Crack中的readme.txt中找</p></li><li><p>按照提示进行安装，安装到一半时会提示插入光盘2，这时候就要挂载映像文件2</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/ubuntu_env/continue.png" alt="continue"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mount -t auto -o loop YOUR_DOWNLOAD_DIR/R2018a_glnxa64_dvd2.iso ~/matlab/</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>安装好后第一次启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/MATLAB/R2018a/bin</span><br><span class="line">$ sudo ./matlab</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>选择不要联网激活，导入Crack中的<code>license_standalone.lic</code>文件</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/ubuntu_env/license.png" alt="license"></p><p>​</p></li><li><p>复制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -f YOUR_DOWNLOAD_DIR/Matlab2018aLinux64Crack/R2018a/bin/glnxa64/matlab_startup_plugins/lmgrimpl/libmwlmgrimpl.so /usr/<span class="built_in">local</span>/MATLAB/R2018a/bin/glnxa64/matlab_startup_plugins/lmgrimpl</span><br></pre></td></tr></table></figure></li><li><p>再次启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./matlab</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/ubuntu_env/matlab.png" alt="matlab"></p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/04/23/ubuntu_matlab/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ubuntu下编译安装VLfeat</title>
      <link>https://www.ph0en1x.space/2018/04/23/ubuntu_vlfeat/</link>
      <guid>https://www.ph0en1x.space/2018/04/23/ubuntu_vlfeat/</guid>
      <pubDate>Sun, 22 Apr 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;VLFeat&lt;/strong&gt; &lt;a href=&quot;http://www.vlfeat.org/license.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;open source&lt;/a&gt; library implements popular computer vision algorithms specializing in image understanding and local features extraction and matching. Algorithms include Fisher Vector, VLAD, SIFT, MSER, k-means, hierarchical k-means, agglomerative information bottleneck, SLIC superpixels, quick shift superpixels, large scale SVM training, and many others. It is written in C for efficiency and compatibility, with interfaces in MATLAB for ease of use, and detailed documentation throughout. It supports Windows, Mac OS X, and Linux. &lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>The <strong>VLFeat</strong> <a href="http://www.vlfeat.org/license.html" target="_blank" rel="noopener">open source</a> library implements popular computer vision algorithms specializing in image understanding and local features extraction and matching. Algorithms include Fisher Vector, VLAD, SIFT, MSER, k-means, hierarchical k-means, agglomerative information bottleneck, SLIC superpixels, quick shift superpixels, large scale SVM training, and many others. It is written in C for efficiency and compatibility, with interfaces in MATLAB for ease of use, and detailed documentation throughout. It supports Windows, Mac OS X, and Linux. </p></blockquote><a id="more"></a><ol><li><p><a href="http://www.vlfeat.org/download/vlfeat-0.9.21.tar.gz" target="_blank" rel="noopener">下载源码</a></p></li><li><p>解压进入vlfeat的根目录<code>vlfeat_ROOT</code></p></li><li><p>修改Makefile</p><p>解除注释或添加一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISABLE_OPENMP=yes</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>打开<code>/etc/ld.so.conf</code>添加一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vlfeat_ROOT/toolbox/mex/mexa64</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>刷新环境配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>再次进入vlfeat_ROOT，输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make MEX=matlab_ROOT/bin/mex</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>编译成功后进入matlab命令行输入</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run(<span class="string">'vlfeat_ROOT/toolbox/vl_setup.m'</span>)</span><br></pre></td></tr></table></figure></li><li><p>运行成功后查看版本，正常显示后完成安装</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vl_version</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>在matlab起始位置下(我的是HOME目录下)添加一个<code>startup.m</code>文件写上</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run(<span class="string">'vlfeat_ROOT/toolbox/vl_setup.m'</span>)</span><br></pre></td></tr></table></figure><p>就可以每次启动时自动加载vlfeat</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/ubuntu_env/dir.png" alt="dir"></p><p>​</p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/04/23/ubuntu_vlfeat/#disqus_thread</comments>
    </item>
    
    <item>
      <title>马氏距离(Mahalanobis Distance)</title>
      <link>https://www.ph0en1x.space/2018/04/18/Mahalanobis/</link>
      <guid>https://www.ph0en1x.space/2018/04/18/Mahalanobis/</guid>
      <pubDate>Tue, 17 Apr 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 马氏距离(Mahalanobis Distance)是度量学习中一种常用的距离指标，同欧氏距离、曼哈顿距离、汉明距离等一样被用作评定数据之间的相似度指标。但却可以应对高维线性分布的数据中各维度间非独立同分布的问题。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 马氏距离(Mahalanobis Distance)是度量学习中一种常用的距离指标，同欧氏距离、曼哈顿距离、汉明距离等一样被用作评定数据之间的相似度指标。但却可以应对高维线性分布的数据中各维度间非独立同分布的问题。</p></blockquote><a id="more"></a><h1 id="什么是马氏距离"><a href="#什么是马氏距离" class="headerlink" title="什么是马氏距离"></a>什么是马氏距离</h1><p>马氏距离(Mahalanobis Distance)是一种距离的度量，可以看作是欧氏距离的一种修正，修正了欧式距离中各个维度尺度不一致且相关的问题。</p><p>单个数据点的马氏距离</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/scale_learning/Dm.png" alt="Dm"></p><p>数据点x, y之间的马氏距离</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/scale_learning/Dxy.png" alt="Dxy"></p><p>其中Σ是多维随机变量的协方差矩阵，μ为样本均值，如果协方差矩阵是单位向量，也就是各维度独立同分布，马氏距离就变成了欧氏距离。</p><h1 id="马氏距离实际意义"><a href="#马氏距离实际意义" class="headerlink" title="马氏距离实际意义"></a>马氏距离实际意义</h1><p>那么马氏距离就能能干什么？它比欧氏距离好在哪里？举几个栗子</p><p><strong>欧式距离近就一定相似？</strong></p><p>先举个比较常用的例子，身高和体重，这两个变量拥有不同的单位标准，也就是有不同的scale。比如身高用毫米计算，而体重用千克计算，显然差10mm的身高与差10kg的体重是完全不同的。但在普通的欧氏距离中，这将会算作相同的差距。</p><p><strong>归一化后欧氏距离近就一定相似？</strong></p><p>当然我们可以先做归一化来消除这种维度间scale不同的问题，但是样本分布也会影响分类</p><p>举个一维的栗子，现在有两个类别，统一单位，第一个类别均值为0，方差为0.1，第二个类别均值为5，方差为5。那么一个值为2的点属于第一类的概率大还是第二类的概率大？距离上说应该是第一类，但是直觉上显然是第二类，因为第一类不太可能到达2这个位置。</p><p>所以，在一个方差较小的维度下很小的差别就有可能成为离群点。就像下图一样，A与B相对于原点的距离是相同的。但是由于样本总体沿着横轴分布，所以B点更有可能是这个样本中的点，而A则更有可能是离群点。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/scale_learning/scale.png" alt="scale"></p><p><strong>算上维度的方差就够了？</strong></p><p>还有一个问题——如果维度间不独立同分布，样本点一定与欧氏距离近的样本点同类的概率更大吗？</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/scale_learning/scale2.png" alt="scale2"></p><p>可以看到样本基本服从f(x) = x的线性分布，A与B相对于原点的距离依旧相等，显然A更像是一个离群点</p><p>即使数据已经经过了标准化，也不会改变AB与原点间距离大小的相互关系。所以要本质上解决这个问题，就要针对<a href="https://www.ph0en1x.space/2018/03/06/PCA/">主成分分析</a>中的<code>主成分</code>来进行标准化。</p><h1 id="马氏距离的几何意义"><a href="#马氏距离的几何意义" class="headerlink" title="马氏距离的几何意义"></a>马氏距离的几何意义</h1><p>上面搞懂了，马氏距离就好理解了，只需要将变量<code>按照主成分进行旋转</code>，让维度间相互<strong>独立</strong>，然后进行<code>标准化</code>，让维度<strong>同分布</strong>就OK了</p><p>由主成分分析可知，由于主成分就是特征向量方向，每个方向的方差就是对应的特征值，所以只需要按照特征向量旋转，然后缩放特征向量倍就可以了，可以得到以下的结果：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/scale_learning/scale3.png" alt="scale3"></p><p>离群点就被成功分离，这时候的欧式距离就是马氏距离。</p><h1 id="马氏距离的推导"><a href="#马氏距离的推导" class="headerlink" title="马氏距离的推导"></a>马氏距离的推导</h1><p>首先要对数据点进行旋转，旋转至主成分，维度间线性无关，假设新的坐标为</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/scale_learning/F.png" alt="F"></p><p>又变换后维度间线性无关且每个维度自己的方差为特征值，所以满足：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/scale_learning/sigma.png" alt="sigma"></p><p>马氏距离是旋转变换缩放之后的欧式距离，所以马氏距离的计算公式为：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/scale_learning/MD.png" alt="MD"></p><p>这就是之前提到的马氏距离的公式</p><h1 id="马氏距离的问题"><a href="#马氏距离的问题" class="headerlink" title="马氏距离的问题"></a>马氏距离的问题</h1><ul><li><p>协方差矩阵必须满秩</p><p>里面有求逆矩阵的过程，不满秩不行，要求数据要有原维度个特征值，如果没有可以考虑先进行PCA，这种情况下PCA不会损失信息</p></li><li><p>不能处理非线性流形(manifold)上的问题</p><p>只对线性空间有效，如果要处理流形，只能在局部定义，可以用来建立KNN图</p></li></ul>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/04/18/Mahalanobis/#disqus_thread</comments>
    </item>
    
    <item>
      <title>word2vec词嵌入方法</title>
      <link>https://www.ph0en1x.space/2018/04/10/word2vec/</link>
      <guid>https://www.ph0en1x.space/2018/04/10/word2vec/</guid>
      <pubDate>Mon, 09 Apr 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; word2vec模型与应用由Mikolov等人在自然语言领域具有很高的影响，它在语言模型进行学习前先找寻到一种合适的编码方式，这种编码方式叫作&lt;strong&gt;词嵌入(Word Embedding)&lt;/strong&gt;; 本片笔记属于原理介绍，没有实现细节的代码讲解&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> word2vec模型与应用由Mikolov等人在自然语言领域具有很高的影响，它在语言模型进行学习前先找寻到一种合适的编码方式，这种编码方式叫作<strong>词嵌入(Word Embedding)</strong>; 本片笔记属于原理介绍，没有实现细节的代码讲解</p></blockquote><a id="more"></a><h2 id="One-hot编码"><a href="#One-hot编码" class="headerlink" title="One-hot编码"></a>One-hot编码</h2><p>嵌入前通常会使用 one-hot编码方式，这种编码方式每个词都会单独的占一位，该位为1则表示这个词出现，例如但前语料中一共有5个词，那么它们就分别表示为<code>10000</code>，<code>01000</code>，<code>00100</code>，<code>00010</code>，<code>00001</code>。</p><p>显然，这是一种极不高效的编码方式，既需要极大的空间用于存储，也不能从词向量中获得有用的词之间的语义关系，这也就是为什么需要词嵌入技术的原因。</p><h2 id="Why-word2vec"><a href="#Why-word2vec" class="headerlink" title="Why word2vec?"></a>Why word2vec?</h2><p>为什么Word2Vec方法受到如此多的注意，以至于对现在的自然语言处理产生了极大的影响？</p><p>总结了一下Word2Vec的几个特点：</p><ul><li><p>快，以往的词嵌入得到的词向量仅仅只是一个副产物，而w2v则针对词嵌入提出了各种模型以及相应的优化算法(后面会提到的)</p></li><li><p>语义上相近的词向量相似度上也比较接近</p></li><li><p>这点是最神奇的，虽然不知道为什么，w2v得到的词向量竟然满足语义上的加减法！！！比如<code>Madrid</code>-<code>Spain</code>+<code>France</code>=<code>Paris</code>;   <code>king</code>-<code>man</code>+<code>women</code>=<code>queen</code>; (⊙ω⊙)!</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/paris.png" alt="paris"></p></li></ul><p>此外w2v还拥有两种模式<code>Skip-gram</code>与<code>CBOW</code>，而每种模式下都有两种优化的实现方法<code>Hierarchical Softmax</code>, <code>Negative Sampling</code></p><h2 id="Skip-gram"><a href="#Skip-gram" class="headerlink" title="Skip-gram"></a>Skip-gram</h2><p>第一种模式是Skip-gram模式，根据一个词推测出其最有可能的上下文(Context)，其结构图如下：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/skip-gram.png" alt="skip-gram"></p><p><strong>步骤</strong></p><ul><li>输入One-hot编码，每个词向量现在都是V维的，V就是语料中词汇的总数</li><li>乘上字典矩阵W<sub>V*N</sub>，变成一个N维向量。N就是嵌入后的词向量维数</li><li>乘上字典矩阵W’<sub>N*V</sub>，相当于求距离，然后再求一个Softmax，变成一个V维向量。每一位其实都代表改为one-hot编码的词出现的概率</li></ul><h2 id="CBOW"><a href="#CBOW" class="headerlink" title="CBOW"></a>CBOW</h2><p>CBOW(Continuous Bag-of-Words)，是另外一种Word2Vec的模式，用于根据上下文推测出空缺的词的方法，其结构示意图如下：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/cbow.png" alt="cbow"></p><p><strong>步骤</strong></p><ul><li><p>输入上下文C个词的One-hot编码</p></li><li><p>乘上字典矩阵W<sub>V*N</sub>，得到各自的N维编码</p></li><li><p>取它们的平均值</p></li><li><p>乘上字典矩阵W’<sub>N*V</sub>，相当于求与其他词之间的距离，然后取Softmax，变成一个V维向量，每位代表的还是这个位上one-hot编码的那个词的概率，选最大的那个</p><p>​</p></li></ul><h2 id="Hierarchical-Sotfmax"><a href="#Hierarchical-Sotfmax" class="headerlink" title="Hierarchical Sotfmax"></a>Hierarchical Sotfmax</h2><p>上面说的就是Word2Vec的基本思想了，但是呢，当语料非常庞大的时候，求Softmax</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/softmax.png" alt="softmax"></p><p>开销就会变得异常的大，其中一种解决方法就是使用层次Softmax(Hierarchical Sotfmax)来将Softmax的概率转化为一个多次二分类问题。</p><p>层级Softmax函数使用的数据结构是以词频作为权重构造的霍夫曼树(Huffman Tree)，这样做的好处是词频大的词只需要更少的遍历就可以找到</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/Huffman_Tree.png" alt="Huffman_Tree"></p><p>叶子节点为V个语料中的词，而非叶子节点也有一个向量v，代表一次选择，即每走一步都需要确定下一步是要走到左孩子节点还是右孩子节点，原来的Softmax概率就被写成</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/hierarchical_softmax.png" alt="hierarchical_softmax"></p><p>σ(*)是Sigmoid函数，双竖线中括号表示若选择左孩子则为1，右孩子则为-1，在sigmoid中正好正负样例两者 相加等1。最后就是非叶子节点向量与词向量的内积。训练时同时考虑词的嵌入向量训练和霍夫曼树上非叶子节点的参数。</p><ul><li>与CBOW配合，将叠加以后的嵌入向量作为霍夫曼树的输入，去寻找原中心词，并以此过程优化霍夫曼树与词向量;</li><li>与Skip-Gram配合，将目标词汇一个个作为霍夫曼树的输入 ，去寻找原中心词，并以此过程优化霍夫曼树与词向量;</li></ul><h2 id="Negative-Sampling"><a href="#Negative-Sampling" class="headerlink" title="Negative Sampling"></a>Negative Sampling</h2><p>在此前的<a href="https://www.ph0en1x.space/2018/03/23/largevis/">LargeVis–LINE在高维数据降维与可视化上的运用</a>中已经提到了Negative Sampling，实际上，在Word2Vec后，负采样技术在运用上比层级Softmax更加的广泛。</p><p>做法也与LargeVis相似，即使得正样本出现的概率最大，负样本出现的概率减小，那么如何取负样本呢？</p><p>将所有的词按照词频的3/4次方为正比进行采样作为负样本，即满足概率：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/negative_sampling.png" alt="negative_sampling"></p><p>按照这个概率取得负样本(若取到中心词本身则重新进行采样)用于替换中心词，与原中心词的Context组成一组<strong>负样本</strong>，只要取几个词就可已完成负采样。按照原文的话说，当数据集比较小的时候，5-20个负样本; 当数据集比较大的时候，只需要2-5个就可以了。</p><p>负采样的目标函数为：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/negative_object.png" alt="negative_object"></p><h2 id="高频词子采样"><a href="#高频词子采样" class="headerlink" title="高频词子采样"></a>高频词子采样</h2><p>语料中总是有很多类似于”a” “the” “in”这样的词，这些词被认为不会提供太多有用的信息，因为它们几乎会出现在所有的词的context中。所以对于这些词我们进行子采样(Subsampling)来进行过滤。Mikolov的原文中采用的下采样公式是</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/subsampling.png" alt="subsampling"></p><p>P是每个词被删除的概率，t是一个认为定的阈值，大约在10<sup>-5</sup>左右，f是词频。这样一来，稀有的词就能得到保留，而频繁出现的词却会被大面积的删除，但总体词频的顺序不变，达成下采样的目的。</p><h2 id="Tensorflow实现"><a href="#Tensorflow实现" class="headerlink" title="Tensorflow实现"></a>Tensorflow实现</h2><p><a href="https://github.com/Ph0en1xGSeek/Deep_Learning_Tensorflow/tree/master/Word2Vec" target="_blank" rel="noopener">负采样Skip-gram word2vec Tensorflow封装实现</a></p><p><a href="https://github.com/tmikolov/word2vec" target="_blank" rel="noopener">作者源码</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf" target="_blank" rel="noopener">Distributed Representations of Words and Phrases and their Compositionality</a></p><p><a href="https://arxiv.org/pdf/1411.2738.pdf" target="_blank" rel="noopener">word2vec Parameter Learning Explained</a></p><p><a href="https://blog.csdn.net/itplus/article/details/37969519" target="_blank" rel="noopener">Word2Vec中的数学原理</a></p><blockquote><p> <a href="http://www.cnblogs.com/pinard/p/7160330.html" target="_blank" rel="noopener">Word2Vec原理</a></p><p> <a href="http://www.cnblogs.com/downtjs/p/3784440.html" target="_blank" rel="noopener">深度学习word2vec笔记之算法篇</a></p></blockquote>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/04/10/word2vec/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在Ubuntu下安装gsl科学计算库</title>
      <link>https://www.ph0en1x.space/2018/04/03/ubuntu_gsl/</link>
      <guid>https://www.ph0en1x.space/2018/04/03/ubuntu_gsl/</guid>
      <pubDate>Mon, 02 Apr 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;GSL是GNU的科学计算库(GNU Scientific Library)，是用于C++的开源科学计算库&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>GSL是GNU的科学计算库(GNU Scientific Library)，是用于C++的开源科学计算库</p></blockquote><a id="more"></a><ol><li><p>下载最新版本GSL</p><p><a href="http://www.gnu.org/software/gsl/" target="_blank" rel="noopener">http://www.gnu.org/software/gsl/</a></p></li><li><p>解压后进入目录下，然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>将会自动将lib与头文件安装到<code>/usr/local/lib</code>和<code>/usr/local/include</code> 下面，过程中可能会出现权限上的问题，sudo就行。之后就可以使用GSL了;</p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/04/03/ubuntu_gsl/#disqus_thread</comments>
    </item>
    
    <item>
      <title>训练集(train set)验证集(validation set)测试集(test set)与交叉验证法(Cross Validation)</title>
      <link>https://www.ph0en1x.space/2018/04/01/cross_validation/</link>
      <guid>https://www.ph0en1x.space/2018/04/01/cross_validation/</guid>
      <pubDate>Sat, 31 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 这三种数据集合非常容易弄混，特别是验证集和测试集，这篇笔记写下我对它们三个的理解以及在实践中是如何进行划分的。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 这三种数据集合非常容易弄混，特别是验证集和测试集，这篇笔记写下我对它们三个的理解以及在实践中是如何进行划分的。</p></blockquote><a id="more"></a><h2 id="训练集"><a href="#训练集" class="headerlink" title="训练集"></a>训练集</h2><p>这个是最好理解的，用来训练模型内参数的数据集，Classfier直接根据训练集来调整自身获得更好的分类效果</p><h2 id="验证集"><a href="#验证集" class="headerlink" title="验证集"></a>验证集</h2><p>​    用于在训练过程中检验模型的状态，收敛情况。验证集通常用于调整超参数，根据几组模型验证集上的表现决定哪组超参数拥有最好的性能。</p><p>​    同时验证集在训练过程中还可以用来监控模型是否发生过拟合，一般来说验证集表现稳定后，若继续训练，训练集表现还会继续上升，但是验证集会出现不升反降的情况，这样一般就发生了过拟合。所以验证集也用来判断何时停止训练</p><h2 id="测试集"><a href="#测试集" class="headerlink" title="测试集"></a>测试集</h2><p>测试集用来评价模型泛化能力，即之前模型使用验证集确定了超参数，使用训练集调整了参数，最后使用一个从没有见过的数据集来判断这个模型是否Work。</p><h2 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h2><p>形象上来说<strong>训练集</strong>就像是学生的课本，学生 根据课本里的内容来掌握知识，<strong>验证集</strong>就像是作业，通过作业可以知道 不同学生学习情况、进步的速度快慢，而最终的<strong>测试集</strong>就像是考试，考的题是平常都没有见过，考察学生举一反三的能力。</p><h2 id="为什么要测试集"><a href="#为什么要测试集" class="headerlink" title="为什么要测试集"></a>为什么要测试集</h2><p>训练集直接参与了模型调慘的过程，显然不能用来反映模型真实的能力，这样一些 对课本死记硬背的学生(过拟合)将会拥有最好的成绩，显然不对。同理，由于验证集参与了人工调参(超参数)的过程，也不能用来最终评判一个模型，就像刷题库的学生也不能算是学习好的学生是吧。所以要通过最终的考试(测试集)来考察一个学(模)生(型)真正的能力。</p><p>但是仅凭一次考试就对模型的好坏进行评判显然是不合理的，所以接下来就要介绍<strong>交叉验证法</strong></p><h2 id="交叉验证法"><a href="#交叉验证法" class="headerlink" title="交叉验证法"></a>交叉验证法</h2><p>交叉验证法的作用就是尝试利用不同的训练集/测试集划分来对模型做多组不同的训练/测试，来应对单词测试结果过于片面以及训练数据不足的问题。</p><p>交叉验证的做法就是将数据集粗略地分为比较均等不相交的k份，即</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/D.png" alt="D"></p><p>然后取其中的一份进行测试，另外的k-1份进行训练，然后求得error的平均值作为最终的评价，具体算法流程西瓜书中的插图如下：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/machine_learning/cross_validation.png" alt="cross_validation"></p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/04/01/cross_validation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在Ubuntu下一些常用软件安装</title>
      <link>https://www.ph0en1x.space/2018/03/28/ubuntu_env/</link>
      <guid>https://www.ph0en1x.space/2018/03/28/ubuntu_env/</guid>
      <pubDate>Tue, 27 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;安装完Ubuntu后常用软件和环境的安装，之前写过一点，在这里做补充，Chrome，Typora，Anaconda，调节双系统时间，Sublime，nodejs等&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>安装完Ubuntu后常用软件和环境的安装，之前写过一点，在这里做补充，Chrome，Typora，Anaconda，调节双系统时间，Sublime，nodejs等</p></blockquote><a id="more"></a><h2 id="1-Chrome"><a href="#1-Chrome" class="headerlink" title="1. Chrome"></a>1. Chrome</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo wget http://www.linuxidc.com/files/repo/google-chrome.list -P /etc/apt/sources.list.d/</span><br><span class="line"></span><br><span class="line">wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure><h2 id="2-Typora"><a href="#2-Typora" class="headerlink" title="2. Typora"></a>2. Typora</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># optional, but recommended</span></span><br><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class="line"></span><br><span class="line"><span class="comment"># add Typora's repository</span></span><br><span class="line">sudo add-apt-repository <span class="string">'deb https://typora.io ./linux/'</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># install typora</span></span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure><h2 id="3-Anaconda"><a href="#3-Anaconda" class="headerlink" title="3. Anaconda"></a>3. Anaconda</h2><p>到<a href="https://www.anaconda.com/download/#linux" target="_blank" rel="noopener">官网</a>下载最新anaconda的安装包</p><p>下载后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda...</span><br></pre></td></tr></table></figure><p>按照提示一步步确定安装位置</p><h2 id="4-调节双系统时间"><a href="#4-调节双系统时间" class="headerlink" title="4. 调节双系统时间"></a>4. 调节双系统时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-local-rtc 1 --adjust-system-clock</span><br><span class="line">timedatectl <span class="built_in">set</span>-ntp 0</span><br></pre></td></tr></table></figure><h2 id="5-Sublime"><a href="#5-Sublime" class="headerlink" title="5. Sublime"></a>5. Sublime</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/sublime-text-3</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sublime-text-installer</span><br></pre></td></tr></table></figure><h2 id="6-nodejs"><a href="#6-nodejs" class="headerlink" title="6. nodejs"></a>6. nodejs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt install nodejs-legacy</span><br><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure><h2 id="7-Mysql"><a href="#7-Mysql" class="headerlink" title="7. Mysql"></a>7. Mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br><span class="line">sudo apt install mysql-client</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h2 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h2><p><a href="https://www.ph0en1x.space/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">https://www.ph0en1x.space/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</a></p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/28/ubuntu_env/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LargeVis--LINE在高维数据降维与可视化上的运用</title>
      <link>https://www.ph0en1x.space/2018/03/23/largevis/</link>
      <guid>https://www.ph0en1x.space/2018/03/23/largevis/</guid>
      <pubDate>Thu, 22 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; LargeVis是唐建在2016年提出的高维数据降维可视化算法，主要工作是大大降低了t-SNE算法的计算复杂度，使算法能够更高的效率处理更大规模的数据。主要使用的优化方法是改进的随机投影树KNN图构造方法以及、与Word2Vec类似的采样与负采样方法以及随机梯度下降算法；在距离的映射方面仍然采用了与t-SNE一样的高斯分布——T分布的策略&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> LargeVis是唐建在2016年提出的高维数据降维可视化算法，主要工作是大大降低了t-SNE算法的计算复杂度，使算法能够更高的效率处理更大规模的数据。主要使用的优化方法是改进的随机投影树KNN图构造方法以及、与Word2Vec类似的采样与负采样方法以及随机梯度下降算法；在距离的映射方面仍然采用了与t-SNE一样的高斯分布——T分布的策略</p></blockquote><a id="more"></a><ol><li><p>高效KNN图构造方法</p><p>构造精确的KNN图在计算复杂度上是非常高的，需要计算两两点之间的距离，这需要O(N<sup>2</sup>d)的复杂度。在t-SNE的后续工作中已经意识到了这个问题，于是Maaten提出了各种<strong>随机投影树</strong>的算法，详细的算法将在其他的笔记中详细的记录，大致上就是对空间上进行划分直到同一区间内的点少于一个阈值，最后被分在同一块区域中的数据点就被认为是NN。这样来确定近邻效率高了不少，但是为了保证KNN图的精确率，仍然需要创建许多的投影树，这样还是十分影响效率。于是LargeVis中运用了一种叫<strong>邻居搜索</strong>的方法，主要思想就是“邻居的邻居也是我的邻居”。</p><p>首先创建少量的随机投影树先粗略估计KNN，为每个节点维护一个最大堆，然后搜索图每个节点邻居的邻居，这些节点也有可能成为最近邻的候选，与原节点的最大堆比较，若比它小则push若是堆内的节点数超过K，就pop。我们可以多迭代几次来提升图的精确度，实践中只要少量的迭代就可以让精确度接近100%。下图展示了LargeVis构建KNN图的算法流程：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/largevis.PNG" alt="largevis"></p><p>​</p><p>​</p></li><li><p>图可视化</p><p>在定义好KNN图后，LargeVis同样也需要像t-SNE那样的从高维到低维的映射。</p><p>LargeVis在映射的过程中仅保留了KNN边的权重，这些边被称作是正边，而不直接相邻的节点之间称作为负边。正边的边权同t-SNE中定义相同，使用高斯分布进行映射：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/largevis_p.png" alt="largevis_p"></p><p>而在低维，则依靠观测的概率来决定低维的坐标：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/probability.png" alt="probability"></p><p>其中f(.)是距离函数，可以使用t分布等距离越小数值越大的函数来做映射，就是高维当中越接近的点，低维当中也要更加的接近。所以最终的优化目标函数：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/object.png" alt="object"></p><p>其中两个E是正边集与负边集。</p></li><li><p>优化</p><p>​    直接按照上述目标函数进行优化开销是很大的，因为负边的数量是非常大的，直接对所有负边进行训练又要造成复杂度的上升。所以这里就要采用负采样算法进行优化。</p><p>负采样算法根据对应节点的<code>度</code>来决定被采样到的概率，即度越大的节点被当作负边的另一个节点的概率越大，概率满足噪声分布</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/negative.png" alt="negative"></p><p>这样一来，目标函数就变成了：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/negative_object.png" alt="negative_object"></p><p>​    这样一来，目标函数就得到确定，但是，如果直接使用边的权重进行训练，权重直接乘到梯度中，不同边的权重不同，会对梯度造成很大的影响，权重较大的边受到的变动步长也较大，会影响训练过程。所以这里要用到LINE技术，将带权边看作w<sub>ij</sub>条单位边，这样一来就可以直接对所有的正边进行采样，对目标函数也没有改变</p><p>​    此外就是异步随机梯度下降算法，因为构建的KNN图非常的稀疏，同时对几个点进行梯度下降，一般不会重叠产生冲突，这样就能大大提高训练效率</p></li><li><p>结果</p><p>LargeVis的结果还是很接近tsne的，而且处理速度能快不少(没有用官方给的MNIST数据集，所以和他们给的结果不大一样)。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/largevis_result.png" alt="largevis_result"></p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/23/largevis/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring Boot项目中Tomcat端口号的更改</title>
      <link>https://www.ph0en1x.space/2018/03/20/spring_boot_tomcat_port/</link>
      <guid>https://www.ph0en1x.space/2018/03/20/spring_boot_tomcat_port/</guid>
      <pubDate>Mon, 19 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;使用IntelliJ Idea开发Spring Boot项目时，Idea会使用内置的Tomcat服务器，默认情况下使用的端口号的8080，本篇笔记记录如何修改内置Tomcat服务器使用的端口号&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>使用IntelliJ Idea开发Spring Boot项目时，Idea会使用内置的Tomcat服务器，默认情况下使用的端口号的8080，本篇笔记记录如何修改内置Tomcat服务器使用的端口号</p></blockquote><a id="more"></a><ol><li><p>在<code>run</code>选项下或者工具栏运行中选择<code>Edit Configurations</code></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/edit_configuration.png" alt="edit_configuration"></p></li><li><p>在打开的界面中的<code>Override parameters</code>选项下加入如下的选项，假设要把端口号改成8888</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/adding.png" alt="adding"></p></li><li><p>如果是在Eclipse下配置，则可以加入一条<code>-Dserver.port=8888</code></p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/20/spring_boot_tomcat_port/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用IDEA快速搭建Spring Boot应用</title>
      <link>https://www.ph0en1x.space/2018/03/18/spring_boot/</link>
      <guid>https://www.ph0en1x.space/2018/03/18/spring_boot/</guid>
      <pubDate>Sat, 17 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;使用IntelliJ Idea创建Spring Boot项目并运行简单实例&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>使用IntelliJ Idea创建Spring Boot项目并运行简单实例</p></blockquote><a id="more"></a><ol><li><p>新建项目File -&gt; New -&gt; Project</p></li><li><p>选择Maven项目(这篇笔记里不选Spring)，然后一路Next</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/maven.png" alt="maven"></p></li><li><p>在<code>pom.xml</code>里添加如下内容后，等待maven import的完成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>版本可以根据<a href="https://projects.spring.io/spring-boot/" target="_blank" rel="noopener">Spring Boot主页</a>里的引导来进行选择</p></li><li><p>在<code>/src/main/java</code>下新建Java Class，命名为<code>MainController.java</code>，写入如下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function">String <span class="title">home</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        System.out.println(input);</span><br><span class="line">        <span class="keyword">return</span> input.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpringApplication.run(MainController.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码执行后，将会监听url后的<code>/</code>根目录，接到<code>input</code>变量然后转成大写字母进行返回</p></li><li><p>写好后运行<code>MainController</code>Spring Boot就可以启动了</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/spring_boot_run.png" alt="spring_boot_run"></p></li><li><p>打开浏览器，输入<code>localhost:8080/?input=abc</code>，(默认情况下Idea内置的端口占用的是8080端口，由于我别的程序需要使用，所以我改成了8888端口，后面也会有笔记说明如何更改)</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/spring_boot_return.png" alt="spring_boot_return"></p><p>上面使用了<code>GET</code>请求将参数<code>input=abc</code>发送给服务器，返回了字符串<code>ABC</code></p></li></ol><p>这只是最简单的Spring Boot应用的配置，去掉<code>@ResponseBody</code>annotation，Spring Boot还可以直接返回一个html页面，具体的其他内容后面会有笔记。</p><p><a href="https://github.com/Ph0en1xGSeek/Search_Engine" target="_blank" rel="noopener">这里</a>有一个我使用Spring-Boot搭建的<strong>文档搜索引擎</strong>，使用<strong>Solr</strong>作为搜索内核，支持各种md、pdf、txt、xml文档的爬取。</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/18/spring_boot/#disqus_thread</comments>
    </item>
    
    <item>
      <title>t-SNE高维数据降维与可视化</title>
      <link>https://www.ph0en1x.space/2018/03/15/tsne/</link>
      <guid>https://www.ph0en1x.space/2018/03/15/tsne/</guid>
      <pubDate>Wed, 14 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; t-SNE(基于t分布的随机近邻嵌入，t-distributed stochastic neighbor embedding)，是Laurens van der Maaten大神在Geffory Hinton大神的SNE基础上加入t分布而形成的，是目前效果最好的可视化降维算法，可以将高维数据内部的特征放大，使得相似的数据在低维中能更加接近，不相似的数据在低维中距离更远。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> t-SNE(基于t分布的随机近邻嵌入，t-distributed stochastic neighbor embedding)，是Laurens van der Maaten大神在Geffory Hinton大神的SNE基础上加入t分布而形成的，是目前效果最好的可视化降维算法，可以将高维数据内部的特征放大，使得相似的数据在低维中能更加接近，不相似的数据在低维中距离更远。</p></blockquote><a id="more"></a><h2 id="一、SNE"><a href="#一、SNE" class="headerlink" title="一、SNE"></a>一、SNE</h2><p>​    SNE由Hinton大神在2003年提出，它提出的目的就是为了改进MDS与ISOPMAP寻求距离完全按照原有维度内的问题，转而满足高低维之间满足分布上的统一。虽然这样会导致距离信息有了一定程度的丢失，但是这么做保留了距离的分布，获得更好的可视化效果。</p><p>​    SNE需要通过训练使得高维与低维的距离的高斯分布尽量的接近，即：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/SNE.png" alt="SNE"></p><p>​    满足高维的点在p中的值与低维的q中的值能够尽量接近，cost函数采用KL散度：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/KL.png" alt="KL"></p><p>​    采用动量优化的方式进行训练</p><h2 id="二、Symmetric-SNE"><a href="#二、Symmetric-SNE" class="headerlink" title="二、Symmetric SNE"></a>二、Symmetric SNE</h2><p>​    传统的SNE的分布映射方法不具有对称性，即p<sub>i|j</sub>与p<sub>j|i</sub>不相等，所以可以将映射方式改成联合概率分布的方式：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/symmetric.png" alt="symmetric"></p><p>​    但是高维中的离群点的cost就会很低，因为它离所有点的距离都非常的远，p非常小，所以，可以把p改写成</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/p.png" alt="p"></p><p>​    这样cost的值就改写为：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/KL2.png" alt="KL2"></p><h2 id="三、t-SNE"><a href="#三、t-SNE" class="headerlink" title="三、t-SNE"></a>三、t-SNE</h2><p>​    之前所说的各种算法中，都会产生拥挤问题，所谓拥挤问题就是高维数据中的距离关系不能完整地在低维空间中得以保留，10维中可以有11个点相互等距，而二维空间中最多就只能有3个点组成等边三角形，这样的降维肯定不能够保证距离的保留。同时可以参考<a href="http://bindog.github.io/blog/2016/06/04/from-sne-to-tsne-to-largevis/" target="_blank" rel="noopener">这篇博客</a>中的实验，同样是均匀分布会发现高维空间中均匀分布的点中距离分布也是很不均匀的，随着维度的增大，距离越远的点的比重会越来越大。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/crowding.png" alt="crowding"></p><p>所以，如果不设法减轻这种拥挤问题，那么就会出现高维空间中距离较远与较近的点，在低维中的距离相同的问题，使得类与类之间分不开。为解决拥挤问，T分布就能够一展神通。</p><p>T分布具有长尾的特性，即碰到有离群点时，不会因为离群点使整个分布脱离原有的大部分数据，同时，低维数据使用T分布映射而高维数据使用正态分布作为映射，如下图：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/t.png" alt="t"></p><p>在高维空间中较近的点在低维空间中将会更近，而较远的点将会更远，这样就能有效缓解拥挤问题，tsne的公式为</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/tsne.png" alt="tsne"></p><p>tsne结果：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/tsne/result.gif" alt="result"></p><p><a href="https://github.com/Ph0en1xGSeek/Machine_Learning/blob/master/tsne_python/tsne_python/tsne.py" target="_blank" rel="noopener">tsne代码</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Maaten L, Hinton G. Visualizing data using t-SNE[J]. Journal of machine learning research, 2008, 9(Nov): 2579-2605.</li><li>Hinton G E, Roweis S T. Stochastic neighbor embedding[C]//Advances in neural information processing systems. 2003: 857-864.</li></ul>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/15/tsne/#disqus_thread</comments>
    </item>
    
    <item>
      <title>多维缩放(MDS)</title>
      <link>https://www.ph0en1x.space/2018/03/11/MDS/</link>
      <guid>https://www.ph0en1x.space/2018/03/11/MDS/</guid>
      <pubDate>Sat, 10 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 多维缩放(multidimensional scaling ,MDS)，是另外一种线性降维方式，与主成分分析法和线性降维分析法都不同的是，多维缩放的目标不是保留数据的最大可分性，而是更加关注与高维数据内部的特征。多维缩放算法集中于保留高维空间中的“相似度”信息，而在一般的问题解决的过程中，这个“相似度”通常用欧式距离来定义。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 多维缩放(multidimensional scaling ,MDS)，是另外一种线性降维方式，与主成分分析法和线性降维分析法都不同的是，多维缩放的目标不是保留数据的最大可分性，而是更加关注与高维数据内部的特征。多维缩放算法集中于保留高维空间中的“相似度”信息，而在一般的问题解决的过程中，这个“相似度”通常用欧式距离来定义。</p></blockquote><a id="more"></a><p>假设<strong>D</strong>为<strong>m</strong>个样本在高维空间中的距离矩阵，dist<sub>ij</sub>为第i个样本与第j个样本的欧式距离</p><p><strong>Z</strong>是样本在低维中映射的表示，那么，多维缩放的降维目标就是要保证：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/target.PNG" alt="target"></p><p>令<strong>B</strong>=Z<sup>T</sup>Z，B为降维后样本的内积矩阵，b<sub>ij</sub>=z<sub>i</sub><sup>T</sup>z<sub>j</sub></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/eq1.PNG" alt="eq1"></p><p>规定降维后的样本为中心化样本，因为只保留了距离信息，无论结果怎么旋转、平移都可以，即</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/z1.PNG" alt="z1"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/z2.PNG" alt="z2"></p><p>那么</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/eq2.PNG" alt="eq2"></p><p>令</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/eq3.PNG" alt="eq3"></p><p>综合以上各式，得到</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/eq4.PNG" alt="eq4"></p><p>所以可以使用距离矩阵<strong>D</strong>来求得内积矩阵<strong>B</strong>，</p><p>为了完成降维，可以将<strong>B</strong>进行特征值分解</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/b.PNG" alt="b"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/A.PNG" alt="A"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/result.png" alt="result"></p><p>仅保留最大的前d’个特征值以及相应的特征向量，就可以得出降维后的结果</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/result2.png" alt="result2"></p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/11/MDS/#disqus_thread</comments>
    </item>
    
    <item>
      <title>等度量映射(ISOMAP)</title>
      <link>https://www.ph0en1x.space/2018/03/11/Isomap/</link>
      <guid>https://www.ph0en1x.space/2018/03/11/Isomap/</guid>
      <pubDate>Sat, 10 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 等度量映射(Isomap)是最经典的非线性映射降维方法之一，它在MDS的基础上引入了“测地距离”的概念，直接解决了MDS使用欧氏距离无法应对非线性流形的问题。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 等度量映射(Isomap)是最经典的非线性映射降维方法之一，它在MDS的基础上引入了“测地距离”的概念，直接解决了MDS使用欧氏距离无法应对非线性流形的问题。</p></blockquote><a id="more"></a><p>测地距离(Geometric Distance)是高维流形中两点之间的最短距离，高维流形中，空间是不规则的，所以最短距离不一定是直线距离(欧氏距离)。就像蚂蚁从立方体的一面爬到另一面，不能直接横穿立方体一样。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/isomap.PNG" alt="isomap"></p><p>上图最左边的图中两个点的最近距离应该是蓝色实线的距离，而不应该是虚线的距离。</p><p>真实的测地距离是非常难以求出的，Isomap基于流形<code>局部近似于欧式空间</code>的定义提出了一种近似的求解方式</p><ul><li>求得原样本的KNN图，并依据定义保留其欧式距离</li><li>所有非KNN的点间的距离规定为无穷大</li><li>用dijkstra或floyd求出任意两点的最短路便可近似表示两点间的测地距离</li></ul><p>最后Isomap将得到的测地距离矩阵输入<a href="https://www.ph0en1x.space/2018/03/11/MDS/">MDS</a>完成降维;</p><p>感受下效果</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/MDS/isomap_result.PNG" alt="isomap_result"></p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/11/Isomap/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jetbrain IDE插件开发入门</title>
      <link>https://www.ph0en1x.space/2018/03/10/jetbrain_plugin/</link>
      <guid>https://www.ph0en1x.space/2018/03/10/jetbrain_plugin/</guid>
      <pubDate>Fri, 09 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; Jetbrain号称IDE界的Adobe，各个平台、各个环境下的IDE无论从易用性还是外观上都是十分优秀的，这份笔记将会记录如何在JetBrains中编写简单的插件。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> Jetbrain号称IDE界的Adobe，各个平台、各个环境下的IDE无论从易用性还是外观上都是十分优秀的，这份笔记将会记录如何在JetBrains中编写简单的插件。</p></blockquote><a id="more"></a><h2 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h2><ol><li><p>安装JetBrains IDEA</p></li><li><p>新建项目，选择<code>IntelliJ Platform Plugin</code>，这里我们选择开发IDEA的插件，所以Project SDK选择IDEA的安装目录</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/create.png" alt="create"></p></li></ol><h2 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h2><ol><li><p>创建好项目后，打开<code>resources</code>目录下的<code>plugins.xml</code>，在这里我们要注册我们的插件</p><p>加一条<code>&lt;depends&gt;com.intellij.modules.platform&lt;/depends&gt;</code>，后面打包的时候需要</p><p>在<code>&lt;actions&gt;</code>中注册自己的插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">idea-plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>com.ph0en1x.Registration<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Jetbrain Plugin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vendor</span> <span class="attr">email</span>=<span class="string">"support@yourcompany.com"</span> <span class="attr">url</span>=<span class="string">"https://www.ph0en1x.space"</span>&gt;</span>Ph0en1x Notebook<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">      Jetbrain Plugin Demo</span><br><span class="line">    ]]&gt;<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">change-notes</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">      Add change notes here.&lt;br&gt;</span><br><span class="line">      &lt;em&gt;most HTML tags may be used&lt;/em&gt;</span><br><span class="line">    ]]&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">change-notes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">idea-version</span> <span class="attr">since-build</span>=<span class="string">"173.0"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html</span></span><br><span class="line"><span class="comment">       on how to target different products --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- uncomment to enable plugin in all products</span></span><br><span class="line"><span class="comment">  &lt;depends&gt;com.intellij.modules.lang&lt;/depends&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">depends</span>&gt;</span>com.intellij.modules.platform<span class="tag">&lt;/<span class="name">depends</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;application-components&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;component&gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;implementation-class&gt;com.ph0en1x.Registration&lt;/implementation-class&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/component&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;/application-components&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">extensions</span> <span class="attr">defaultExtensionNs</span>=<span class="string">"com.intellij"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Add your extensions here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">actions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Add your actions here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">id</span>=<span class="string">"HelloWorld"</span> <span class="attr">text</span>=<span class="string">"Ph0en1x Menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add-to-group</span> <span class="attr">group-id</span>=<span class="string">"MainMenu"</span> <span class="attr">anchor</span>=<span class="string">"last"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">class</span>=<span class="string">"com.ph0en1x.MenuAction"</span> <span class="attr">id</span>=<span class="string">"menuAction1"</span> <span class="attr">text</span>=<span class="string">"显示对话框"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add-to-group</span> <span class="attr">group-id</span>=<span class="string">"HelloWorld"</span> <span class="attr">anchor</span>=<span class="string">"first"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">class</span>=<span class="string">"com.ph0en1x.MenuAction2"</span> <span class="attr">id</span>=<span class="string">"menuAction2"</span> <span class="attr">text</span>=<span class="string">"在Help里"</span> <span class="attr">description</span>=<span class="string">"A simple IDEA plugin."</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add-to-group</span> <span class="attr">group-id</span>=<span class="string">"HelpMenu"</span> <span class="attr">anchor</span>=<span class="string">"last"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">actions</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">idea-plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我这里注册了两个插件，第一个插件在一个新建的选项<code>&lt;group&gt;</code>下面，新建选项显示的文字是<code>显示对话框</code></p><p><code>class</code>：插件入口类</p><p><code>id</code>：唯一标识插件</p><p><code>text</code>：选项显示的文字</p><p><code>description</code>：状态栏显示的文字</p><p><code>icon</code>：显示的图标（这里我没加）</p><p><code>add-to-group</code>：表示要添加到哪个选项下面</p><p><code>anchor</code>：插入选项的位置</p></li><li><p>实现Action</p><p>在<code>src</code>目录下创建与之前定义的相应的入口类，入口类要继承于<code>com.intellij.openapi.actionSystem.AnAction</code></p><p><code>com.ph0en1x.MenuAction</code> 实现点击后显示一个对话框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ph0en1x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.actionSystem.AnAction;</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.actionSystem.AnActionEvent;</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.ui.Messages;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuAction</span> <span class="keyword">extends</span> <span class="title">AnAction</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(AnActionEvent anActionEvent)</span> </span>&#123;</span><br><span class="line">        Messages.showInfoMessage(<span class="string">"Show some message"</span>, <span class="string">"This is title"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>com.ph0en1x.MenuAction2</code>实现点击后显示一个对话框询问姓名，输入姓名后弹出欢迎界面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ph0en1x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.actionSystem.AnAction;</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.actionSystem.AnActionEvent;</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.project.Project;</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.ui.Messages;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuAction2</span> <span class="keyword">extends</span> <span class="title">AnAction</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(AnActionEvent anActionEvent)</span> </span>&#123;</span><br><span class="line">        Project project = anActionEvent.getProject();</span><br><span class="line">        String name = Messages.showInputDialog(project, <span class="string">"What's your name?"</span>, <span class="string">"This is title"</span>, Messages.getQuestionIcon());</span><br><span class="line">        Messages.showMessageDialog(project, <span class="string">"Hello "</span> + name + <span class="string">"!"</span>, <span class="string">"This is title"</span>, Messages.getInformationIcon());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>完成后点击<code>run</code>，会打开一个新的IDEA，打开一个项目后，新的IDEA里就会有我们刚刚编写的插件</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/action1.png" alt="action1"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/result1.png" alt="result1"></p><hr><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/action2.png" alt="action2"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/result2_1.png" alt="result2_1"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/result2_2.png" alt="result2_2"></p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/10/jetbrain_plugin/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ubuntu下Java安装</title>
      <link>https://www.ph0en1x.space/2018/03/09/ubuntu_java/</link>
      <guid>https://www.ph0en1x.space/2018/03/09/ubuntu_java/</guid>
      <pubDate>Thu, 08 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 介绍如何在Linux下安装Java&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 介绍如何在Linux下安装Java</p></blockquote><a id="more"></a><ol><li><p>到<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Oracle官网</a>下载安装包，选择<code>tar.gz</code>的版本，例如下载到<code>/home/phoenix/Program_Files/</code></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/importance_sampling/download.png" alt="download"></p></li><li><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar zxvf jdk-9.0.4_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>修改 <code>/etc/environment</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:<span class="variable">$JAVA_HOME</span>/bin"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/jre/lib</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/phoenix/Program_Files/jdk-9.0.4</span><br></pre></td></tr></table></figure><p>保存关闭后，刷新环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/enviroment</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>验证环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line">/home/phoenix/Program_Files/jdk-9.0.4</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$CLASSPATH</span></span><br><span class="line">.:/lib:/jre/lib</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class="built_in">local</span>/games:/bin</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>修改<code>/etc/profile</code></p><p>添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/home/phoenix/Program_Files/jdk-9.0.4</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/home/phoenix/Program_Files/jdk-9.0.4/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>重启系统验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/09/ubuntu_java/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ubuntu下通过docker运行eclipse che</title>
      <link>https://www.ph0en1x.space/2018/03/09/eclipse_che/</link>
      <guid>https://www.ph0en1x.space/2018/03/09/eclipse_che/</guid>
      <pubDate>Thu, 08 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;Docker&lt;/strong&gt;是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署。&lt;strong&gt;个人理解&lt;/strong&gt;：通过沙箱隔离出一块区域，每块区域都有不同的应用运行环境。类似虚拟机是为了操作系统提供模拟的硬件环境，docker容器给应用提供了模拟的系统环境。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;Eclipse Che&lt;/strong&gt;是一个现代的、开放源代码的软件开发环境。它是一个通过提供结构化的工作区、项目输入、模块化扩展插件来支持Codenvy的引擎。Che可以用作桌面IDE，RESTful工作空间服务器，或作为一个创建新的工具SDK。我们将使用docker来运行Che&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> <strong>Docker</strong>是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署。<strong>个人理解</strong>：通过沙箱隔离出一块区域，每块区域都有不同的应用运行环境。类似虚拟机是为了操作系统提供模拟的硬件环境，docker容器给应用提供了模拟的系统环境。</p><p> <strong>Eclipse Che</strong>是一个现代的、开放源代码的软件开发环境。它是一个通过提供结构化的工作区、项目输入、模块化扩展插件来支持Codenvy的引擎。Che可以用作桌面IDE，RESTful工作空间服务器，或作为一个创建新的工具SDK。我们将使用docker来运行Che</p></blockquote><a id="more"></a><ol><li><p>Docker安装</p><p><strong>删除旧版本</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure><p><strong>安装最新版本Docker CE</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br><span class="line"></span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><p><strong>Hello World</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/docker.png" alt="docker"></p></li><li><p>运行che</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -ti -v /var/run/docker.sock:/var/run/docker.sock -v ~/Documents/che-data1:/data eclipse/che start</span><br></pre></td></tr></table></figure><p><code>-v ~/Documents/che-data1:/data</code>表示将数据存储在<code>~/Documents/che-data1</code></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/run_che.png" alt="run_che"></p><p>根据上面的结果浏览器输入<code>http://localhost:8080</code></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/che_ui.png" alt="che_ui"></p><p>之后就可以像正常的IDE那样使用了;</p></li><li><p>运行界面</p></li></ol><p>   <img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/main.png" alt="main"></p><p>   还有一个记录REST API请求的界面，打开<code>localhost:8080/swagger</code></p><p>   <img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/eclipse_che/swagger.png" alt="swagger"></p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/09/eclipse_che/#disqus_thread</comments>
    </item>
    
    <item>
      <title>线性判别分析(LDA)</title>
      <link>https://www.ph0en1x.space/2018/03/07/LDA/</link>
      <guid>https://www.ph0en1x.space/2018/03/07/LDA/</guid>
      <pubDate>Tue, 06 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 线性判别分析(Linear Discriminant Analysis, LDA)是另外一种线性降维方法。与主成分分析法不同，线性判别分析是一种有监督学习，也就意味着线性判别分析需要使用带标签的数据进行训练来完成降维。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 线性判别分析(Linear Discriminant Analysis, LDA)是另外一种线性降维方法。与主成分分析法不同，线性判别分析是一种有监督学习，也就意味着线性判别分析需要使用带标签的数据进行训练来完成降维。</p></blockquote><a id="more"></a><p><a href="https://www.ph0en1x.space/2018/03/06/PCA/">主成分分析法笔记</a></p><hr><p>的主要思想是找到一种线性映射至低维空间的方法，保证降维后带有不同标签的数据能够尽量分散，而带有相同标签的数据能够尽量相互集中，与PCA一样，分散这一评价指标仍然由方差来决定。</p><ol><li><p>二分类情况</p><p>考虑当样本的类别只有两类(0和1)且从d维映射至一维的问题，如下图</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/LDA.PNG" alt="LDA"></p><p>LDA的优化目标</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/target.PNG" alt="target"></p><p>其中μ<sub>i</sub>为第i类样本的中心点，∑<sub>i</sub>表示第i类样本的协方差矩阵，即(x-μ<sub>i</sub>)(x-μ<sub>i</sub>)<sup>T</sup>; w即需要找到的最佳映射方式</p><p>定义“类内散度矩阵”(within-class scatter matrix)</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/within.PNG" alt="within"></p><p>以及“类间散度矩阵”(between-class scatter matrix)</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/between.PNG" alt="between"></p><p>则优化目标可以写为</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/rayleigh.PNG" alt="rayleigh"></p><p>称为S<sub>b</sub>和S<sub>w</sub>的“广义瑞利商”(generalized Rayleigh quotient)</p><p>但是只有这个式子是不够的，因为当w乘以一个倍数的时候，答案J不会改变，就有无穷多解。要求唯一解，就要对w进行限制，限制之后的优化目标：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/target2.png" alt="target2"></p><p>与PCA相同，通过拉格朗日乘子法，得到：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/target3.png" alt="target3"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/target4.png" alt="target4"></p><p>又</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/target5.png" alt="target5"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/target6.png" alt="target6"></p><p>由于w的任何倍数不会影响结果，所以</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/result.png" alt="result"></p><p>我们只要求出S<sub>w</sub>就可以出最优的w</p><p>​</p></li><li><p>多分类情况</p><p>多分类情况下，需要定义“全局散度矩阵”：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/global.png" alt="global"></p><p>类内散度与类间散度矩阵的规定不变</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/within2.png" alt="within2"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/between2.png" alt="between2"></p><p>只要知道其中的两者利用广义瑞利商就可以算出最优解，例如按照二分类的方法得到</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LDA/target4.png" alt="target4"></p><p>同样也能求出解;</p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/07/LDA/#disqus_thread</comments>
    </item>
    
    <item>
      <title>主成分分析法(PCA)</title>
      <link>https://www.ph0en1x.space/2018/03/06/PCA/</link>
      <guid>https://www.ph0en1x.space/2018/03/06/PCA/</guid>
      <pubDate>Mon, 05 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 主成分分析法(principal component analysis, PCA)是最常用的无监督高维数据降维方法之一，它旨在降维的过程中保留原数据中最重要的几个分量，从而达到最大化原数据方差的作用。几乎所有数据降维方面研究都要用来作为比较重要的方法。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 主成分分析法(principal component analysis, PCA)是最常用的无监督高维数据降维方法之一，它旨在降维的过程中保留原数据中最重要的几个分量，从而达到最大化原数据方差的作用。几乎所有数据降维方面研究都要用来作为比较重要的方法。</p></blockquote><a id="more"></a><p>主成分分析的基本思想就是在原有样本的n维空间内再建立一个d维线性空间，用n个标准正交基进行重新映射，然后选取其中的d’个正交基进行保留，而在这d’个坐标轴上的坐标值就是映射到低维后的坐标。而推导的目的就是为了确定如何确定这这d个标准正交基以及如何选取它们。就如下图一样，将二维空间内的点映射至一维空间，最终选择较长的那条向量进行投影映射。</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/PCA/PCA.png" alt="PCA"></p><ol><li><p>首先，需要将手头需要降维的数据进行中心化，使样本中心点为原点</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/PCA/center.PNG" alt="center"></p></li><li><p>然后假定选择的新的坐标系为</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/PCA/w.PNG" alt="w"></p><p>其中W是标准正交基向量，即 (i != j)</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/PCA/w1.PNG" alt="w1"></p></li><li><p>选取其中的d’个向量让原样本向新坐标系中映射W<sup>T</sup>x<sub>i</sub>，即：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/PCA/z.PNG" alt="z"></p><p><strong>W</strong>是经过选取后的d’个标准正交基，<strong>z</strong>是低维中的坐标</p></li><li><p>选取的目标是使降维后的点尽量的分散，也就是方差尽量的大：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/PCA/z2.PNG" alt="z2"></p><p>优化问题被归纳为</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/PCA/target.PNG" alt="target"></p></li><li><p>根据拉格朗日乘子法，来决定哪d’个<strong>w</strong>可以留下，优化目标就成为了：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/PCA/result1.PNG" alt="result1"></p><p>​</p><p>代入优化目标</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/PCA/result2.PNG" alt="result2"></p><p>​</p><p>所以求解的过程就是寻找原样本<strong>协方差矩阵</strong>XX<sup>T</sup>的最大的d’个特征值，而相应的标准正交基就是相应特征值的特征向量;</p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/06/PCA/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用Requests和BeautifulSoup并行抓取今日头条图集</title>
      <link>https://www.ph0en1x.space/2018/03/04/beautifulsoup2/</link>
      <guid>https://www.ph0en1x.space/2018/03/04/beautifulsoup2/</guid>
      <pubDate>Sat, 03 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;代码分块讲解。分析Ajax请求来爬取今日头条的图集，将结果存储在MongoDB中。使用了Python多进程(multiprocessing)并行进行抓取。针对一个实战的教程进行修改，以适应今日头条最新的网页请求方式&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>代码分块讲解。分析Ajax请求来爬取今日头条的图集，将结果存储在MongoDB中。使用了Python多进程(multiprocessing)并行进行抓取。针对一个实战的教程进行修改，以适应今日头条最新的网页请求方式</p></blockquote><a id="more"></a><p>完整代码在<a href="https://github.com/Ph0en1xGSeek/BeautifulSoup/tree/master/jiepai" target="_blank" rel="noopener">这里</a></p><p><a href="https://www.ph0en1x.space/2018/03/03/ubuntu_mongodb/">MongoDB笔记</a></p><p><a href="https://www.ph0en1x.space/2018/02/26/beautifulsoup/">Requests与BeautifulSoup笔记</a></p><p>首先，本次要爬取的页面外观如下</p><p>搜索后点击<code>图集</code>标签</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BeautifulSoup/index.png" alt="index"></p><p>点击进某一个详细页面后，得到：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BeautifulSoup/detail.png" alt="detail"></p><p>其中所有照片不会一口气全部呈现在页面中，而是通过翻页来使用Ajax请求新的展示图</p><p>在搜索结果展示页，打开开发者工具-&gt;Network-&gt;XHR，然后刷新，我们可以获取请求的URL和请求的参数</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BeautifulSoup/index_url.png" alt="index_url"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BeautifulSoup/index_param.png" alt="index_param"></p><p>编写获取页面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_index</span><span class="params">(offset, keyword)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param offset: 页面offset，用于自动append新结果</span></span><br><span class="line"><span class="string">    :param keyword: 搜索关键字</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#请求的参数</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'offset'</span>: offset,</span><br><span class="line">        <span class="string">'format'</span>: <span class="string">'json'</span>,</span><br><span class="line">        <span class="string">'keyword'</span>: keyword,</span><br><span class="line">        <span class="string">'autoload'</span>:<span class="string">'true'</span>,</span><br><span class="line">        <span class="string">'count'</span>: <span class="string">'20'</span>,</span><br><span class="line">        <span class="string">'cur_tab'</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">'from'</span>: <span class="string">'gallery'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#urlencode可以用来将参数的json串转换为url上的参数</span></span><br><span class="line">    url = <span class="string">'https://www.toutiao.com/search_content/?'</span> + urlencode(data)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="comment">#成功200</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="comment"># print(response.text)</span></span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        print(<span class="string">'请求索引页出错'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p>从开发者工具可以看到得到的响应串是</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BeautifulSoup/index_response.png" alt="index_response"></p><p>编写获取每个detail页面的url代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page_index</span><span class="params">(html)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#转化为json对象</span></span><br><span class="line">        data = json.loads(html)</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        <span class="comment">#有数据并且又‘data’标签</span></span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">and</span> <span class="string">'data'</span> <span class="keyword">in</span> data.keys():</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> data.get(<span class="string">'data'</span>):</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'article_url'</span> <span class="keyword">in</span> item.keys():</span><br><span class="line">                    <span class="keyword">yield</span> item.get(<span class="string">'article_url'</span>)</span><br><span class="line">    <span class="keyword">except</span> JSONDecodeError:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>获得每个detail页面的url后，与index页面类似，请求每个url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_detail</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        print(<span class="string">'请求详情页出错'</span>, url)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p>在每个detail页面中打开开发者工具-&gt;Network-&gt;Doc，可以看到detail页面都预备要请求什么</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BeautifulSoup/detail_url.png" alt="detail_url"></p><p>可以发现在<code>BASE_DATA.galleryInfo</code>中<code>gallery</code>里记录了每个<code>sub_img</code>的信息，所以用正则表达式把它们提出来并尝试去请求图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page_detail</span><span class="params">(html, url)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="comment">#获得页面title</span></span><br><span class="line">    title = soup.select(<span class="string">'title'</span>)[<span class="number">0</span>].get_text()</span><br><span class="line">    print(title)</span><br><span class="line">    <span class="comment">#匹配需要的串</span></span><br><span class="line">    image_pattern = re.compile(<span class="string">'gallery: JSON.parse\("(.*?)"\),'</span>, re.S)</span><br><span class="line">    result = re.search(image_pattern, html)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="comment">#group(1)只匹配括号里的，group()返回包括括号里的整个串</span></span><br><span class="line">        data = json.loads(result.group(<span class="number">1</span>).replace(<span class="string">'\\'</span>, <span class="string">''</span>))</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">and</span> <span class="string">'sub_images'</span> <span class="keyword">in</span> data.keys():</span><br><span class="line">            sub_imges = data[<span class="string">'sub_images'</span>]</span><br><span class="line">            <span class="comment"># 获得图片的url</span></span><br><span class="line">            images = [item.get(<span class="string">'url'</span>) <span class="keyword">for</span> item <span class="keyword">in</span> sub_imges]</span><br><span class="line">            <span class="comment"># 下载图片</span></span><br><span class="line">            <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">                download_image(image)</span><br><span class="line">            <span class="comment">#返回预备要存入MongoDB的json串</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">'title'</span> : title,</span><br><span class="line">                <span class="string">'images'</span> : images,</span><br><span class="line">                <span class="string">'url'</span> : url</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"failed"</span>)</span><br></pre></td></tr></table></figure><p>下载图片同请求网页类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_image</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'downing'</span>, url, <span class="string">'...'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, stream=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="comment"># print(response.text)</span></span><br><span class="line">            filename = url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">            <span class="comment">#保存图片</span></span><br><span class="line">            save_image(response, filename)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        print(<span class="string">'请求图片出错'</span>, url)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p>保存图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_image</span><span class="params">(response, filename)</span>:</span></span><br><span class="line">    file_path = <span class="string">'./jiepai/&#123;0&#125;.&#123;1&#125;'</span>.format(filename, <span class="string">'jpg'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">        <span class="keyword">with</span> open(file_path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment">#按字节流保存</span></span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(chunk_size=<span class="number">128</span>):</span><br><span class="line">                f.write(chunk)</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure><p>主函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></span><br><span class="line">    <span class="comment">#请求index页面</span></span><br><span class="line">    html = get_page_index(offset, <span class="string">'街拍'</span>)</span><br><span class="line">    <span class="comment">#解析页面</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> parse_page_index(html):</span><br><span class="line">        <span class="comment">#头条返回的url已经不能直接访问到网页，而是跳转到了新的页面，所以要自己转下格式</span></span><br><span class="line">        url = <span class="string">'https://www.toutiao.com/a'</span> + url.split(<span class="string">'/'</span>)[<span class="number">-2</span>]</span><br><span class="line">        <span class="comment"># 请求detail页面</span></span><br><span class="line">        html = get_page_detail(url)</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            <span class="comment">#解析detail页面</span></span><br><span class="line">            result = parse_page_detail(html, url)</span><br><span class="line">            <span class="comment">#存入数据库</span></span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                save_to_mongo(result)</span><br></pre></td></tr></table></figure><p>插入数据库的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接数据库</span></span><br><span class="line">client = pymongo.MongoClient(MONGO_URL)</span><br><span class="line"><span class="comment">#确定响应的database</span></span><br><span class="line">db = client[MONGO_DB]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(result)</span>:</span></span><br><span class="line">    <span class="comment">#插入</span></span><br><span class="line">    <span class="keyword">if</span> db[MONGO_TABLE].insert(result):</span><br><span class="line">        print(<span class="string">'存储到MongoDB成功'</span>, result)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MONGO_URL = <span class="string">'localhost'</span></span><br><span class="line">MONGO_DB = <span class="string">'toutiao'</span></span><br><span class="line">MONGO_TABLE = <span class="string">'toutiao'</span></span><br><span class="line"></span><br><span class="line">GROUP_START = <span class="number">0</span></span><br><span class="line">GROUP_END = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>并行地抓取不同offset的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'./jiepai'</span>):</span><br><span class="line">        os.mkdir(<span class="string">'./jiepai'</span>)</span><br><span class="line">    groups = [x*<span class="number">20</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(GROUP_START, GROUP_END+<span class="number">1</span>)]</span><br><span class="line">    <span class="comment">#创建进程池，默认为cpu核数</span></span><br><span class="line">    pool = Pool(processes=<span class="number">4</span>)</span><br><span class="line">    <span class="comment">#开启进程，传入参数</span></span><br><span class="line">    pool.map(main, groups)</span><br></pre></td></tr></table></figure><p>Enjoy it !!!</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BeautifulSoup/result.png" alt="result"></p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/04/beautifulsoup2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在Ubuntu下安装MongoDB以及基本操作</title>
      <link>https://www.ph0en1x.space/2018/03/03/ubuntu_mongodb/</link>
      <guid>https://www.ph0en1x.space/2018/03/03/ubuntu_mongodb/</guid>
      <pubDate>Fri, 02 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;MongoDB是著名的非关系型数据库，由于其存取十分灵活，在一些web应用上得到了比关系型数据库更广泛的运用&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>MongoDB是著名的非关系型数据库，由于其存取十分灵活，在一些web应用上得到了比关系型数据库更广泛的运用</p></blockquote><a id="more"></a><h2 id="一、MongoDB安装"><a href="#一、MongoDB安装" class="headerlink" title="一、MongoDB安装"></a>一、MongoDB安装</h2><ol><li><p>安装mongoDB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mongodb</span><br></pre></td></tr></table></figure></li><li><p>查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo -version</span><br></pre></td></tr></table></figure></li><li><p>启动和关闭mongoDB服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mongodb start</span><br><span class="line">service mongodb stop</span><br></pre></td></tr></table></figure></li><li><p>查看是否在运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pgrep mongo -l</span><br></pre></td></tr></table></figure></li><li><p>卸载mongoDB</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --purge remove mongodb mongodb-clients mongodb-server</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、MongoDB基本操作"><a href="#二、MongoDB基本操作" class="headerlink" title="二、MongoDB基本操作"></a>二、MongoDB基本操作</h2><ul><li><p>启动MongoDB命令行工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> dbs #显示所有数据库</span><br><span class="line"><span class="keyword">show</span> collections #显示当前数据库中的集合(collection类似mysql等关系数据库中的<span class="keyword">table</span>)</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">users</span> #显示所有用户</span><br><span class="line"><span class="keyword">use</span> DBname #切换当前数据库至DBname</span><br><span class="line">db.help()  #显示数据库操作命令</span><br><span class="line">db.yourCollection.help()  #显示集合操作命令，yourCollection是集合名 </span><br><span class="line"><span class="keyword">exit</span>#退出命令行工具</span><br></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> DBname#不需要事先定义，现用现创建</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>创建Collection</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection('newCollection')</span><br></pre></td></tr></table></figure><p>或直接向Collection中<strong>插入数据</strong></p><p>​</p></li><li><p>插入数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.collentionName.insert(&#123;_id:1, name: 'Ph0en1x', age: 20&#125;) </span><br><span class="line"># or</span><br><span class="line">db.collectionName.save(&#123;_id:1, name: 'Ph0en1x', age: 22&#125;)</span><br></pre></td></tr></table></figure><p><code>_id</code>不写会自动生成，当<code>_id</code>重复时，<code>insert</code>不会插入新的记录，而<code>save</code>会进行更新</p><p>​</p></li><li><p>查找数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.youCollection.find(criteria, filterDisplay)</span><br></pre></td></tr></table></figure><p><code>criteria</code> ：查询条件，可选 </p><p><code>filterDisplay</code>：筛选显示部分数据，如显示指定列数据，可选（当选择时，第一个参数不可省略，若查询条件为空，可用{}做占位符，如下例第三句）</p><p><strong>例如</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.find()  #查询所有记录</span><br><span class="line">db.collectionName.find(&#123;name: 'Ph0en1x'&#125;)  #查询name='Ph0en1x'的记录</span><br><span class="line">db.collectionName.find(&#123;&#125;,&#123;name:1, sge:1&#125;) #筛选出指定列name、age数据</span><br><span class="line">db.collectionName.find(&#123;name: 'Ph0en1x', age: 22&#125;) #and 与条件查询</span><br><span class="line">db.student.find(&#123;$or: [&#123;age: 22&#125;, &#123;age: 25&#125;]&#125;) #or 条件查询</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>修改数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.youCollection.update(criteria, objNew, upsert, multi )</span><br></pre></td></tr></table></figure><p><code>criteria</code>： update的查询条件</p><p><code>objNew</code> ：update的对象和一些更新的操作符</p><p><code>upsert</code> ：如果不存在update的记录，是否插入objNew，<code>true</code> or <code>false</code></p><p><code>multi</code>：<code>false</code>默认，只更新查询到的第一条，<code>true</code>更新全部</p><p><strong>其中<code>criteria</code>和<code>objNew</code>是必选参数，<code>upsert</code>和<code>multi</code>可选参数</strong> </p><p><strong>例如</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.update(&#123;name: 'Ph0en1x'&#125;, &#123;$set: &#123;sage: 13&#125;&#125;, false, true)</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>删除数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.remove(&#123;name: 'Ph0en1x'&#125;)</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/03/ubuntu_mongodb/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 多进程(multiprocessing)</title>
      <link>https://www.ph0en1x.space/2018/03/02/python_multiprocessing/</link>
      <guid>https://www.ph0en1x.space/2018/03/02/python_multiprocessing/</guid>
      <pubDate>Thu, 01 Mar 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; Python多进程编程入门，基本使用，queue的使用，pool使用和共享变量的使用&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> Python多进程编程入门，基本使用，queue的使用，pool使用和共享变量的使用</p></blockquote><a id="more"></a><p>完整代码点击<a href="https://github.com/Ph0en1xGSeek/python_parallel/tree/master/multiprocessing" target="_blank" rel="noopener">这里</a></p><h2 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h2><p>Python有多进程(multiprocessing)与多线程(multithreading)两种并行的方式，在python中导入库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> threading <span class="keyword">as</span> td</span><br></pre></td></tr></table></figure><p>我们编写一个代码来比较multiprocessing、multithreading和serial三种执行的效率</p><p>要使用并行，首先要先准备一个被调用的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(q, a)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="comment">#两个进程/线程分别负责前半部分和后半部分</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50000</span>*a, <span class="number">50000</span>*(a+<span class="number">1</span>)):</span><br><span class="line">        res += i**<span class="number">3</span> + i**<span class="number">2</span> + i</span><br><span class="line">    <span class="comment">#结果放入queue中</span></span><br><span class="line">    q.put(res)</span><br></pre></td></tr></table></figure><p>多进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiprocess</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 使用queue</span></span><br><span class="line">    q = mp.Queue()</span><br><span class="line">    <span class="comment">#传入参数</span></span><br><span class="line">    p1 = mp.Process(target=job, args=(q, <span class="number">0</span>))</span><br><span class="line">    p2 = mp.Process(target=job, args=(q, <span class="number">1</span>))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line"></span><br><span class="line">    res1 = q.get()</span><br><span class="line">    res2 = q.get()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'multiprocess:'</span>,res1 + res2)</span><br></pre></td></tr></table></figure><p>多线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multithread</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 使用queue</span></span><br><span class="line">    q = mp.Queue()</span><br><span class="line">    t1 = td.Thread(target=job, args=(q, <span class="number">0</span>))</span><br><span class="line">    t2 = td.Thread(target=job, args=(q, <span class="number">1</span>))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    res1 = q.get()</span><br><span class="line">    res2 = q.get()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'multithread:'</span>, res1 + res2)</span><br></pre></td></tr></table></figure><p>串行执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serial</span><span class="params">()</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">        res += i**<span class="number">3</span> + i**<span class="number">2</span> + i</span><br><span class="line">    print(<span class="string">'serial:'</span>, res)</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    st = time.time()</span><br><span class="line">    serial()</span><br><span class="line">    st1 = time.time()</span><br><span class="line">    print(<span class="string">'serial time:'</span>, st1 - st, <span class="string">"\n"</span>)</span><br><span class="line">    multithread()</span><br><span class="line">    st2 = time.time()</span><br><span class="line">    print(<span class="string">'multithread time:'</span>, st2 - st1, <span class="string">"\n"</span>)</span><br><span class="line">    multiprocess()</span><br><span class="line">    print(<span class="string">'multiprocess time:'</span>, time.time() - st2, <span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">serial: 24999833335833300000</span><br><span class="line">serial time: 0.07318806648254395 </span><br><span class="line"></span><br><span class="line">multithread: 24999833335833300000</span><br><span class="line">multithread time: 0.16390419006347656 </span><br><span class="line"></span><br><span class="line">multiprocess: 24999833335833300000</span><br><span class="line">multiprocess time: 0.057524681091308594</span><br></pre></td></tr></table></figure><p>可以看出，multiprocessing比普通串行的执行要快一些，但是multithreading比串行要慢一些。multithreading要体现性能的提升必须在任务有大量的IO时，在计算密集型的程序内，multithreading无法体现优越性。事实上，当处理的事情越少时，调度多进程的代价大于多进程带来的性能提升，两种并行都要比串行要慢</p><h2 id="二、使用pool来调用python多进程"><a href="#二、使用pool来调用python多进程" class="headerlink" title="二、使用pool来调用python多进程"></a>二、使用pool来调用python多进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiprocess</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#mp.Pool()进程数processes默认为cpu核数</span></span><br><span class="line">    pool = mp.Pool(processes=<span class="number">2</span>)</span><br><span class="line">    res = pool.map(job, range(<span class="number">10</span>))</span><br><span class="line">    print(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用apply_async()只能传一组参数</span></span><br><span class="line">    multi_res = [pool.apply_async(job, (i,)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">    print([res.get() <span class="keyword">for</span> res <span class="keyword">in</span> multi_res])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    multiprocess()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]</span><br><span class="line">[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]</span><br></pre></td></tr></table></figure><h2 id="三、共享变量与互斥锁"><a href="#三、共享变量与互斥锁" class="headerlink" title="三、共享变量与互斥锁"></a>三、共享变量与互斥锁</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(v, num, l)</span>:</span></span><br><span class="line">    <span class="comment">#请求锁</span></span><br><span class="line">    l.acquire()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        v.value = v.value + num</span><br><span class="line">        print(v.value)</span><br><span class="line">    <span class="comment">#释放锁</span></span><br><span class="line">    l.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiprocess</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#共享变量</span></span><br><span class="line">    v = mp.Value(<span class="string">'i'</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment">#互斥锁</span></span><br><span class="line">    l = mp.Lock()</span><br><span class="line"></span><br><span class="line">    p1 = mp.Process(target=job, args=(v, <span class="number">-1</span>, l))</span><br><span class="line">    p2 = mp.Process(target=job, args=(v, <span class="number">1</span>, l))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    print(<span class="string">'final:'</span>, v.value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    multiprocess()</span><br></pre></td></tr></table></figure><p>输出(不使用互斥锁)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br><span class="line">0</span><br><span class="line">-1</span><br><span class="line">0</span><br><span class="line">-1</span><br><span class="line">0</span><br><span class="line">-1</span><br><span class="line">0</span><br><span class="line">-1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">final: 4</span><br></pre></td></tr></table></figure><p>答案出现了错误，并且两个进程的执行顺序很随机，因为可能出现A进程读取变量到寄存器进行计算后时间片被用完挂起，B进程开始进行了读取之后挂起，当A将计算完的结果放回到内存挂起后B进程又将计算完的结果放回内存，A的计算就被覆盖，产生了错误。</p><p>输出(使用互斥锁)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br><span class="line">-2</span><br><span class="line">-3</span><br><span class="line">-4</span><br><span class="line">-5</span><br><span class="line">-6</span><br><span class="line">-7</span><br><span class="line">-8</span><br><span class="line">-9</span><br><span class="line">-10</span><br><span class="line">-9</span><br><span class="line">-8</span><br><span class="line">-7</span><br><span class="line">-6</span><br><span class="line">-5</span><br><span class="line">-4</span><br><span class="line">-3</span><br><span class="line">-2</span><br><span class="line">-1</span><br><span class="line">0</span><br><span class="line">final: 0</span><br></pre></td></tr></table></figure><p>可以看到进程1先抢到了互斥锁开始了自己的循环，直到执行完释放后进程2才开始执行。</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/03/02/python_multiprocessing/#disqus_thread</comments>
    </item>
    
    <item>
      <title>L2正则化解决过拟合问题</title>
      <link>https://www.ph0en1x.space/2018/02/28/l2_regularization/</link>
      <guid>https://www.ph0en1x.space/2018/02/28/l2_regularization/</guid>
      <pubDate>Tue, 27 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 过拟合(overfit)是深度学习乃至机器学习过程中的又一大问题，通常的解决方法为L2正则化、Dropout正则化等等&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 过拟合(overfit)是深度学习乃至机器学习过程中的又一大问题，通常的解决方法为L2正则化、Dropout正则化等等</p></blockquote><a id="more"></a><h2 id="一、L2正则化"><a href="#一、L2正则化" class="headerlink" title="一、L2正则化"></a>一、L2正则化</h2><p>L2正则化就是在原来的损失函数上，再加上一项参数的二范式</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/regularization/loss.png" alt="loss"></p><p>第二项又称作<strong>弗罗贝尼乌斯范数（Frobenius norm）的平方</strong></p><p>将新的损失函数对参数求梯度得</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/regularization/d.png" alt="d"></p><p>使用梯度下降更新参数</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/regularization/result.png" alt="result"></p><p>其中α、λ是两个超参数，α是学习率，而λ负责调节L2正则化过程</p><ul><li>λ=0时，表示不使用正则化</li><li>λ越大，在训练过程中则会压制参数的变大，使参数尽量变小</li></ul><h2 id="二、L2正则化为什么有效"><a href="#二、L2正则化为什么有效" class="headerlink" title="二、L2正则化为什么有效"></a>二、L2正则化为什么有效</h2><p>通俗的解释，产生过拟合问题的根本原因是模型试图记住的参数太多，导致其举一反三的能力减弱，而通过L2正则化，导致很多的参数会变得很小，对模型的影响力降低，相当于降低了模型的复杂程度，提高了泛化能力。</p><p>还有一种比较通俗的解释，来自Andrew Ng</p><p>我们的所常用的激活函数sigmoid、tanh是长这样的</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/regularization/sigmoid.png" alt="sigmoid"></p><p>如果控制参数较小，那么中间层输出的参数也会很小，就会集中在中间导数相对于稳定的位置，也就是限制了分类模型过分的扭曲。</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/28/l2_regularization/#disqus_thread</comments>
    </item>
    
    <item>
      <title>过拟合与欠拟合问题</title>
      <link>https://www.ph0en1x.space/2018/02/27/overfit/</link>
      <guid>https://www.ph0en1x.space/2018/02/27/overfit/</guid>
      <pubDate>Mon, 26 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 过拟合(overfit)是深度学习乃至机器学习过程中的又一大问题，通常的解决方法为L2正则化、Dropout正则化等等&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 过拟合(overfit)是深度学习乃至机器学习过程中的又一大问题，通常的解决方法为L2正则化、Dropout正则化等等</p></blockquote><a id="more"></a><p>要解释过拟合，需要借用一张Andrew Ng的课件：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/regularization/overfit.png" alt="overfit"></p><ul><li>三附图中的左图，模型过于简单，偏差较大，无法很好的拟合非线性的分类问题，出现欠拟合(underfit)问题，一般需要增加网络层数，增加隐藏层神经元个数来解决。这种问题一般表现为训练集与验证集损失函数值都较大;</li><li>右图，过于贴合训练集，方差较大，称作过拟合(overfit)问题，过拟合问题一般表现为训练集损失函数值较小，但是验证集的损失函数较大。即训练出的模型太过死板，而无法解决训练集以外的数据;</li><li>中间表示刚好的情况，一般训练集与验证集损失函数值都较小</li></ul><p>要通俗且形象地解释过拟合现象就是——书呆子，将做过的题目全都背下，但缺乏举一反三的能力，碰到做过的题，那么他就会做，但是改个问法就傻了。</p><p>有个更加有意思的说法就是——考驾照，驾考时教练一般会让你看准许多的记号，然后机械地打方向盘，然而这样即使拿到的驾照，也无法立即上路。</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/27/overfit/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用Requests和BeautifulSoup编写简单的网络爬虫</title>
      <link>https://www.ph0en1x.space/2018/02/26/beautifulsoup/</link>
      <guid>https://www.ph0en1x.space/2018/02/26/beautifulsoup/</guid>
      <pubDate>Sun, 25 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;前段时间一个任务需要获得日本所有主要城市的经纬度坐标，手头没有现成的数据，只能写一个简单的爬虫来爬取某旅游公司的页面来获得我要的经纬度数据。。采用一个方便简单的爬虫框架Request与BeautifulSoup，由于项目时间很赶，只是一个很简单的脚本，并不考虑动态页面，也没有与数据库进行交互，这部分的笔记以后再补，我会就着这次的代码简单介绍它们的使用方法&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>前段时间一个任务需要获得日本所有主要城市的经纬度坐标，手头没有现成的数据，只能写一个简单的爬虫来爬取某旅游公司的页面来获得我要的经纬度数据。。采用一个方便简单的爬虫框架Request与BeautifulSoup，由于项目时间很赶，只是一个很简单的脚本，并不考虑动态页面，也没有与数据库进行交互，这部分的笔记以后再补，我会就着这次的代码简单介绍它们的使用方法</p></blockquote><a id="more"></a><h2 id="一、Requests与BeautifulSoup简介"><a href="#一、Requests与BeautifulSoup简介" class="headerlink" title="一、Requests与BeautifulSoup简介"></a>一、Requests与BeautifulSoup简介</h2><ul><li><p><strong>Requests</strong></p><blockquote><p>Requests 是一个为人们制作的一个Python库，用于优雅且简单的HTTP</p></blockquote></li><li><p><strong>BeautifulSoup</strong></p><blockquote><p>Beautiful Soup提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。</p><p>Beautiful Soup自动将输入文档转换为Unicode编码，输出文档转换为utf-8编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，Beautiful Soup就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。</p><p>Beautiful Soup已成为和lxml、html6lib一样出色的python解释器，为用户灵活地提供不同的解析策略或强劲的速度。</p></blockquote><p>Requests 与 BeautifulSoup一个负责请求页面，获得页面，一个负责解析页面内容，取出需要的数据</p></li><li><p><strong>官方文档</strong></p><p><a href="http://docs.python-requests.org/en/master/#the-user-guide" target="_blank" rel="noopener">Requests官方文档</a></p><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="noopener">BeautifulSoup官方文档</a></p></li></ul><h2 id="二、安装Request与Beautiful"><a href="#二、安装Request与Beautiful" class="headerlink" title="二、安装Request与Beautiful"></a>二、安装Request与Beautiful</h2><p>如果已经安装pip，那么安装就很简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip insatall requests</span><br><span class="line">$ pip install BeautifulSoup4</span><br></pre></td></tr></table></figure><h2 id="三、代码解析"><a href="#三、代码解析" class="headerlink" title="三、代码解析"></a>三、代码解析</h2><p>完整的代码在<a href="https://github.com/Ph0en1xGSeek/BeautifulSoup/blob/master/Japan/Japan.py" target="_blank" rel="noopener">这里</a></p><p>首先需要找到一个合适的网页并分析它的网页结构，我找到的一个网站结构是这样的：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BeautifulSoup/main.PNG" alt="main"></p><p>打开开发者工具，可以发现网页的分页的链接是从<code>index</code>~<code>index44</code></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BeautifulSoup/page.PNG" alt="page"></p><p>所以可以先将要爬取的网页以模版的形式装入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#抓取的网页地址模版，所有分页的目录</span></span><br><span class="line">listURL = <span class="string">'http://www.cnair.com/city/Japan/index&#123;&#125;.htm'</span></span><br><span class="line">lists = [listURL.format(<span class="string">''</span>)]</span><br><span class="line"><span class="comment"># lists = []</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">45</span>):</span><br><span class="line">    lists.append(listURL.format(str(i)))</span><br><span class="line"><span class="comment">#打开一个文件用于append抓到的信息</span></span><br><span class="line">f = open(<span class="string">"gpsmap.json"</span>, <span class="string">"a"</span>)</span><br><span class="line"><span class="comment"># print(lists)</span></span><br><span class="line"><span class="comment">#存储爬取的数据</span></span><br><span class="line">dic = &#123;&#125;</span><br></pre></td></tr></table></figure><p>对于每一页中的所有城市的电子地图，我们通过开发者工具可以发现它的结构是这样的：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BeautifulSoup/hierarchy1.PNG" alt="hierarchy1"></p><p>所以请求相应的页面后，我们需要找到存着相应子页面链接标签，发现他们位于class=‘mainListTitle’的<code>&lt;span&gt;</code>标签下的<code>&lt;a&gt;</code>标签下，所以可以使用BeautifulSoup进行提取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lists:</span><br><span class="line">    <span class="comment">#使用Requests请求页面</span></span><br><span class="line">    res = requests.get(item)</span><br><span class="line">    <span class="comment"># print(res.text)</span></span><br><span class="line">    <span class="comment">#解析html文本</span></span><br><span class="line">    soup = BeautifulSoup(res.text, <span class="string">'html.parser'</span>)</span><br><span class="line">    <span class="comment">#选取出页面中mainNewsTitle类下的&lt;a&gt;标签</span></span><br><span class="line">    urls = soup.select(<span class="string">'.mainNewsTitle a'</span>)</span><br></pre></td></tr></table></figure><p>访问相应的子页面，观察页面的结构</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BeautifulSoup/subpage.PNG" alt="subpage"> <img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/BeautifulSoup/content.PNG" alt="content"></p><p>发现地名、经纬度等信息被放在了同一个class=’NewsContent’的<code>&lt;div&gt;</code>标签下，在同一个字符串中。所以我们需要从中提取出字符串，并以<code>&lt;br&gt;</code>作为分隔符，提取出他们。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> urls:</span><br><span class="line">    <span class="comment"># print(u['href'])</span></span><br><span class="line">    <span class="comment">#取出每个&lt;a&gt;标签下的href属性并请求该页面</span></span><br><span class="line">    tmpres = requests.get(u[<span class="string">'href'</span>])</span><br><span class="line">    <span class="comment">#解析需要使用utf8编码</span></span><br><span class="line">    tmpres.encoding = <span class="string">'utf_8'</span></span><br><span class="line">    tmpsoup = BeautifulSoup(tmpres.text, <span class="string">'html.parser'</span>)</span><br><span class="line">    text = tmpsoup.select(<span class="string">'.NewsContent'</span>)</span><br><span class="line">    textarr = str(text[<span class="number">0</span>]).split(<span class="string">'&lt;br/&gt;'</span>)</span><br><span class="line">    <span class="comment">#取出城市名称</span></span><br><span class="line">    name = textarr[<span class="number">1</span>].split(<span class="string">' : '</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#取出经度</span></span><br><span class="line">    lng = textarr[<span class="number">6</span>].split(<span class="string">' : '</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#取出纬度</span></span><br><span class="line">    lat = textarr[<span class="number">5</span>].split(<span class="string">' : '</span>)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>单位转换并保存到python的字典中，并最后保存到json文件中。这里有个小trick，爬取每个子页面后，可以让程序休眠1秒，爬取一个大页面后，可以停止10秒。这样做的目的是防止过于频繁的访问，导致服务器的拒绝访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">#存下刚刚抓取的信息</span></span><br><span class="line">        tmpdic = &#123;&#125;</span><br><span class="line">        tmpdic[<span class="string">'lng'</span>] = lng</span><br><span class="line">        tmpdic[<span class="string">'lat'</span>] = lat</span><br><span class="line">        dic[name] = tmpdic</span><br><span class="line">        print(<span class="string">'&#123;&#125; &#123;&#125; &#123;&#125;'</span>.format(name, lng, lat), file=f)</span><br><span class="line">        print(<span class="string">'&#123;&#125; : &#123;&#125;: &#123;&#125;: &#123;&#125;'</span>.format(item, name, lng, lat))</span><br><span class="line">        <span class="comment">#停顿1秒</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#存储抓取的结构化信息</span></span><br><span class="line">jsonStr = json.dumps(dic)</span><br><span class="line">f = open(<span class="string">"gpsmap.json"</span>, <span class="string">"w"</span>)</span><br><span class="line">print(jsonStr, file=f)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/26/beautifulsoup/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LSTM(Long Short Term Memory)与GRU(Gated Recurrent Unit)</title>
      <link>https://www.ph0en1x.space/2018/02/23/LSTM/</link>
      <guid>https://www.ph0en1x.space/2018/02/23/LSTM/</guid>
      <pubDate>Thu, 22 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 循环神经网络(RNN)是深度神经网络最重要的的形式之一，其被广泛运用于时序形数据的处理上、例如文字、音频、视频等等；而RNN在训练的过程中同样也会发生梯度不稳定的情况，同时还面临着新的数据不断加入循环而旧的数据不断被冲淡的情况，导致一个句子中开始的部分在最终结果的影响程度中较低，于是LSTM模型就诞生并用于改善这种情况&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 循环神经网络(RNN)是深度神经网络最重要的的形式之一，其被广泛运用于时序形数据的处理上、例如文字、音频、视频等等；而RNN在训练的过程中同样也会发生梯度不稳定的情况，同时还面临着新的数据不断加入循环而旧的数据不断被冲淡的情况，导致一个句子中开始的部分在最终结果的影响程度中较低，于是LSTM模型就诞生并用于改善这种情况</p></blockquote><a id="more"></a><h2 id="一、循环神经网络-Recurrent-Neural-Networks"><a href="#一、循环神经网络-Recurrent-Neural-Networks" class="headerlink" title="一、循环神经网络(Recurrent Neural Networks)"></a>一、循环神经网络(Recurrent Neural Networks)</h2><p>人在阅读文章、观看视频时，理解当前看到的东西，不会仅仅依靠当前的内容就作出理解，还要对上文进行综合理解，比如翻译<code>The NBA player Kevin Love</code>，当翻译<code>Love</code>时，应当翻译为<code>乐福</code>而不是<code>喜欢</code>，这是因为前面提到了<code>NBA</code>、<code>player</code>这些词。所以当使用深度神经网络进行翻译的时候就需要网络拥有对前文的记忆，这就是RNN出现的原因；</p><p>这是RNN的结构</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/RNN.png" alt="RNN"></p><p>我们可以看到RNN是同一个单元的重复循环出现，每一次单元计算后都会产生一个记忆，传入下一个单元的计算，每一个单元都会接收当前的输入，并且考虑前面的记忆，作出当前的输出；</p><h2 id="二、长短时记忆LSTM"><a href="#二、长短时记忆LSTM" class="headerlink" title="二、长短时记忆LSTM"></a>二、长短时记忆LSTM</h2><p>前面说到了普通的RNN单元会有Long-Term Dependencies的问题，就是每部所产生的记忆，可能只会对较近的几个输出产生影响，而随着网络加深，记忆将会消退，例如翻译“The NBA …(此处省略10000字)…Kevin Love”时，如果用普通的的RNN，那么<code>Kevin Love</code>依然有可能会被翻译为<code>凯文喜欢</code>，就如下图：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/RNN2.png" alt="RNN2"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/RNN3.png" alt="RNN3"></p><p>这时候就要请出我们今天的主角<strong>LSTM</strong>了，传统的RNN之所以不能够拥有很好的长时记忆是因为每个单元都是经过简单的线性变换加上tanh激活函数，如下图：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/RNN4.png" alt="RNN4"></p><p>而LSTM则要复杂很多：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/LSTM.jpg" alt="LSTM"></p><p>LSTM的记忆干流就是C<sub>t</sub>，上一个单元的输入作用于它，并且与它一起形成这个单元的输出：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/C.png" alt="C"></p><p>LSTM则包含了一个叫<code>遗忘门</code>的单元，用来判断上一单元传过来的记忆中哪些是可以忘记的，而哪些比较重要，需要记下</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/ft.png" alt="ft"></p><p>对本单元的输入信息进行提取</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/it.png" alt="it"></p><p>调整当前的记忆</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/Ct.png" alt="Ct"></p><p>完成本单元的输出</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/ot.png" alt="ot"></p><h2 id="三、LSTM变体——GRU"><a href="#三、LSTM变体——GRU" class="headerlink" title="三、LSTM变体——GRU"></a>三、LSTM变体——GRU</h2><p>LSTM还拥有许多的变体，其中最常用的就是GRU，它是LSTM的一种简化，将C与h合二为一，拥有更好的效率，在某些任务上也有更好的效果</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/LSTM/GRU.png" alt="GRU"></p><h2 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h2><p><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="noopener">Understanding LSTM Networks</a></p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/23/LSTM/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Xavier方法用于神经网络参数初始化</title>
      <link>https://www.ph0en1x.space/2018/02/22/Xavier/</link>
      <guid>https://www.ph0en1x.space/2018/02/22/Xavier/</guid>
      <pubDate>Wed, 21 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 之前我们学习了使用RBM对深度置信网络进行逐层训练初始化，或用类似的方法对多层深度神经网络进行预训练(pretraining)，以求最终收敛的结果接近最优且加快收敛速度，同时还能避免&lt;strong&gt;梯度消失&lt;/strong&gt;(gradient vanishing)和&lt;strong&gt;梯度爆炸&lt;/strong&gt;(gradient explosion)的问题。今天介绍一个更加方便快速的初始化方法，来&lt;strong&gt;近似&lt;/strong&gt;达到相同的目的。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 之前我们学习了使用RBM对深度置信网络进行逐层训练初始化，或用类似的方法对多层深度神经网络进行预训练(pretraining)，以求最终收敛的结果接近最优且加快收敛速度，同时还能避免<strong>梯度消失</strong>(gradient vanishing)和<strong>梯度爆炸</strong>(gradient explosion)的问题。今天介绍一个更加方便快速的初始化方法，来<strong>近似</strong>达到相同的目的。</p></blockquote><a id="more"></a><h2 id="一、梯度消失与梯度爆炸"><a href="#一、梯度消失与梯度爆炸" class="headerlink" title="一、梯度消失与梯度爆炸"></a>一、梯度消失与梯度爆炸</h2><p>这是一个深度学习领域遇到的老问题了，即使是现在，任何一个新提出的模型，无论是MLP、CNN、还是RNN，随着深度的加深，这两个问题变得尤为严重。</p><ul><li>梯度消失是指在深度学习训练的过程中，梯度随着链式求导逐层传递逐层减小，最后趋近于0，导致对某些层的训练失效；</li><li>梯度爆炸与梯度消失相反，梯度随着链式求导逐层传递逐层增大，最后趋于无穷，导致某些层无法收敛；</li></ul><p>出现梯度消失和梯度爆炸的问题主要是因为参数初始化不当以及激活函数选择不当造成的，这在之后我会做相应的笔记来讨论batch normalization与激活函数</p><h2 id="二、Xavier方法"><a href="#二、Xavier方法" class="headerlink" title="二、Xavier方法"></a>二、Xavier方法</h2><p>接下来的推导基于假设:</p><ul><li>激活函数在0周围的导数接近1(比如tanh);</li><li>偏置项b初始化为0，期望为0</li><li>参数初始化期望均为0</li></ul><p>显然，在初始化参数的时候不能全部初始化为0，这样无论是什么输入，输出都是0，无法训练，但也不能随意去初始值，否则就会造成梯度不稳定的问题。那么什么样的初始值才是合适的呢？</p><p>答案就是使每层的分布都尽量相等，RBM就是为了这个目的而训练的，但是Xavier做了进一步的简化：保留均值(可以在下一层开始的时候再做调整)与<strong>方差</strong></p><p>对于每一个输出的神经元<img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/Xavier/Z.png" alt="Z"></p><p>都要使<img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/Xavier/approx.png" alt="approx"></p><p>又</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/Xavier/Dz.png" alt="Dz"></p><p>根据假设<code>E(w)</code>与<code>E(x)</code>均等0且所有<code>w</code>与<code>x</code>同分布，则：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/Xavier/Dzshort.png" alt="Dzshort"></p><p>要满足<img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/Xavier/approx.png" alt="approx">所以:</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/Xavier/Dw.png" alt="Dw"></p><p>其中n<sub>in</sub>与n<sub>out</sub>分别是输入层与输出层的神经元个数</p><p>如果W服从正态分布，那么这就是所需要的参数，但如果假设W服从均匀分布，那么</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/Xavier/result.png" alt="result"></p><p>但是之前有假设激活函数在0周围的导数接近1，所以忽略了激活函数的作用，不同激活函数在0周围的导数不同，需要给方差乘上导数的倒数</p><table><thead><tr><th>Activation Function</th><th>Uniform Distribution</th></tr></thead><tbody><tr><td>sigmoid</td><td><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/Xavier/96.png" alt="96"></td></tr><tr><td>tanh</td><td><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/Xavier/6.png" alt="6"></td></tr><tr><td>ReLU</td><td><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/Xavier/12.png" alt="12"></td></tr></tbody></table><h2 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h2><p><strong>tensorflow的实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xavier_init</span><span class="params">(fan_in, fan_out, constant = <span class="number">1</span>)</span>:</span></span><br><span class="line">    low = -constant * np.sqrt(<span class="number">6.0</span> / (fan_in + fan_out))</span><br><span class="line">    high = constant * np.sqrt(<span class="number">6.0</span> / (fan_in + fan_out))</span><br><span class="line">    <span class="keyword">return</span> tf.random_uniform((fan_in, fan_out), minval=low, maxval=high, dtype=tf.float32)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Ph0en1xGSeek/Machine_Learning/blob/master/AutoEncoder/ae.py" target="_blank" rel="noopener">完整代码</a>里实现了一个使用Xavier方法初始化的单层自编码器</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/22/Xavier/#disqus_thread</comments>
    </item>
    
    <item>
      <title>受限制玻尔兹曼机(RBM)的能量函数及其梯度求解</title>
      <link>https://www.ph0en1x.space/2018/02/21/RBM_energy/</link>
      <guid>https://www.ph0en1x.space/2018/02/21/RBM_energy/</guid>
      <pubDate>Tue, 20 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 在前面的一篇文章 &lt;a href=&quot;https://www.ph0en1x.space/2018/02/15/RBM/&quot;&gt;受限制玻尔兹曼机(Restricted Bolzmann Machine)以及自编码器(Autoencoder)&lt;/a&gt;中我们提到了RBM的能量函数这一概念以及对比散度(CD)的快速采样的训练方法，但我一直纠结与为何Hinton大神能够从能量函数和Gibbs Sampling中获得CD-k采样算法，两个式子看似没有关联。于是我花了几天的时间，终于对RBM这个结构有了更深一步的了解。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 在前面的一篇文章 <a href="https://www.ph0en1x.space/2018/02/15/RBM/">受限制玻尔兹曼机(Restricted Bolzmann Machine)以及自编码器(Autoencoder)</a>中我们提到了RBM的能量函数这一概念以及对比散度(CD)的快速采样的训练方法，但我一直纠结与为何Hinton大神能够从能量函数和Gibbs Sampling中获得CD-k采样算法，两个式子看似没有关联。于是我花了几天的时间，终于对RBM这个结构有了更深一步的了解。</p></blockquote><a id="more"></a><h2 id="一、能量函数与概率分布"><a href="#一、能量函数与概率分布" class="headerlink" title="一、能量函数与概率分布"></a>一、能量函数与概率分布</h2><p>之前讲到受限制玻尔兹曼机时，我们提到，RBM是由一个可见层(visible, v)与隐藏层(hiddenm, h)组成，如下图，W在物理中表示系统内部能量转换，比如分子间碰撞产生的能量传递，同时有a, b两个偏置项，在物理中表示外来因素的影响，与外界的能量交换：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/RBM2.png" alt="RBM2"></p><p>能量函数的定义是：</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2596eb7f60f387129fd3bbc075f37898eded353b" alt="E（v，h）=  -  \ sum_i a_i v_i  -  \ sum_j b_j h_j  -  \ sum_i \ sum_j v_i w_ {i，j} h_j"></p><p>用矩阵来表示就是</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ef4edf17279787e29bb1a581316d17d70de2072e" alt="E（v，h）= -a ^ {\ mathrm {T}} v -b ^ {\ mathrm {T}} h -v ^ {\ mathrm {T}} W h"></p><p>能量函数具体的含义涉及物理领域，在本文不会具体介绍，具体请阅读Ising Model的相关文章，本文具体介绍如何从能量函数中推倒出Gibbs Sampling和CD-k</p><p>v, h联合概率分布是</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/Pvh.png" alt="Pvh"></p><p>其中Z是所有[v, h]对对应的能量的总和，称为归一化因子或配分函数(Partition Function)</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/Z_theta.png" alt="Z_theta"></p><p>v与h的边缘概率分布如下</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/Pv.png" alt="Pv"></p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/Ph.png" alt="Ph"></p><p>条件分布</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/sigm1.png" alt="sigm1"></p><p>同理</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/sigm2.png" alt="sigm2"></p><p>由于RBM层内无连接，所以同一层内的变量还具有相互独立性，即</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/c4566cdd12bbe50a3fcd0c6a4e9061642976a056" alt="P(v|h) = \prod_{i=1}^m P(v_i|h)"></p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/127f9f639f8a6118737617b249fba99c26c54a40" alt="P(h|v) = \prod_{j=1}^n P(h_j|v)"></p><h2 id="二、对数似然函数"><a href="#二、对数似然函数" class="headerlink" title="二、对数似然函数"></a>二、对数似然函数</h2><p>上面定义了那么多，然而要开始正式的梯度优化，我们还差一个优化目标，现在就要正式地定义损失函数：</p><p>之前曾经提到过，受限制玻尔兹曼机的训练目的是让原始数据的分布得到最大的保留，用最大似然估计来表示就是让<code>P(v)</code>最大。采用对数似然函数，则式子如下：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/Ln.png" alt="Ln"></p><p>对参数求梯度：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/gradient.png" alt="gradient"></p><p>所以只要能求得 <img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/partial.png" alt="partial"></p><p>就可以求出最终的梯度,RBM每层有W, a, b三个不同的参数，则需要分别对三个参数分别求导：</p><ul><li><p>W</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/wij.png" alt="wij"></p></li><li><p>b与W的推导过程类似，结果为：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/bj.png" alt="bj"></p></li><li><p>a的推导更加的简单</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/ai.png" alt="ai"></p></li></ul><p>把上面三个式子带回到梯度的公式中，就可以得到</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/result.png" alt="result"></p><p>这就是Gibbs采样和CD-k采样的来源，只是采用了不同的估计方法来确定概率分布。</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/21/RBM_energy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Fcitx下全角中括号无法输入的问题</title>
      <link>https://www.ph0en1x.space/2018/02/15/fcitx/</link>
      <guid>https://www.ph0en1x.space/2018/02/15/fcitx/</guid>
      <pubDate>Wed, 14 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 本篇文章将会介绍如何修复ubuntu下Fcitx输入法无法输入全角（中文）中括号【】并使用[]来切换候选字的方法&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 本篇文章将会介绍如何修复ubuntu下Fcitx输入法无法输入全角（中文）中括号【】并使用[]来切换候选字的方法</p></blockquote><a id="more"></a><p><strong>操作步聚：</strong></p><ol><li><p>打开fcitx字符映射文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /usr/share/fcitx/data/punc.mb.zh_CN</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>修改</p><p>将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ ·</span><br><span class="line">] 「 」</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ 【</span><br><span class="line">]  】</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>重启输入法完成修改</li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/15/fcitx/#disqus_thread</comments>
    </item>
    
    <item>
      <title>受限制玻尔兹曼机(Restricted Bolzmann Machine)以及自编码器(Autoencoder)</title>
      <link>https://www.ph0en1x.space/2018/02/15/RBM/</link>
      <guid>https://www.ph0en1x.space/2018/02/15/RBM/</guid>
      <pubDate>Wed, 14 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 受限制玻尔兹曼机(Restricted Bolzmann Machine, RBM)与自编码器(Autoencoder, AE)是神经网络的两种基本结构，两个结构都能起到降维的作用，都可以用来对神经网络进行预训练（pre-training），这种预训练都是无监督的。由于RBM与MLP及其相似，一直以来我就困惑于他们两者，终于花了几天时间来搞清楚他们的区别和训练方法，发现他们甚至不是并列的关系。。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 受限制玻尔兹曼机(Restricted Bolzmann Machine, RBM)与自编码器(Autoencoder, AE)是神经网络的两种基本结构，两个结构都能起到降维的作用，都可以用来对神经网络进行预训练（pre-training），这种预训练都是无监督的。由于RBM与MLP及其相似，一直以来我就困惑于他们两者，终于花了几天时间来搞清楚他们的区别和训练方法，发现他们甚至不是并列的关系。。</p></blockquote><a id="more"></a><h2 id="一、知识脉络"><a href="#一、知识脉络" class="headerlink" title="一、知识脉络"></a>一、知识脉络</h2><p>受限制玻尔兹曼机 -&gt; 深度信念网络(Deep Blief Network, DBN)</p><p>自编码器 -&gt; 堆叠自编码器(Stacked Autoencoderm, SAE)</p><h2 id="二、自编码器"><a href="#二、自编码器" class="headerlink" title="二、自编码器"></a>二、自编码器</h2><p>自编码器的输入维度与输出维度相等，训练目的是使数据的特征得到最大的保留，去除冗余信息，一个单层的自编码器结构如下图</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/AE3.png" alt="AE3"></p><p>当然一个自编码器也可以有很多层：</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/AE1.png" alt="AE1"></p><p>简化来看就是输入层-&gt;隐藏层-&gt;输出层，自编码器的目的就是使重建(reconstruction)的输出层能尽量还原输入层，同时获得中间隐藏层(最窄的橙色那层)既是降维的结果。若输入层到隐藏层间的部分称为编码器(灰色)，记号为f(x)，隐藏层到输出层之间的部分称为解码器(黄色)，记号为g(x)，那么自编码器的数学训练目标就是</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/eq1.gif" alt="eq1"></p><h2 id="三、受限制玻尔兹曼机"><a href="#三、受限制玻尔兹曼机" class="headerlink" title="三、受限制玻尔兹曼机"></a>三、受限制玻尔兹曼机</h2><p>受限制玻尔兹曼机是一个双层结构，可见层(visible)与隐藏层(hidden)，图结构为一个二分图，即可见层只与隐藏层之间有连接，但是层内是无连接的，因此RBM的性质：<strong>当给定可见层神经元的状态时，各隐藏层神经元的激活条件独立；反之当给定隐藏层神经元的状态时，可见层神经元的激活也条件独立</strong>。基本结构如下</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/RBM1.png" alt="RBM1"></p><p>受限制玻尔兹曼机的训练目的是为了最大程度的保留概率分布，定义了一个能量函数的概念</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2596eb7f60f387129fd3bbc075f37898eded353b" alt="E（v，h）=  -  \ sum_i a_i v_i  -  \ sum_j b_j h_j  -  \ sum_i \ sum_j v_i w_ {i，j} h_j"></p><p>用矩阵来表示就是</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ef4edf17279787e29bb1a581316d17d70de2072e" alt="E（v，h）= -a ^ {\ mathrm {T}} v -b ^ {\ mathrm {T}} h -v ^ {\ mathrm {T}} W h"></p><p>a与b分别是可视层与隐藏层的偏置项(bias)</p><p>v, h联合概率分布是</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/cfc031033f9ef72633258c4d8a7bbdbbecfd01ba" alt="P（v，h）= \ frac {1} {Z} e ^ { -  E（v，h）}"></p><p>其中Z是所有[v, h]对对应的能量的总和，v的边缘概率分布如下，h同理</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/70aed07d8a53e0f60dd5679ceae1799c69cbc62f" alt="P（v）= \ frac {1} {Z} \ sum_h e ^ { -  E（v，h）}"></p><p>由于受限玻尔兹曼机结构上的特点，所以各隐藏层之间的神经元条件概率独立，即</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/127f9f639f8a6118737617b249fba99c26c54a40" alt="P（h | v）= \ prod_ {j = 1} ^ n P（h_j | v）"></p><p>可见层v同理</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/c4566cdd12bbe50a3fcd0c6a4e9061642976a056" alt="P（v | h）= \ prod_ {i = 1} ^ m P（v_i | h）"></p><p>能量函数的具体推导过程将会在后面的文章中详细解释</p><h2 id="四、训练方法"><a href="#四、训练方法" class="headerlink" title="四、训练方法"></a>四、训练方法</h2><p>就像RBM是由物理模型转化过来一样，训练方法与传统的反向传播(BP)也不一样</p><p>RBM最早的训练方法有Gibbs sampling，通过不断地来回采样来训练，如下图</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/gibbs.PNG" alt="gibbs"></p><p>然而这样的方法太慢，所以Hinton大神又提出了<strong>CD-k(contrastive divergence)</strong>算法，即只需要来回重复k次就可以，以CD-1为例:</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/CD.png" alt="CD"></p><p>就可以完成一次迭代，这就像是两种不同温度的液体进行混合，如果两者的温度差距较大，在混合的过程中就会产生较大的梯度，而受限制玻尔兹曼机的训练目标就是使得两边的“温度”能够尽量的相近，而在数据中这个“温度”的体现就是数据分布。也就是说，使用RBM进行模型的初始化训练能够最大程度的保留数据分布，防止梯度爆炸和梯度消失问题的出现。</p><h2 id="五、深度信念网络与逐层训练"><a href="#五、深度信念网络与逐层训练" class="headerlink" title="五、深度信念网络与逐层训练"></a>五、深度信念网络与逐层训练</h2><p>由多层受限制玻尔兹曼机堆叠起来的网络叫作深度信念网络(DBN)。深度信念网络在最后一层接入一个Softmax层用作分类，训练的时候采取逐层训练+微调的方式</p><ul><li>逐层训练就是从输入层开始将网络的相邻两层当作一个受限制玻尔兹曼机进行无监督训练，训练方法见上一节，训练后将上一个RBM的隐藏层当作下一个RBM的可见层继续</li><li>逐层无监督训练完毕后，将进行反向传播训练对模型进行微调，从输入端输入数据，最后从输出端开始进行反向传播</li></ul><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/RBM/AE2.png" alt="AE2"></p><p>自编码器虽然只是要保证输出端与输入端尽量接近，但是随着自编码器堆叠深度的加深，就会出现类似<strong>梯度弥散</strong>与<strong>梯度爆炸</strong>等问题，Hinton大神同样也使用了类似RBM的训练方法对深度自编码器进行逐层训练，使模型的得到了很好的初始化，加快了模型的解的最优性和收敛速度。</p><h2 id="六、参考"><a href="#六、参考" class="headerlink" title="六、参考"></a>六、参考</h2><ul><li><a href="http://www.cnblogs.com/jhding/p/5687696.html" target="_blank" rel="noopener">受限玻尔兹曼机与深度置信网络</a></li></ul><ul><li>Hinton G E. A practical guide to training restricted Boltzmann machines[M]//Neural networks: Tricks of the trade. Springer, Berlin, Heidelberg, 2012: 599-619.</li><li>Bengio Y, Lamblin P, Popovici D, et al. Greedy layer-wise training of deep networks[C]//Advances in neural information processing systems. 2007: 153-160.</li><li>Hinton G E, Osindero S, Teh Y W. A fast learning algorithm for deep belief nets[J]. Neural computation, 2006, 18(7): 1527-1554.</li><li>Hinton G E, Salakhutdinov R R. Reducing the dimensionality of data with neural networks[J]. science, 2006, 313(5786): 504-507.</li></ul>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/15/RBM/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在Ubuntu下安装Nvidia最新驱动</title>
      <link>https://www.ph0en1x.space/2018/02/09/ubuntu_nvidia/</link>
      <guid>https://www.ph0en1x.space/2018/02/09/ubuntu_nvidia/</guid>
      <pubDate>Thu, 08 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;众所周知Nvidia和Ubuntu向来不对付，Nvidia不会将自己的驱动开源，而Ubuntu社区开发的nouveau开源驱动又极大的限制了Nvidia显卡驱动原有的性能，给基于深度学习的研究造成了不小的麻烦。而有的时候由于Windows的种种原因，深度学习的开发又不得不在Linux上完成。这篇笔记将会记录一种安装Nvidia最新驱动的简便方法(不过当然不是直接用系统给的那个选项直接改)，使用官方PPA源来安装最新驱动。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>众所周知Nvidia和Ubuntu向来不对付，Nvidia不会将自己的驱动开源，而Ubuntu社区开发的nouveau开源驱动又极大的限制了Nvidia显卡驱动原有的性能，给基于深度学习的研究造成了不小的麻烦。而有的时候由于Windows的种种原因，深度学习的开发又不得不在Linux上完成。这篇笔记将会记录一种安装Nvidia最新驱动的简便方法(不过当然不是直接用系统给的那个选项直接改)，使用官方PPA源来安装最新驱动。</p></blockquote><a id="more"></a><ol><li><p>禁用nouveau驱动</p><p>打开黑名单文件<code>blacklist.conf</code>加入nouveau驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><p>如果有权限问题请自行<code>chmod</code>调整权限</p><p>在文件末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">blacklist vga16fb</span><br><span class="line">blacklist nouveau</span><br><span class="line">blacklist rivafb</span><br><span class="line">blacklist rivatv</span><br><span class="line">blacklist nvidiafb</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>刷新内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>重启系统后检查是否禁用成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>添加Nvidia官方PPA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>并查看可以使用的驱动版本号(到官网上查看也可以)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br></pre></td></tr></table></figure><p>​</p></li><li><p><code>ctrl + alt + F1</code>进入tty并登录</p></li><li><p>关闭图形界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>apt安装驱动并重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nvidia-390</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>390是刚才查看到的版本号的第一个部分</p><p>​</p></li><li><p>重启后查看显卡是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nvidia-smi</span><br><span class="line">sudo nvidia-settings</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/importance_sampling/nvidia_gpu.png" alt="GTX 1050 Ti"></p><hr><ul><li><p>按照上面说的方法安装完成，打开关于计算机界面，应该就能看到，显卡被改变成了你的Nvidia显卡型号。（原先是Intel显卡）</p></li><li><p>注意如果是双系统，需要关闭BIOS的安全启动(Secure Boot)</p></li><li><p>安装后使用Nvidia驱动不出意外应该显示的时候会出现画面撕裂、卡顿的情况。这我暂时没找到方法解决，只能不使用Nvidia显卡的时候切换成Intel显卡，这样还省电</p></li><li><p>还有一种方法是编译官方的二进制文件，这种方法应该是最好的，但是每次升级内核就要重新编译一次，本着不折腾的原则，还是选择了这种方法</p></li><li><p>自己编译源码的方法，只需要把第7步替换成运行从英伟达官网上下载的安装包，然后根据提示安装就可以了</p><p>​</p></li></ul>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/09/ubuntu_nvidia/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Importance Sampling (重要性采样)</title>
      <link>https://www.ph0en1x.space/2018/02/08/importance_sampling/</link>
      <guid>https://www.ph0en1x.space/2018/02/08/importance_sampling/</guid>
      <pubDate>Wed, 07 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 重要性采样是我在学习强化学习的过程中遇到的一种采样方法，是为了应对当要进行采样的样本分布难以获得时的问题。重要性采样使用另一个采样来代替当前的采样&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 重要性采样是我在学习强化学习的过程中遇到的一种采样方法，是为了应对当要进行采样的样本分布难以获得时的问题。重要性采样使用另一个采样来代替当前的采样</p></blockquote><a id="more"></a><h3 id="什么是采样的常见问题"><a href="#什么是采样的常见问题" class="headerlink" title="什么是采样的常见问题"></a>什么是采样的常见问题</h3><ol><li>抛硬币问题，通过无限多次的抛硬币实验来估计硬币正面朝上的概率</li><li>面积问题，通过向特定区域撒豆子，通过计算豆子的数量和区域总面积，来计算某一个子区域的面积</li></ol><h3 id="蒙特卡罗法求积分"><a href="#蒙特卡罗法求积分" class="headerlink" title="蒙特卡罗法求积分"></a>蒙特卡罗法求积分</h3><p><img src="http://latex.codecogs.com/gif.latex?\int&space;_{a}^{b}f(x)dx&space;=&space;\frac{b-a}{N}\sum_{i=1}^{N}f(x_i)" title="\int _{a}^{b}f(x)dx = \frac{b-a}{N}\sum_{i=1}^{N}f(x_i)"></p><p>通过在[a, b]区间内按均匀分布来进行采样求得f(x)在[a, b]区间内的平均值，然后乘上b-a得到积分</p><h3 id="蒙特卡洛法求期望"><a href="#蒙特卡洛法求期望" class="headerlink" title="蒙特卡洛法求期望"></a>蒙特卡洛法求期望</h3><p>期望就相当于在求积分的时候加入一个<code>重要性</code>的概念，即变量服从一个概率分布，则上述公式变为</p><p><img src="http://latex.codecogs.com/gif.latex?E\left&space;|&space;f&space;\right&space;|&space;=&space;\int&space;_{x}p(x)f(x)dx&space;=&space;\frac{1}{N}\sum_{i=1}^{N}f(x_i)" title="E\left | f \right | = \int _{x}p(x)f(x)dx = \frac{1}{N}\sum_{i=1}^{N}f(x_i)"></p><p>按照p(x)的分布来产生随机数进行采样</p><p>这时，如果p(x)未知，那就无法针对p(x)进行采样来估计期望值，那怎么办呢？这时候就要借助这篇笔记的主角——<code>重要性采样</code></p><h3 id="重要性采样"><a href="#重要性采样" class="headerlink" title="重要性采样"></a>重要性采样</h3><p>这时候需要引入一个新的已知的分布q(x)然后把原来的公式更改为</p><p><img src="http://latex.codecogs.com/gif.latex?E\left&space;|&space;f&space;\right&space;|&space;=&space;\int&space;_x&space;q(x)(\frac{p(x)}{q(x)}f(x))dx" title="E\left | f \right | = \int _x q(x)(\frac{p(x)}{q(x)}f(x))dx"></p><p>这样我们就可以针对q(x)来对<code>p(x)/q(x)*f(x)</code>来进行采样了</p><p><img src="http://latex.codecogs.com/gif.latex?E\left&space;|&space;f&space;\right&space;|&space;=&space;\frac{1}{N}\sum_{i=1}^{N}\frac{p(x'_i)}{q(x'_i)}f(x'_i)" title="E\left | f \right | = \frac{1}{N}\sum_{i=1}^{N}\frac{p(x'_i)}{q(x'_i)}f(x'_i)"></p><p>这就是重要性采样。</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/08/importance_sampling/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforce 920C Swap Adjacent Elements</title>
      <link>https://www.ph0en1x.space/2018/02/07/codeforce920C/</link>
      <guid>https://www.ph0en1x.space/2018/02/07/codeforce920C/</guid>
      <pubDate>Tue, 06 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;You have an array &lt;em&gt;a&lt;/em&gt; consisting of &lt;em&gt;n&lt;/em&gt; integers. Each integer from 1 to &lt;em&gt;n&lt;/em&gt; appears exactly once in this array.&lt;/p&gt;
&lt;p&gt;For some indices &lt;em&gt;i&lt;/em&gt; (1 ≤ &lt;em&gt;i&lt;/em&gt; ≤ &lt;em&gt;n&lt;/em&gt; - 1) it is possible to swap &lt;em&gt;i&lt;/em&gt;-th element with (&lt;em&gt;i&lt;/em&gt; + 1)-th, for other indices it is not possible. You may perform any number of swapping operations any order. There is no limit on the number of times you swap &lt;em&gt;i&lt;/em&gt;-th element with (&lt;em&gt;i&lt;/em&gt; + 1)-th (if the position is not forbidden).&lt;/p&gt;
&lt;p&gt;Can you make this array sorted in ascending order performing some sequence of swapping operations?&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>You have an array <em>a</em> consisting of <em>n</em> integers. Each integer from 1 to <em>n</em> appears exactly once in this array.</p><p>For some indices <em>i</em> (1 ≤ <em>i</em> ≤ <em>n</em> - 1) it is possible to swap <em>i</em>-th element with (<em>i</em> + 1)-th, for other indices it is not possible. You may perform any number of swapping operations any order. There is no limit on the number of times you swap <em>i</em>-th element with (<em>i</em> + 1)-th (if the position is not forbidden).</p><p>Can you make this array sorted in ascending order performing some sequence of swapping operations?</p></blockquote><a id="more"></a><p>Input</p><blockquote><p>The first line contains one integer <em>n</em> (2 ≤ <em>n</em> ≤ 200000) — the number of elements in the array.</p><p>The second line contains <em>n</em> integers <em>a</em>1, <em>a</em>2, …, <em>a**n</em> (1 ≤ <em>a**i</em> ≤ 200000) — the elements of the array. Each integer from 1 to <em>n</em> appears exactly once.</p><p>The third line contains a string of <em>n</em> - 1 characters, each character is either 0 or 1. If <em>i</em>-th character is 1, then you can swap <em>i</em>-th element with (<em>i</em> + 1)-th any number of times, otherwise it is forbidden to swap <em>i</em>-th element with (<em>i</em> + 1)-th.</p></blockquote><p>Output</p><blockquote><p>If it is possible to sort the array in ascending order using any sequence of swaps you are allowed to make, print YES. Otherwise, print NO.</p></blockquote><p>Examples</p><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 2 5 3 4 6</span><br><span class="line">01110</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 2 5 3 4 6</span><br><span class="line">01010</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br></pre></td></tr></table></figure><p>Note</p><blockquote><p>In the first example you may swap <em>a</em>3 and <em>a</em>4, and then swap <em>a</em>4 and <em>a</em>5.</p></blockquote><hr><ul><li>每段连续的1以及最后一个1右边的位置的数都是可以相互交换的，但是和其他的部分之间不能互换，所以每段区间<code>[l, r]</code>不能出现超出区间<code>[l+1, r+1]</code>范围的数</li><li>剩余的部分就是不能进行交换的部分，即数必须等于下标+1</li></ul><hr><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num))</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = i;</span><br><span class="line">            <span class="keyword">while</span>(str[i] == <span class="string">'1'</span> &amp;&amp; i &lt; num<span class="number">-1</span>)</span><br><span class="line">                i++;</span><br><span class="line">            <span class="keyword">int</span> r = i;</span><br><span class="line">            <span class="keyword">if</span>(l == r &amp;&amp; arr[l] != l+<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line"><span class="comment">//                cout &lt;&lt; "sdf: " &lt;&lt; l &lt;&lt; endl;</span></span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = l; j &lt;= r; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; r+<span class="number">1</span> || arr[j] &lt; l+<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line"><span class="comment">//                    cout &lt;&lt; l &lt;&lt; ' ' &lt;&lt; r &lt;&lt; endl;</span></span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/07/codeforce920C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在Linux发行版Firefox下安装最新版Flash</title>
      <link>https://www.ph0en1x.space/2018/02/07/firefox_flash/</link>
      <guid>https://www.ph0en1x.space/2018/02/07/firefox_flash/</guid>
      <pubDate>Tue, 06 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;虽然在Windows上Chrome浏览器占据着霸主地位，但是在Linux上，明显面向开源社区的Firefox对各种发行版例如Ubuntu等优化得更棒。虽然Html5是趋势，但是Flash在日常浏览网页中依旧不能少。Ubuntu中的Firefox没有像Chrome一样内置Pepper Flash插件，而Adobe早已对Ubuntu停更。那么要如何为Ubuntu下的Firefox安装最新的Flash插件呢？&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>虽然在Windows上Chrome浏览器占据着霸主地位，但是在Linux上，明显面向开源社区的Firefox对各种发行版例如Ubuntu等优化得更棒。虽然Html5是趋势，但是Flash在日常浏览网页中依旧不能少。Ubuntu中的Firefox没有像Chrome一样内置Pepper Flash插件，而Adobe早已对Ubuntu停更。那么要如何为Ubuntu下的Firefox安装最新的Flash插件呢？</p></blockquote><a id="more"></a><ol><li>进入 <a href="https://get.adobe.com/cn/flashplayer/" target="_blank" rel="noopener">Download Adobe Flash Player</a>  选择<code>.tar.gz 适用于Linux</code>下载</li><li>下载后解压<code>flash_player_npapi_linux.x86_64.tar.gz</code>，进入<code>flash_player_npapi_linux.x86_64</code>中复制<code>libflashplayer.so</code></li><li>在<code>~/.mozilla</code>下新建文件夹<code>plugins</code></li><li>把<code>libflashplayer.so</code>粘贴到<code>plugins</code>下</li><li>重启Firefox，完成最新Flash安装</li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/07/firefox_flash/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforce 920A Water The Garden</title>
      <link>https://www.ph0en1x.space/2018/02/06/codeforce920A/</link>
      <guid>https://www.ph0en1x.space/2018/02/06/codeforce920A/</guid>
      <pubDate>Mon, 05 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;It is winter now, and Max decided it’s about time he watered the garden.&lt;/p&gt;
&lt;p&gt;The garden can be represented as &lt;em&gt;n&lt;/em&gt; consecutive garden beds, numbered from 1 to &lt;em&gt;n&lt;/em&gt;. &lt;em&gt;k&lt;/em&gt; beds contain water taps (&lt;em&gt;i&lt;/em&gt;-th tap is located in the bed &lt;em&gt;x**i&lt;/em&gt;), which, if turned on, start delivering water to neighbouring beds. If the tap on the bed &lt;em&gt;x**i&lt;/em&gt; is turned on, then after one second has passed, the bed &lt;em&gt;x**i&lt;/em&gt; will be watered; after two seconds have passed, the beds from the segment [&lt;em&gt;x**i&lt;/em&gt; - 1, &lt;em&gt;x**i&lt;/em&gt; + 1] will be watered (if they exist); after &lt;em&gt;j&lt;/em&gt; seconds have passed (&lt;em&gt;j&lt;/em&gt; is an integer number), the beds from the segment [&lt;em&gt;x**i&lt;/em&gt; - (&lt;em&gt;j&lt;/em&gt; - 1), &lt;em&gt;x**i&lt;/em&gt; + (&lt;em&gt;j&lt;/em&gt; - 1)] will be watered (if they exist). Nothing changes during the seconds, so, for example, we can’t say that the segment [&lt;em&gt;x**i&lt;/em&gt; - 2.5, &lt;em&gt;x**i&lt;/em&gt; + 2.5] will be watered after 2.5seconds have passed; only the segment [&lt;em&gt;x**i&lt;/em&gt; - 2, &lt;em&gt;x**i&lt;/em&gt; + 2] will be watered at that moment.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://codeforces.com/predownloaded/7d/8b/7d8b9f95922d20106beb22a5fa750fd59af973a3.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;The garden from test 1. White colour denotes a garden bed without a tap, red colour — a garden bed with a tap.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://codeforces.com/predownloaded/55/94/5594fb9263dcb304cad0e8feb7cc1757bd4bb8b8.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;The garden from test 1 after 2 seconds have passed after turning on the tap. White colour denotes an unwatered garden bed, blue colour — a watered bed.&lt;/p&gt;
&lt;p&gt;Max wants to turn on all the water taps at the same moment, and now he wonders, what is the minimum number of seconds that have to pass after he turns on some taps until the whole garden is watered. Help him to find the answer!&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>It is winter now, and Max decided it’s about time he watered the garden.</p><p>The garden can be represented as <em>n</em> consecutive garden beds, numbered from 1 to <em>n</em>. <em>k</em> beds contain water taps (<em>i</em>-th tap is located in the bed <em>x**i</em>), which, if turned on, start delivering water to neighbouring beds. If the tap on the bed <em>x**i</em> is turned on, then after one second has passed, the bed <em>x**i</em> will be watered; after two seconds have passed, the beds from the segment [<em>x**i</em> - 1, <em>x**i</em> + 1] will be watered (if they exist); after <em>j</em> seconds have passed (<em>j</em> is an integer number), the beds from the segment [<em>x**i</em> - (<em>j</em> - 1), <em>x**i</em> + (<em>j</em> - 1)] will be watered (if they exist). Nothing changes during the seconds, so, for example, we can’t say that the segment [<em>x**i</em> - 2.5, <em>x**i</em> + 2.5] will be watered after 2.5seconds have passed; only the segment [<em>x**i</em> - 2, <em>x**i</em> + 2] will be watered at that moment.</p><p><img src="http://codeforces.com/predownloaded/7d/8b/7d8b9f95922d20106beb22a5fa750fd59af973a3.png" alt="img"></p><p>The garden from test 1. White colour denotes a garden bed without a tap, red colour — a garden bed with a tap.</p><p><img src="http://codeforces.com/predownloaded/55/94/5594fb9263dcb304cad0e8feb7cc1757bd4bb8b8.png" alt="img"></p><p>The garden from test 1 after 2 seconds have passed after turning on the tap. White colour denotes an unwatered garden bed, blue colour — a watered bed.</p><p>Max wants to turn on all the water taps at the same moment, and now he wonders, what is the minimum number of seconds that have to pass after he turns on some taps until the whole garden is watered. Help him to find the answer!</p></blockquote><a id="more"></a><p>Input</p><blockquote><p>The first line contains one integer <em>t</em> — the number of test cases to solve (1 ≤ <em>t</em> ≤ 200).</p><p>Then <em>t</em> test cases follow. The first line of each test case contains two integers <em>n</em> and <em>k</em>(1 ≤ <em>n</em> ≤ 200, 1 ≤ <em>k</em> ≤ <em>n</em>) — the number of garden beds and water taps, respectively.</p><p>Next line contains <em>k</em> integers <em>x**i</em> (1 ≤ <em>x**i</em> ≤ <em>n</em>) — the location of <em>i</em>-th water tap. It is guaranteed that for each <img src="http://codeforces.com/predownloaded/de/55/de55008ae108af17ee7130913a93e15d18d401e2.png" alt="img"> condition <em>x**i</em> - 1 &lt; <em>x**i</em> holds.</p><p>It is guaranteed that the sum of <em>n</em> over all test cases doesn’t exceed 200.</p><p>Note that in hacks you have to set <em>t</em> = 1.</p></blockquote><p>Output</p><blockquote><p>For each test case print one integer — the minimum number of seconds that have to pass after Max turns on some of the water taps, until the whole garden is watered.</p></blockquote><p>Example</p><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5 1</span><br><span class="line">3</span><br><span class="line">3 3</span><br><span class="line">1 2 3</span><br><span class="line">4 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>Note</p><blockquote><p>The first example consists of 3 tests:</p><ol><li>There are 5 garden beds, and a water tap in the bed 3. If we turn it on, then after 1second passes, only bed 3 will be watered; after 2 seconds pass, beds [1, 3] will be watered, and after 3 seconds pass, everything will be watered.</li><li>There are 3 garden beds, and there is a water tap in each one. If we turn all of them on, then everything will be watered after 1 second passes.</li><li>There are 4 garden beds, and only one tap in the bed 1. It will take 4 seconds to water, for example, bed 4.</li></ol></blockquote><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n, k, tmp = <span class="number">0</span>, pretmp;</span><br><span class="line">    <span class="keyword">int</span> mi = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                pretmp = tmp;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tmp);</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span>)</span><br><span class="line">                    mi = tmp;</span><br><span class="line">                <span class="keyword">if</span>(j &gt; <span class="number">0</span> &amp;&amp; j &lt; k<span class="number">-1</span>)</span><br><span class="line">                    mi = max(mi, (tmp-pretmp+<span class="number">2</span>)/<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span>(j == k<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    mi = max(mi, (tmp-pretmp+<span class="number">2</span>)/<span class="number">2</span>);</span><br><span class="line">                    mi = max(mi, n-tmp+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mi);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/06/codeforce920A/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforce 920B Tea Queue</title>
      <link>https://www.ph0en1x.space/2018/02/06/codeforce920B/</link>
      <guid>https://www.ph0en1x.space/2018/02/06/codeforce920B/</guid>
      <pubDate>Mon, 05 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;Recently &lt;em&gt;n&lt;/em&gt; students from city S moved to city P to attend a programming camp.&lt;/p&gt;
&lt;p&gt;They moved there by train. In the evening, all students in the train decided that they want to drink some tea. Of course, no two people can use the same teapot simultaneously, so the students had to form a queue to get their tea.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;i&lt;/em&gt;-th student comes to the end of the queue at the beginning of &lt;em&gt;l**i&lt;/em&gt;-th second. If there are multiple students coming to the queue in the same moment, then the student with greater index comes after the student with lesser index. Students in the queue behave as follows: if there is nobody in the queue before the student, then he uses the teapot for exactly one second and leaves the queue with his tea; otherwise the student waits for the people before him to get their tea. If at the beginning of &lt;em&gt;r**i&lt;/em&gt;-th second student &lt;em&gt;i&lt;/em&gt; still cannot get his tea (there is someone before him in the queue), then he leaves the queue without getting any tea.&lt;/p&gt;
&lt;p&gt;For each student determine the second he will use the teapot and get his tea (if he actually gets it).&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Recently <em>n</em> students from city S moved to city P to attend a programming camp.</p><p>They moved there by train. In the evening, all students in the train decided that they want to drink some tea. Of course, no two people can use the same teapot simultaneously, so the students had to form a queue to get their tea.</p><p><em>i</em>-th student comes to the end of the queue at the beginning of <em>l**i</em>-th second. If there are multiple students coming to the queue in the same moment, then the student with greater index comes after the student with lesser index. Students in the queue behave as follows: if there is nobody in the queue before the student, then he uses the teapot for exactly one second and leaves the queue with his tea; otherwise the student waits for the people before him to get their tea. If at the beginning of <em>r**i</em>-th second student <em>i</em> still cannot get his tea (there is someone before him in the queue), then he leaves the queue without getting any tea.</p><p>For each student determine the second he will use the teapot and get his tea (if he actually gets it).</p></blockquote><a id="more"></a><p>Input</p><blockquote><p>The first line contains one integer <em>t</em> — the number of test cases to solve (1 ≤ <em>t</em> ≤ 1000).</p><p>Then <em>t</em> test cases follow. The first line of each test case contains one integer <em>n</em> (1 ≤ <em>n</em> ≤ 1000) — the number of students.</p><p>Then <em>n</em> lines follow. Each line contains two integer <em>l**i</em>, <em>r**i</em> (1 ≤ <em>l**i</em> ≤ <em>r**i</em> ≤ 5000) — the second <em>i</em>-th student comes to the end of the queue, and the second he leaves the queue if he still cannot get his tea.</p><p>It is guaranteed that for every <img src="http://codeforces.com/predownloaded/bf/e6/bfe66dbacb0b1fa8546d91f0a9af8825c8ff379e.png" alt="img"> condition <em>l**i</em> - 1 ≤ <em>l**i</em> holds.</p><p>The sum of <em>n</em> over all test cases doesn’t exceed 1000.</p><p>Note that in hacks you have to set <em>t</em> = 1.</p></blockquote><p>Output</p><blockquote><p>For each test case print <em>n</em> integers. <em>i</em>-th of them must be equal to the second when <em>i</em>-th student gets his tea, or 0 if he leaves without tea.</p></blockquote><p>Example</p><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">3</span><br><span class="line">1 5</span><br><span class="line">1 1</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2 </span><br><span class="line">1 0 2</span><br></pre></td></tr></table></figure><p>Note</p><blockquote><p>The example contains 2 tests:</p><ol><li>During 1-st second, students 1 and 2 come to the queue, and student 1 gets his tea. Student 2 gets his tea during 2-nd second.</li><li>During 1-st second, students 1 and 2 come to the queue, student 1 gets his tea, and student 2 leaves without tea. During 2-nd second, student 3 comes and gets his tea.</li></ol></blockquote><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">1005</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">        cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">            <span class="keyword">if</span>(l &lt;= cur)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(cur &gt;= r)</span><br><span class="line">                    arr[i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    arr[i] = ++cur;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cur = l;</span><br><span class="line">                arr[i] = l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/06/codeforce920B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 30 Substring with Concatenation of All Words</title>
      <link>https://www.ph0en1x.space/2018/02/05/leetcode30/</link>
      <guid>https://www.ph0en1x.space/2018/02/05/leetcode30/</guid>
      <pubDate>Sun, 04 Feb 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; You are given a string, &lt;strong&gt;s&lt;/strong&gt;, and a list of words, &lt;strong&gt;words&lt;/strong&gt;, that are all of the same length. Find all starting indices of substring(s) in &lt;strong&gt;s&lt;/strong&gt; that is a concatenation of each word in &lt;strong&gt;words&lt;/strong&gt; exactly once and without any intervening characters.&lt;/p&gt;
&lt;p&gt; For example, given:&lt;br&gt; &lt;strong&gt;s&lt;/strong&gt;: &lt;code&gt;&amp;quot;barfoothefoobarman&amp;quot;&lt;/code&gt;&lt;br&gt; &lt;strong&gt;words&lt;/strong&gt;: &lt;code&gt;[&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; You should return the indices: &lt;code&gt;[0,9]&lt;/code&gt;.&lt;br&gt; (order does not matter).&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> You are given a string, <strong>s</strong>, and a list of words, <strong>words</strong>, that are all of the same length. Find all starting indices of substring(s) in <strong>s</strong> that is a concatenation of each word in <strong>words</strong> exactly once and without any intervening characters.</p><p> For example, given:<br> <strong>s</strong>: <code>&quot;barfoothefoobarman&quot;</code><br> <strong>words</strong>: <code>[&quot;foo&quot;, &quot;bar&quot;]</code></p><p> You should return the indices: <code>[0,9]</code>.<br> (order does not matter).</p></blockquote><a id="more"></a><p>利用滑动窗口搜索的方式</p><ul><li><p>计算每个word在words中出现的次数</p></li><li><p>设置窗口，l为窗口左端点，r为窗口右端点，左闭右开，window记录窗口中每个单词的数量wordmap</p><p>从0~len(word)-1开始枚举左端点的起点</p><ol><li>扩展窗口，r不断的右移一个len(word)<ul><li>如果当前最右边的单词不在words中，则清理窗口 l = r</li><li>如果在，window[word] += 1<ul><li><code>window[word] &lt; wordmap[word]</code>继续扩展</li><li><code>window[word] == wordmap[word]</code>检查是不是一个解，即<code>r-l == len(word)*len(words)</code></li><li><code>window[word] &gt; wordmap[word]</code>进入步骤2</li></ul></li></ul></li><li>收缩窗口，l不断右移一个len(word)，window[l] -= 1，检查<code>window[s[r-len:r]] == wordmap[s[r-len:r]]</code></li></ol></li></ul><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSubstring</span><span class="params">(self, s, words)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type words: List[str]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        wordmap = &#123;&#125;</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> s == <span class="keyword">None</span> <span class="keyword">or</span> len(words) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        wordLen = len(words[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> wordmap.__contains__(word):</span><br><span class="line">                wordmap[word] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                wordmap[word] = <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(wordLen):</span><br><span class="line">            window = &#123;&#125;</span><br><span class="line">            l = r = i</span><br><span class="line">            <span class="keyword">while</span> r &lt; len(s):</span><br><span class="line">                <span class="keyword">while</span> r &lt; len(s):</span><br><span class="line">                    word = s[r:r+wordLen]</span><br><span class="line">                    r += wordLen</span><br><span class="line">                    <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> words:</span><br><span class="line">                        window = &#123;&#125;</span><br><span class="line">                        l = r</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> window.__contains__(word):</span><br><span class="line">                            window[word] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            window[word] = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> window[word] &gt;= wordmap[word]:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">while</span> l &lt; r:</span><br><span class="line">                    word = s[r-wordLen: r]</span><br><span class="line">                    <span class="keyword">if</span> window[word] == wordmap[word]:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    tmpWord = s[l : l+wordLen]</span><br><span class="line">                    window[tmpWord] -= <span class="number">1</span></span><br><span class="line">                    l += wordLen</span><br><span class="line">                <span class="keyword">if</span> r-l == wordLen*len(words):</span><br><span class="line">                    res.append(l)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/05/leetcode30/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git介绍以及基本命令</title>
      <link>https://www.ph0en1x.space/2018/02/01/git/</link>
      <guid>https://www.ph0en1x.space/2018/02/01/git/</guid>
      <pubDate>Wed, 31 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 介绍git的结构、作用以及基本常用命令&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 介绍git的结构、作用以及基本常用命令</p></blockquote><a id="more"></a><h2 id="一、git简介"><a href="#一、git简介" class="headerlink" title="一、git简介"></a>一、git简介</h2><p>git是目前最流行、最好用的分布式版本控制系统，主要的作用就是帮助进行版本控制以及分布式的分支管理。其基本结构如下</p><p><img src="https://raw.githubusercontent.com/Ph0en1xGSeek/githubpage_img/master/git/git.png" alt="git结构"></p><p>其中橙色的部分都在我们自己的计算机上，蓝色的是远程仓库，比如github、gitosc等等</p><p>图中几个部分的含义</p><ul><li><p>Workspace：工作区，就是电脑里的一个目录，一般带有.git文件</p></li><li><p>Stage/Index：暂存区位于工作区目录里的一个.git隐藏目录中，里面存储这个项目的master分支和HEAD指针</p></li><li><p>Repository：本地仓库，用于与远程仓库同步</p></li><li><p>Remote：远程仓库</p><p>​</p></li></ul><p>下面将会把主要的过程的命令一一展示，建议分支部分可以阅读官方文档进行学习</p><p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">git中文文档</a></p><h2 id="二、新建与配置"><a href="#二、新建与配置" class="headerlink" title="二、新建与配置"></a>二、新建与配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><h2 id="三、往暂存区add-rm-mv"><a href="#三、往暂存区add-rm-mv" class="headerlink" title="三、往暂存区add/rm/mv"></a>三、往暂存区add/rm/mv</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加所有/目录/文件到暂存区</span></span><br><span class="line">$ git add [.]/[dir]/[file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="四、向本地仓库commit"><a href="#四、向本地仓库commit" class="headerlink" title="四、向本地仓库commit"></a>四、向本地仓库commit</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区(显示变动)</span></span><br><span class="line">$ git commit [-a|-v]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="五、向远程仓库push-pull-fetch-remote"><a href="#五、向远程仓库push-pull-fetch-remote" class="headerlink" title="五、向远程仓库push/pull/fetch/remote"></a>五、向远程仓库push/pull/fetch/remote</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的目标远程仓库，并命名为name</span></span><br><span class="line">$ git remote add [name] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库，不指定默认master</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="六、分支branch"><a href="#六、分支branch" class="headerlink" title="六、分支branch"></a>六、分支branch</h2><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本地、远程、所有分支，带*号的是当前分支</span></span><br><span class="line">$ git branch [-r|-a]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建[并切换]到该分支</span></span><br><span class="line">$ git checkout [-b] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支(指向指定commit)</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># push分支到远程仓库(默认是master)</span></span><br><span class="line">$ git push origin [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="七、标签"><a href="#七、标签" class="headerlink" title="七、标签"></a>七、标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="八、查看信息"><a href="#八、查看信息" class="headerlink" title="八、查看信息"></a>八、查看信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">git中文文档</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">阮一峰的网络日志</a><br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的git教程</a></p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/02/01/git/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Markdown常用语法总结</title>
      <link>https://www.ph0en1x.space/2018/01/27/markdown_conclusion/</link>
      <guid>https://www.ph0en1x.space/2018/01/27/markdown_conclusion/</guid>
      <pubDate>Fri, 26 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。[4]这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>Markdown</strong> 是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。[4]这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p><a id="more"></a><p>个人使用markdown编写博客的编辑器是<strong>Typora</strong>，它不像传统编辑器那样并排展示，而是一个即时渲染的编辑器，所见即所得，让习惯word编辑的人编辑markdown更加的方便。至于好不好用就见仁见智了。毕竟有的人喜欢Jetbrain，而有的人以用Vim为荣。</p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a><strong>换行</strong></h2><p>在行尾添加两个空格加回车表示换行：</p><p>如果使用Typora则不用担心此问题，换行时会自动加两个空格</p><hr><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h2><p><strong>1、用#标记</strong></p><p>在 <strong>标题开头</strong> <code>#</code>，加几个就代表是几级标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p><strong>2、用=和-标记</strong></p><p>在 <strong>标题底下</strong> 加上任意个<code>=</code>代表一级标题，<code>-</code>代表二级标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">二级标题</span><br><span class="line">------</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><p>###### </p><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h2><p><strong>无序列表</strong></p><p><strong><code>*</code>后面加一个空格：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 无序列表项目</span><br><span class="line">* 无序列表项目</span><br><span class="line">* 无序列表项目</span><br></pre></td></tr></table></figure><p>效果（<code>-</code>和<code>+</code>是一样的）：</p><ul><li>无序列表项目</li><li>无序列表项目</li><li>无序列表项目</li></ul><p><strong>有序列表则</strong></p><p><strong>数字加英文句点<code>.</code>：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 有序列表项1</span><br><span class="line">2. 有序列表项2</span><br><span class="line">3. 有序列表项3</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>有序列表项1</li><li>有序列表项2</li><li>有序列表项3</li></ol><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h2><p>代码分为<code>行内代码</code>和<code>代码块</code>。</p><ul><li><p>行内代码使用 一个`符号标识 ，可嵌入文字中</p></li><li><p>代码块使用```标识（还有一种4个空格的不推荐，会和缩进弄混）</p><p>```<br>这里是代码<br>```</p></li><li><p>代码语法高亮在 ```后面加上   <code>空格</code>和语言名称即可</p><p>``` 语言<br>这里是代码<br>```</p></li></ul><p>例如：</p><p>`这是一段高亮代码`</p><p>``` c++</p><p>long long multi(long long a, long long b, long long mod)<br>{</p><p>long long ret = 1;<br>while(b &gt; 0)<br>{<br>​    if(b &amp; 1)<br>​        ret = (ret<em>a)%mod;<br>​    a = (a </em> a) % mod;<br>​    b /= 2;<br>}<br>return ret;</p><p>}//pow(a, b) mod m</p><p>```</p><p>效果:</p><p><code>这是一段高亮代码</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">multi</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">            ret = (ret*a)%mod;</span><br><span class="line">        a = (a * a) % mod;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;<span class="comment">//pow(a, b) mod m</span></span><br></pre></td></tr></table></figure><hr><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a><strong>分隔线</strong></h2><p>在一行中用三个以上的<code>*</code>、<code>-</code>、<code>_</code>来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br><span class="line"></span><br><span class="line">* * *</span><br></pre></td></tr></table></figure><p>效果均为一条分割线：</p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h2><p>引用以<code>&gt;</code>加空格来表示，引用中支持多级引用，引用中的常用语法不会受到影响。</p><p>常见的引用写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一段引用</span><br><span class="line"></span><br><span class="line">&gt; 一级引用</span><br><span class="line">&gt; &gt; 二级引用</span><br><span class="line">&gt; &gt; &gt; 三级引用</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><blockquote><p>这是一段引用</p></blockquote><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote></blockquote><hr><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a><strong>强调</strong></h2><p>两个<code>*</code>或<code>-</code>代表加粗，一个<code>*</code>或<code>-</code>代表斜体，<code>~~</code>已删除的横线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**加粗** or __加粗__</span><br><span class="line"></span><br><span class="line">*斜体*  or _斜体_</span><br><span class="line"></span><br><span class="line">~~横线~~</span><br></pre></td></tr></table></figure><p>效果：</p><p><strong>加粗</strong> or <strong>加粗</strong></p><p><em>斜体</em>  or _斜体_</p><p><del>横线</del></p><hr><h2 id="图片-amp-链接"><a href="#图片-amp-链接" class="headerlink" title="图片&amp;链接"></a><strong>图片&amp;链接</strong></h2><p>图片有一个 ! 号，链接没有，而在Typora中可以直接插入图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">图片：![image description](url) </span><br><span class="line">链接：[link description](url)</span><br></pre></td></tr></table></figure><p>链接以及图片又分为<code>行内式</code>、<code>参考式</code>和 <code>自动链接</code> 上面的格式就是行内式。一般我使用行内式，使用参考室只是方便更新图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">链接行内式：[Ph0en1x Notebook](https://ph0en1xgseek.github.io/)。</span><br><span class="line"></span><br><span class="line">自动链接：&lt;https://ph0en1xgseek.github.io/&gt;</span><br><span class="line"></span><br><span class="line">图片参考式：![typora][1]</span><br><span class="line">[1]: https://typora.io/img/new/lists.png</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>链接行内式：<a href="https://ph0en1xgseek.github.io/" target="_blank" rel="noopener">Ph0en1x Notebook</a>。</p><p>自动链接：<a href="https://ph0en1xgseek.github.io/" target="_blank" rel="noopener">https://ph0en1xgseek.github.io/</a></p><p>图片参考式：![typora][1]<br>[1]: <a href="https://typora.io/img/new/lists.png" target="_blank" rel="noopener">https://typora.io/img/new/lists.png</a></p><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a><strong>表格</strong></h2><p>表格对齐格式，Typora中也可以直接插入表格</p><ul><li>左对齐：<code>:----</code></li><li>中线对齐：<code>:----:</code>或<code>-----</code></li><li>右对齐：<code>----:</code></li></ul><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|标题|标题|标题|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|左对齐|中线对齐|右对齐|</span><br><span class="line">|左对齐|中线对齐|右对齐|</span><br><span class="line">|左对齐|中线对齐|右对齐|</span><br><span class="line">|左对齐|中线对齐|右对齐|</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:center">标题</th><th style="text-align:right">标题</th></tr></thead><tbody><tr><td style="text-align:left">左对齐</td><td style="text-align:center">中线对齐</td><td style="text-align:right">右对齐</td></tr><tr><td style="text-align:left">左对齐</td><td style="text-align:center">中线对齐</td><td style="text-align:right">右对齐</td></tr><tr><td style="text-align:left">左对齐</td><td style="text-align:center">中线对齐</td><td style="text-align:right">右对齐</td></tr><tr><td style="text-align:left">左对齐</td><td style="text-align:center">中线对齐</td><td style="text-align:right">右对齐</td></tr></tbody></table><hr><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a><strong>脚注</strong></h2><p><code>[^]</code>来定义脚注：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ph0en1x Notebook[^1]</span><br><span class="line"></span><br><span class="line">[^1]: https://ph0en1xgseek.github.io/</span><br></pre></td></tr></table></figure><p>效果：</p><p>Ph0en1x Notebook<a href="https://ph0en1xgseek.github.io/" target="_blank" rel="noopener">^1</a></p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/27/markdown_conclusion/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforce 915C Permute Digits</title>
      <link>https://www.ph0en1x.space/2018/01/26/codeforce915C/</link>
      <guid>https://www.ph0en1x.space/2018/01/26/codeforce915C/</guid>
      <pubDate>Thu, 25 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;You are given two positive integer numbers &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;. Permute (change order) of the digits of &lt;em&gt;a&lt;/em&gt; to construct maximal number not exceeding &lt;em&gt;b&lt;/em&gt;. No number in input and/or output can start with the digit 0.&lt;/p&gt;
&lt;p&gt;It is allowed to leave &lt;em&gt;a&lt;/em&gt; as it is.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>You are given two positive integer numbers <em>a</em> and <em>b</em>. Permute (change order) of the digits of <em>a</em> to construct maximal number not exceeding <em>b</em>. No number in input and/or output can start with the digit 0.</p><p>It is allowed to leave <em>a</em> as it is.</p></blockquote><a id="more"></a><p>Input</p><blockquote><p>The first line contains integer <em>a</em> (1 ≤ <em>a</em> ≤ 1018). The second line contains integer <em>b</em> (1 ≤ <em>b</em> ≤ 1018). Numbers don’t have leading zeroes. It is guaranteed that answer exists.</p></blockquote><p>Output</p><blockquote><p>Print the maximum possible number that is a permutation of digits of <em>a</em> and is not greater than <em>b</em>. The answer can’t have any leading zeroes. It is guaranteed that the answer exists.</p></blockquote><p>Examples</p><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123</span><br><span class="line">222</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">213</span><br></pre></td></tr></table></figure><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3921</span><br><span class="line">10000</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9321</span><br></pre></td></tr></table></figure><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4940</span><br><span class="line">5000</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4940</span><br></pre></td></tr></table></figure><hr><ul><li>b一定不短于a</li><li>如果b比a长，直接降序排列a</li><li>如果一样长<ul><li>先统计a中数字的个数</li><li>对于每一位b，都找不比b大的匹配，一旦有一位匹配后小于b的那位，之后就可以从最大的开始降序匹配</li><li>如果有一位无法匹配小于等于b的那位，那么就回退一位，匹配小于b的，这样后面就可以不受约束</li></ul></li></ul><hr><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> str2[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str1))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str2);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(str1);</span><br><span class="line">        <span class="keyword">int</span> len2 = <span class="built_in">strlen</span>(str2);</span><br><span class="line">        <span class="keyword">if</span>(len2 &gt; len1)</span><br><span class="line">        &#123;</span><br><span class="line">            sort(str1, str1+len1, cmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[str1[i] - <span class="string">'0'</span>]++;</span><br><span class="line">                str1[i] = str2[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len2; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> j;</span><br><span class="line">                <span class="keyword">if</span>(flag == <span class="literal">false</span>)</span><br><span class="line">                    j = str1[i] - <span class="string">'0'</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    j = <span class="number">9</span>;</span><br><span class="line">                <span class="keyword">for</span>(; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[j] &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        arr[j]--;</span><br><span class="line">                        str1[i] = j+<span class="string">'0'</span>;</span><br><span class="line">                        <span class="keyword">if</span>(j &lt; str2[i] - <span class="string">'0'</span>)</span><br><span class="line">                            flag = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">-1</span> &amp;&amp; flag == <span class="literal">false</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    i--;</span><br><span class="line">                    arr[str1[i]-<span class="string">'0'</span>]++;</span><br><span class="line">                    str1[i]--;</span><br><span class="line">                    i--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/26/codeforce915C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforce 915B Browser</title>
      <link>https://www.ph0en1x.space/2018/01/26/codeforce915B/</link>
      <guid>https://www.ph0en1x.space/2018/01/26/codeforce915B/</guid>
      <pubDate>Thu, 25 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;Luba is surfing the Internet. She currently has &lt;em&gt;n&lt;/em&gt; opened tabs in her browser, indexed from 1 to &lt;em&gt;n&lt;/em&gt; from left to right. The mouse cursor is currently located at the &lt;em&gt;pos&lt;/em&gt;-th tab. Luba needs to use the tabs with indices from &lt;em&gt;l&lt;/em&gt; to &lt;em&gt;r&lt;/em&gt; (inclusive) for her studies, and she wants to close all the tabs that don’t belong to this segment as fast as possible.&lt;/p&gt;
&lt;p&gt;Each second Luba can either try moving the cursor to the left or to the right (if the cursor is currently at the tab &lt;em&gt;i&lt;/em&gt;, then she can move it to the tab &lt;em&gt;max&lt;/em&gt;(&lt;em&gt;i&lt;/em&gt; - 1, &lt;em&gt;a&lt;/em&gt;) or to the tab &lt;em&gt;min&lt;/em&gt;(&lt;em&gt;i&lt;/em&gt; + 1, &lt;em&gt;b&lt;/em&gt;)) or try closing all the tabs to the left or to the right of the cursor (if the cursor is currently at the tab &lt;em&gt;i&lt;/em&gt;, she can close all the tabs with indices from segment [&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;i&lt;/em&gt; - 1] or from segment [&lt;em&gt;i&lt;/em&gt; + 1, &lt;em&gt;b&lt;/em&gt;]). In the aforementioned expressions &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; denote the minimum and maximum index of an unclosed tab, respectively. For example, if there were 7 tabs initially and tabs 1, 2and 7 are closed, then &lt;em&gt;a&lt;/em&gt; = 3, &lt;em&gt;b&lt;/em&gt; = 6.&lt;/p&gt;
&lt;p&gt;What is the minimum number of seconds Luba has to spend in order to leave only the tabs with initial indices from &lt;em&gt;l&lt;/em&gt; to &lt;em&gt;r&lt;/em&gt; inclusiveopened?&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Luba is surfing the Internet. She currently has <em>n</em> opened tabs in her browser, indexed from 1 to <em>n</em> from left to right. The mouse cursor is currently located at the <em>pos</em>-th tab. Luba needs to use the tabs with indices from <em>l</em> to <em>r</em> (inclusive) for her studies, and she wants to close all the tabs that don’t belong to this segment as fast as possible.</p><p>Each second Luba can either try moving the cursor to the left or to the right (if the cursor is currently at the tab <em>i</em>, then she can move it to the tab <em>max</em>(<em>i</em> - 1, <em>a</em>) or to the tab <em>min</em>(<em>i</em> + 1, <em>b</em>)) or try closing all the tabs to the left or to the right of the cursor (if the cursor is currently at the tab <em>i</em>, she can close all the tabs with indices from segment [<em>a</em>, <em>i</em> - 1] or from segment [<em>i</em> + 1, <em>b</em>]). In the aforementioned expressions <em>a</em> and <em>b</em> denote the minimum and maximum index of an unclosed tab, respectively. For example, if there were 7 tabs initially and tabs 1, 2and 7 are closed, then <em>a</em> = 3, <em>b</em> = 6.</p><p>What is the minimum number of seconds Luba has to spend in order to leave only the tabs with initial indices from <em>l</em> to <em>r</em> inclusiveopened?</p></blockquote><a id="more"></a><p>Input</p><blockquote><p>The only line of input contains four integer numbers <em>n</em>, <em>pos</em>, <em>l</em>, <em>r</em> (1 ≤ <em>n</em> ≤ 100, 1 ≤ <em>pos</em> ≤ <em>n</em>, 1 ≤ <em>l</em> ≤ <em>r</em> ≤ <em>n</em>) — the number of the tabs, the cursor position and the segment which Luba needs to leave opened.</p></blockquote><p>Output</p><blockquote><p>Print one integer equal to the minimum number of seconds required to close all the tabs outside the segment [<em>l</em>, <em>r</em>].</p></blockquote><p>Examples</p><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 3 2 4</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 3 1 3</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 2 1 5</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p>Note</p><blockquote><p>In the first test Luba can do the following operations: shift the mouse cursor to the tab 2, close all the tabs to the left of it, shift the mouse cursor to the tab 3, then to the tab 4, and then close all the tabs to the right of it.</p><p>In the second test she only needs to close all the tabs to the right of the current position of the cursor.</p><p>In the third test Luba doesn’t need to do anything.</p></blockquote><hr><p>不要漏考虑情况</p><ul><li>左右贴边</li><li>左贴边<ol><li>pos在r右边</li><li>pos在r左边</li></ol></li><li>右贴边<ol><li>pos在l右边</li><li>pos在l左边</li></ol></li><li>都不贴边<ol><li>pos在l左边</li><li>pos在r右边</li><li>pos在l和r中间</li></ol></li></ul><hr><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, pos, l, r;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;pos, &amp;l, &amp;r))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(l == <span class="number">1</span> &amp;&amp; r == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pos &gt; r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pos-r+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, r-pos+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(r == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pos &lt; l)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, l-pos+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pos-l+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pos &gt; r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pos-l+<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(pos &lt; l)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, r-pos+<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (r-l) + <span class="number">2</span> + min(r-pos, pos-l));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/26/codeforce915B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforce 915A Garden</title>
      <link>https://www.ph0en1x.space/2018/01/26/codeforce915A/</link>
      <guid>https://www.ph0en1x.space/2018/01/26/codeforce915A/</guid>
      <pubDate>Thu, 25 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;Luba thinks about watering her garden. The garden can be represented as a segment of length &lt;em&gt;k&lt;/em&gt;. Luba has got &lt;em&gt;n&lt;/em&gt; buckets, the &lt;em&gt;i&lt;/em&gt;-th bucket allows her to water some continuous subsegment of garden of length exactly &lt;em&gt;a**i&lt;/em&gt; each hour. Luba can’t water any parts of the garden that were already watered, also she can’t water the ground outside the garden.&lt;/p&gt;
&lt;p&gt;Luba has to choose one of the buckets in order to water the garden as fast as possible (as mentioned above, each hour she will water some continuous subsegment of length &lt;em&gt;a**i&lt;/em&gt; if she chooses the &lt;em&gt;i&lt;/em&gt;-th bucket). Help her to determine the minimum number of hours she has to spend watering the garden. It is guaranteed that Luba can always choose a bucket so it is possible water the garden.&lt;/p&gt;
&lt;p&gt;See the examples for better understanding.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Luba thinks about watering her garden. The garden can be represented as a segment of length <em>k</em>. Luba has got <em>n</em> buckets, the <em>i</em>-th bucket allows her to water some continuous subsegment of garden of length exactly <em>a**i</em> each hour. Luba can’t water any parts of the garden that were already watered, also she can’t water the ground outside the garden.</p><p>Luba has to choose one of the buckets in order to water the garden as fast as possible (as mentioned above, each hour she will water some continuous subsegment of length <em>a**i</em> if she chooses the <em>i</em>-th bucket). Help her to determine the minimum number of hours she has to spend watering the garden. It is guaranteed that Luba can always choose a bucket so it is possible water the garden.</p><p>See the examples for better understanding.</p></blockquote><a id="more"></a><p>Input</p><blockquote><p>The first line of input contains two integer numbers <em>n</em> and <em>k</em> (1 ≤ <em>n</em>, <em>k</em> ≤ 100) — the number of buckets and the length of the garden, respectively.</p><p>The second line of input contains <em>n</em> integer numbers <em>a**i</em> (1 ≤ <em>a**i</em> ≤ 100) — the length of the segment that can be watered by the <em>i</em>-th bucket in one hour.</p><p>It is guaranteed that there is at least one bucket such that it is possible to water the garden in integer number of hours using only this bucket.</p></blockquote><p>Output</p><blockquote><p>Print one integer number — the minimum number of hours required to water the garden.</p></blockquote><p>Examples</p><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 6</span><br><span class="line">2 3 5</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 7</span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><p>Note</p><blockquote><p>In the first test the best option is to choose the bucket that allows to water the segment of length 3. We can’t choose the bucket that allows to water the segment of length 5 because then we can’t water the whole garden.</p><p>In the second test we can choose only the bucket that allows us to water the segment of length 1.</p></blockquote><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">int</span> mi;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        mi = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tmp);</span><br><span class="line">            <span class="keyword">if</span>(k % tmp == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                mi = min(k / tmp, mi);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/26/codeforce915A/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 29 Divide Two Integers</title>
      <link>https://www.ph0en1x.space/2018/01/25/leetcode29/</link>
      <guid>https://www.ph0en1x.space/2018/01/25/leetcode29/</guid>
      <pubDate>Wed, 24 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Divide two integers without using multiplication, division and mod operator.&lt;/p&gt;
&lt;p&gt;If it is overflow, return MAX_INT.&lt;/p&gt;
&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Divide two integers without using multiplication, division and mod operator.</p><p>If it is overflow, return MAX_INT.</p></blockquote><hr><p><a href="https://www.codecogs.com/eqnedit.php?latex=dividend&space;=&space;divisor&space;*&space;quotient\\&space;dividend&space;=&space;divisor&space;*&space;(2^{n{1}}&space;&plus;&space;2^{n{2}}\cdots&space;)\\&space;dividend&space;=&space;divisor&space;*&space;2^{n{1}}&space;&plus;&space;divisor&space;*&space;2^{n{2}}\cdots" target="_blank"><img src="https://latex.codecogs.com/gif.latex?dividend&space;=&space;divisor&space;*&space;quotient\\&space;dividend&space;=&space;divisor&space;*&space;(2^{n{1}}&space;&plus;&space;2^{n{2}}\cdots&space;)\\&space;dividend&space;=&space;divisor&space;*&space;2^{n{1}}&space;&plus;&space;divisor&space;*&space;2^{n{2}}\cdots" title="dividend = divisor * quotient\\ dividend = divisor * (2^{n{1}} + 2^{n{2}}\cdots )\\ dividend = divisor * 2^{n{1}} + divisor * 2^{n{2}}\cdots"></a></p><p>overflow特殊情况：-2147483648 / (-1) = MAX_INT = 2147483647</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(self, dividend, divisor)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type dividend: int</span></span><br><span class="line"><span class="string">        :type divisor: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> dividend == <span class="number">-2147483648</span> <span class="keyword">and</span> divisor == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2147483647</span></span><br><span class="line">        a = abs(dividend)</span><br><span class="line">        b = abs(divisor)</span><br><span class="line">        arr = []</span><br><span class="line">        <span class="keyword">while</span>(b &lt;= a):</span><br><span class="line">            arr.append(b)</span><br><span class="line">            b &lt;&lt;= <span class="number">1</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> sum + arr[i] &lt;= a:</span><br><span class="line">                sum += arr[i]</span><br><span class="line">                ret += (<span class="number">1</span>&lt;&lt;i)</span><br><span class="line">        <span class="keyword">if</span>(((dividend &gt; <span class="number">0</span>) <span class="keyword">and</span> (divisor &lt; <span class="number">0</span>)) <span class="keyword">or</span> ((dividend &lt; <span class="number">0</span>) <span class="keyword">and</span> (divisor &gt; <span class="number">0</span>))):</span><br><span class="line">            <span class="keyword">return</span> -ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/25/leetcode29/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 25 Reverse Nodes in k-Group</title>
      <link>https://www.ph0en1x.space/2018/01/25/leetcode25/</link>
      <guid>https://www.ph0en1x.space/2018/01/25/leetcode25/</guid>
      <pubDate>Wed, 24 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Given a linked list, reverse the nodes of a linked list &lt;em&gt;k&lt;/em&gt; at a time and return its modified list.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;k&lt;/em&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p><p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p><p>You may not alter the values in the nodes, only nodes itself may be changed.</p><p>Only constant memory is allowed.</p><p>For example,<br>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p></blockquote><hr><p>Leetcode 24的扩展版，k个一组进行翻转，最后不到k个的不翻转</p><p>没轮一共翻转k-1次，每次都将后一个node连到已经连好的链的最前面，已经连好的链首节点之前的一个节点和尾节点两个节点标记为<code>root</code>、<code>head</code></p><hr><p><strong>Python Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span><span class="params">(self, head, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = root = ListNode(<span class="number">-1</span>)</span><br><span class="line">        root.next = head</span><br><span class="line">        tmp = head</span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(tmp != <span class="keyword">None</span>):</span><br><span class="line">            tmp = tmp.next</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(cnt &gt;= k):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(k<span class="number">-1</span>):</span><br><span class="line">                node = root.next</span><br><span class="line">                root.next = head.next</span><br><span class="line">                head.next = root.next.next</span><br><span class="line">                root.next.next = node</span><br><span class="line">            root = head</span><br><span class="line">            head = head.next</span><br><span class="line">            cnt -= k</span><br><span class="line">        <span class="keyword">return</span> res.next</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/25/leetcode25/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux提升物理内存的使用率</title>
      <link>https://www.ph0en1x.space/2018/01/24/ubuntu_improve/</link>
      <guid>https://www.ph0en1x.space/2018/01/24/ubuntu_improve/</guid>
      <pubDate>Tue, 23 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 介绍如何在Linux下调整交换分区swap的使用条件&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 介绍如何在Linux下调整交换分区swap的使用条件</p></blockquote><a id="more"></a><p>在UBUNTU系统里面，并不是你的物理内存全部耗尽之后，系统才使用swap分区！系统的swappiness设定值，对如何使用swap分区是有着很大的联系。</p><hr><p>swappiness=0 的时候表示最大限度使用物理内存，然后才是 swap空间swappiness＝100的时候表示积极的使用swap分区，并且把内存上的数据及时的搬运到swap空间里面</p><hr><p>上面2个设置是极端设置，对于UBUNTU系统的默热值来说，这个值=60，如果想最佳化，可以修改为10-20左右！</p><p><strong>在ubuntu17以后移除了交换分区这一概念，改为交换文件</strong></p><ol><li><p>打开终端，输入查看 swappiness 的当前参数（默认应该看到的是60）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/vm/swappiness</span><br></pre></td></tr></table></figure></li><li><p>输入下面内容，修改这个参数为10（执行这一步只是临时修改，如果重启又会恢复60）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl vm.swappiness=10</span><br></pre></td></tr></table></figure></li><li><p>若要持久化配置，可以打开<code>/etc/sysctl.conf</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>添加一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.swappiness=10</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/24/ubuntu_improve/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux下配置Git免密码</title>
      <link>https://www.ph0en1x.space/2018/01/24/git_password/</link>
      <guid>https://www.ph0en1x.space/2018/01/24/git_password/</guid>
      <pubDate>Tue, 23 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 本篇文章将会介绍如何在Linux下配置使Git在push/pull时免密码&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 本篇文章将会介绍如何在Linux下配置使Git在push/pull时免密码</p></blockquote><a id="more"></a><p><strong>操作步聚：</strong></p><ol><li><p>进入当前用户目录下；</p></li><li><p>创建并打开<code>.git-credentials</code></p></li><li><p>按照以下格式输入内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">     　https://&#123;username&#125;：&#123;password&#125;@github.com</span><br></pre></td></tr></table></figure><p>其中username，password，github.com 都替换成你自己的内容</p></li><li><p>保存退出后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>执行完后</p><p>　　<code>/home/用户名/.gitconfig</code> 会新增一项</p><p>　　<code>helper = store</code></p></li><li><p>这时再执行git push/pull的时候就不会在要求你输入密码了。</p></li></ol>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/24/git_password/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 23 Merge k Sorted Lists</title>
      <link>https://www.ph0en1x.space/2018/01/24/leetcode23/</link>
      <guid>https://www.ph0en1x.space/2018/01/24/leetcode23/</guid>
      <pubDate>Tue, 23 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; Merge &lt;em&gt;k&lt;/em&gt; sorted linked lists and return it as one sorted list. Analyze and describe its complexity.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p></blockquote><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type lists: List[ListNode]</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        heap = []</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">if</span> node != <span class="keyword">None</span>:</span><br><span class="line">                heap.append((node.val, i, node))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        heapq.heapify(heap)</span><br><span class="line">        cur = head = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> heap:</span><br><span class="line">            pop = heapq.heappop(heap)</span><br><span class="line">            cur.next = ListNode(pop[<span class="number">0</span>])</span><br><span class="line">            cur = cur.next</span><br><span class="line">            <span class="keyword">if</span> pop[<span class="number">2</span>].next != <span class="keyword">None</span>:</span><br><span class="line">                heapq.heappush(heap, (pop[<span class="number">2</span>].next.val, i, pop[<span class="number">2</span>].next))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/24/leetcode23/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 10 Regular Expression Matching</title>
      <link>https://www.ph0en1x.space/2018/01/23/leetcode10/</link>
      <guid>https://www.ph0en1x.space/2018/01/23/leetcode10/</guid>
      <pubDate>Mon, 22 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;动态规划&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>动态规划</p><a id="more"></a><blockquote><p>Implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; &apos;.&apos; Matches any single character.</span><br><span class="line">&gt; &apos;*&apos; Matches zero or more of the preceding element.</span><br><span class="line">&gt;</span><br><span class="line">&gt; The matching should cover the entire input string (not partial).</span><br><span class="line">&gt;</span><br><span class="line">&gt; The function prototype should be:</span><br><span class="line">&gt; bool isMatch(const char *s, const char *p)</span><br><span class="line">&gt;</span><br><span class="line">&gt; Some examples:</span><br><span class="line">&gt; isMatch(&quot;aa&quot;,&quot;a&quot;) → false</span><br><span class="line">&gt; isMatch(&quot;aa&quot;,&quot;aa&quot;) → true</span><br><span class="line">&gt; isMatch(&quot;aaa&quot;,&quot;aa&quot;) → false</span><br><span class="line">&gt; isMatch(&quot;aa&quot;, &quot;a*&quot;) → true</span><br><span class="line">&gt; isMatch(&quot;aa&quot;, &quot;.*&quot;) → true</span><br><span class="line">&gt; isMatch(&quot;ab&quot;, &quot;.*&quot;) → true</span><br><span class="line">&gt; isMatch(&quot;aab&quot;, &quot;c*a*b&quot;) → true</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><hr><p>动态规划问题<code>dp[i][j]</code>代表<code>s[i]</code>之前（不算i）与<code>p[j]</code>之前的字符串是否能够匹配</p><p>初始化：</p><ul><li><code>dp[0][0] = true</code></li><li><code>dp[i][0] = false when i &gt;= 1</code></li><li><code>dp[0][j] = j &gt; 1 &amp;&amp; p[j-1] == &#39;*&#39; &amp;&amp; dp[0][j-2]</code> 即只有都可以用<code>*</code>来代替掉的情况才能是true</li></ul><p>两种更新情况：</p><ul><li><p><code>p[j-1] == &#39;*&#39;</code></p><ul><li><code>dp[i][j] = dp[i][j - 2]</code> // i与j-2可以匹配的情况下，这个*代表0次</li><li><code>dp[i][j] = (s[i - 1] == p[j - 2] || p[j - 2] == &#39;.&#39;) &amp;&amp; dp[i - 1][j]</code> // 在i-1 与 j可以匹配的情况下 这个*代表一次或多次</li></ul></li><li><p><code>p[j-1] != &#39;*&#39;</code></p><p><code>dp[i][j] = (p[j - 1] == &#39;.&#39; || s[i - 1] == p[j - 1]) &amp;&amp; dp[i - 1][j - 1]</code> //在i-1与j-1可以匹配的情况下 i 与 j 能够匹配</p></li></ul><p>由于这题Python直接就有函数可以解决，所以改用C++来练习</p><hr><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lens = s.length();</span><br><span class="line">        <span class="keyword">int</span> lenp = p.length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> **dp = <span class="keyword">new</span> <span class="keyword">bool</span> *[lens+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lens; i++)</span><br><span class="line">            dp[i] = <span class="keyword">new</span> <span class="keyword">bool</span> [lenp+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">bool</span> res = <span class="literal">false</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lens; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lenp; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j &gt; <span class="number">1</span> &amp;&amp; p[j<span class="number">-1</span>] == <span class="string">'*'</span> &amp;&amp; dp[<span class="number">0</span>][j<span class="number">-2</span>])</span><br><span class="line">                dp[<span class="number">0</span>][j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[<span class="number">0</span>][j] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lens; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lenp; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(p[j<span class="number">-1</span>] == <span class="string">'*'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j<span class="number">-2</span>] || ((s[i<span class="number">-1</span>] == p[j<span class="number">-2</span>] || p[j<span class="number">-2</span>] == <span class="string">'.'</span>) &amp;&amp; dp[i<span class="number">-1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] &amp;&amp; (s[i<span class="number">-1</span>] == p[j<span class="number">-1</span>] || p[j<span class="number">-1</span>] == <span class="string">'.'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = dp[lens][lenp];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lens; i++)</span><br><span class="line">            <span class="keyword">delete</span> [] dp[i];</span><br><span class="line">        <span class="keyword">delete</span> [] dp;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/23/leetcode10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 24 Swap Nodes in Pairs</title>
      <link>https://www.ph0en1x.space/2018/01/20/leetcode24/</link>
      <guid>https://www.ph0en1x.space/2018/01/20/leetcode24/</guid>
      <pubDate>Fri, 19 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Given a linked list, swap every two adjacent nodes and return its head.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;Given &lt;code&gt;1-&amp;gt;2-&amp;gt;3-&amp;gt
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Given a linked list, swap every two adjacent nodes and return its head.</p><p>For example,<br>Given <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>.</p><p>Your algorithm should use only constant space. You may <strong>not</strong> modify the values in the list, only nodes itself can be changed.</p></blockquote><hr><p><strong>Python Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="keyword">None</span> <span class="keyword">or</span> head.next == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        ret = head.next</span><br><span class="line">        i = head</span><br><span class="line">        j = head.next</span><br><span class="line">        pre = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> j != <span class="keyword">None</span>:</span><br><span class="line">            i.next = j.next</span><br><span class="line">            j.next = i</span><br><span class="line">            <span class="keyword">if</span> pre != <span class="keyword">None</span>:</span><br><span class="line">                pre.next = j</span><br><span class="line">            <span class="keyword">if</span> i.next != <span class="keyword">None</span>:</span><br><span class="line">                pre = i</span><br><span class="line">                i = i.next</span><br><span class="line">                j = i.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/20/leetcode24/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode 15 3Sum</title>
      <link>https://www.ph0en1x.space/2018/01/20/leetcode15/</link>
      <guid>https://www.ph0en1x.space/2018/01/20/leetcode15/</guid>
      <pubDate>Fri, 19 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;T Sum问题的O(n)解决方法；&lt;/p&gt;
&lt;p&gt;N Sum类的问题的一般解决方法；&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>T Sum问题的O(n)解决方法；</p><p>N Sum类的问题的一般解决方法；</p></blockquote><a id="more"></a><blockquote><p>Given an array <em>S</em> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <em>S</em> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p><p><strong>Note:</strong> The solution set must not contain duplicate triplets.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; For example, given array S = [-1, 0, 1, 2, -1, -4],</span><br><span class="line">&gt;</span><br><span class="line">&gt; A solution set is:</span><br><span class="line">&gt; [</span><br><span class="line">&gt;   [-1, 0, 1],</span><br><span class="line">&gt;   [-1, -1, 2]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><hr><p><code>Two sum</code>类问题，找两个数的和为一个定值的问题，如果直接使用二分查找，排序+查找或者在有序数组中直接查找的复杂度都是<strong>O(nlogn)</strong>，有的题卡复杂度的就过不去</p><h3 id="Two-Sum问题的一般做法"><a href="#Two-Sum问题的一般做法" class="headerlink" title="Two Sum问题的一般做法"></a>Two Sum问题的一般做法</h3><p>对无序数组进行排序后（若数组已经是有序的化则不需要排序），设置两个指针<code>left</code>、<code>right</code>指向数组的首尾，<code>target</code>是要查找的目标</p><ul><li><p>如果arr[left] + arr[right] == target，查找到了</p></li><li><p>如果arr[left] + arr[right] &lt; target，按照遍历的方式right往左移，right -= 1</p></li><li><p>如果arr[left] + arr[right] &gt; target，很显然right不需要再往左移动了，直接进入下一轮迭代，即left += 1，right不动</p></li><li><p>right不用像遍历一样回到最右边吗？不用。因为现在的arr[left]与right右边的数相加都是大于target的（不然right不会向左移），那么left再向右移动arr[left]只会更大，right也就不用再回到右边了</p></li><li><p>最后注意下重复数字答案重复的问题</p><p>Two Sum问题的这种解决方法排序+查找复杂度依然是<strong>O(nlogn)</strong>，但是主要是因为排序的消耗。如果题目已经给了有序的数列，那么复杂度将会降为<strong>O(n)</strong></p></li></ul><h3 id="N-Sum-问题"><a href="#N-Sum-问题" class="headerlink" title="N Sum 问题"></a>N Sum 问题</h3><ul><li>对前几位进行遍历，对最后两维做Two Sum</li></ul><hr><p><strong>Python Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            l = i+<span class="number">1</span></span><br><span class="line">            r = len(nums)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> l &lt; r:</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[l] + nums[r] &gt; <span class="number">0</span>:</span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[i] + nums[l] + nums[r] &lt; <span class="number">0</span>:</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ans.append([nums[i], nums[l], nums[r]])</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[l] == nums[l<span class="number">-1</span>]:</span><br><span class="line">                        l += <span class="number">1</span></span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[r] == nums[r+<span class="number">1</span>]:</span><br><span class="line">                        r -= <span class="number">1</span></span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/20/leetcode15/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Tensorflow 共享变量理解</title>
      <link>https://www.ph0en1x.space/2018/01/19/tensorflow_variable/</link>
      <guid>https://www.ph0en1x.space/2018/01/19/tensorflow_variable/</guid>
      <pubDate>Thu, 18 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 本文主要通过一些例子介绍tensorflow中两种变量的声明方式和两种scope&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 本文主要通过一些例子介绍tensorflow中两种变量的声明方式和两种scope</p></blockquote><a id="more"></a><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>概述: <a href="https://www.tensorflow.org/programmers_guide/variables" target="_blank" rel="noopener">https://www.tensorflow.org/programmers_guide/variables</a></p><p>tf.Variable(): <a href="https://www.tensorflow.org/api_docs/python/tf/Variable" target="_blank" rel="noopener">https://www.tensorflow.org/api_docs/python/tf/Variable</a></p><p>tf.get_variable(): <a href="https://www.tensorflow.org/api_docs/python/tf/get_variable" target="_blank" rel="noopener">https://www.tensorflow.org/api_docs/python/tf/get_variable</a></p><p>tf.variable_scope(): <a href="https://www.tensorflow.org/api_docs/python/tf/variable_scope" target="_blank" rel="noopener">https://www.tensorflow.org/api_docs/python/tf/variable_scope</a></p><p>tf.name_scope(): <a href="https://www.tensorflow.org/api_docs/python/tf/name_scope" target="_blank" rel="noopener">https://www.tensorflow.org/api_docs/python/tf/name_scope</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文主要通过一些例子介绍tensorflow中两种变量的声明方式</p><ul><li><code>tf.Variable()</code></li><li><code>tf.get_variable()</code></li></ul><p>以及两种scope:</p><ul><li><code>tf.name_scope()</code></li><li><code>tf.variable_scope()</code></li></ul><h3 id="tf-name-scope-和-tf-variable-scope"><a href="#tf-name-scope-和-tf-variable-scope" class="headerlink" title="tf.name_scope() 和 tf.variable_scope()"></a>tf.name_scope() 和 tf.variable_scope()</h3><ul><li><p>例子1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"Ph0en1x_name_scope"</span>):</span><br><span class="line">    initializer = tf.constant_initializer(value=<span class="number">1</span>)</span><br><span class="line">    var1 = tf.get_variable(name=<span class="string">'var1'</span>, shape=[<span class="number">1</span>], dtype=tf.float32, initializer=initializer)</span><br><span class="line">    var2 = tf.Variable(name=<span class="string">'var2'</span>, initial_value=[<span class="number">2</span>], dtype=tf.float32)</span><br><span class="line">    var3 = var2*<span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.initialize_all_variables())</span><br><span class="line">    print(var1.name)</span><br><span class="line">    print(var2.name)</span><br></pre></td></tr></table></figure></li><li><p>输出1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var1:0</span><br><span class="line">Ph0en1x_name_scope/var2:0</span><br><span class="line">Ph0en1x_name_scope/mul</span><br></pre></td></tr></table></figure><p>可以看出使用tf.Variable()创建的变量和算子op受到<code>name_scope</code>的控制，而使用tf.get_variable()的则不会</p><p>​</p></li><li><p>例子2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"Ph0en1x_variable_scope"</span>):</span><br><span class="line">    initializer = tf.constant_initializer(value=<span class="number">1</span>)</span><br><span class="line">    var1 = tf.get_variable(name=<span class="string">'var1'</span>, shape=[<span class="number">1</span>], dtype=tf.float32, initializer=initializer)</span><br><span class="line">    var2 = tf.Variable(name=<span class="string">'var2'</span>, initial_value=[<span class="number">2</span>], dtype=tf.float32)</span><br><span class="line">    var3 = var2*<span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.initialize_all_variables())</span><br><span class="line">    print(var1.name)</span><br><span class="line">    print(var2.name)</span><br></pre></td></tr></table></figure></li><li><p>输出2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ph0en1x_variable_scope/var1:0</span><br><span class="line">Ph0en1x_variable_scope/var2:0</span><br><span class="line">Ph0en1x_variable_scope/mul:0</span><br></pre></td></tr></table></figure><p>如果使用<code>variable_scope</code> 则都会受到控制</p></li></ul><h3 id="tf-Variable-和-tf-get-variable"><a href="#tf-Variable-和-tf-get-variable" class="headerlink" title="tf.Variable() 和 tf.get_variable()"></a>tf.Variable() 和 tf.get_variable()</h3><ul><li><p>例子3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"Ph0en1x_variable_scope"</span>):</span><br><span class="line">    initializer = tf.constant_initializer(value=<span class="number">1</span>)</span><br><span class="line">    var1 = tf.Variable(name=<span class="string">'var1'</span>, initial_value=[<span class="number">2</span>], dtype=tf.float32)</span><br><span class="line">    var1_1 = tf.Variable(name=<span class="string">'var1'</span>, initial_value=[<span class="number">2</span>], dtype=tf.float32)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.initialize_all_variables())</span><br><span class="line">    print(var1.name)</span><br><span class="line">    print(var1_1.name)</span><br></pre></td></tr></table></figure></li><li><p>输出3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ph0en1x_variable_scope/var1:0</span><br><span class="line">Ph0en1x_variable_scope/var1_1:0</span><br></pre></td></tr></table></figure><p>当在同一个scope中使用tf.Variable()声明同名的变量时，tensorflow会自动将其重命名，但是，</p></li><li><p>例子4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"Ph0en1x_variable_scope"</span>):</span><br><span class="line">    initializer = tf.constant_initializer(value=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    var2 = tf.get_variable(name=<span class="string">'var2'</span>, shape=[<span class="number">1</span>], dtype=tf.float32, initializer=initializer)</span><br><span class="line">    var2_2 = tf.get_variable(name=<span class="string">'var2'</span>, shape=[<span class="number">1</span>], dtype=tf.float32, initializer=initializer)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.initialize_all_variables())</span><br><span class="line">    print(var2.name)</span><br><span class="line">    print(var2_2.name)</span><br></pre></td></tr></table></figure></li><li><p>结果4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValueError: Variable Ph0en1x_variable_scope/var2 already exists, disallowed. Did you mean to set reuse=True or reuse=tf.AUTO_REUSE in VarScope? Originally defined at:</span><br></pre></td></tr></table></figure><p>使用tf.get_variable()时则没有自动重命名，而是直接抛出异常，询问是否想要把<code>reuse</code>值设为<code>True</code></p></li></ul><h3 id="reuse参数"><a href="#reuse参数" class="headerlink" title="reuse参数"></a>reuse参数</h3><p>通过<code>tf.get_variable()</code> <code>tf.variable_scope()</code> 以及<code>reuse</code>参数的配合使用，就可以使用共享变量。</p><h4 id="为什么要用共享变量？"><a href="#为什么要用共享变量？" class="headerlink" title="为什么要用共享变量？"></a>为什么要用共享变量？</h4><p>​    举一个栗子，当我们搭建对抗生成网络进行判别器的训练的时候，对判别器是有真实图像和生成图像两组输入的，即</p><ul><li><p>判别器定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_discriminator</span><span class="params">(img, n_units, reuse=False, alpha=<span class="number">0.01</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'discriminator'</span>, reuse=reuse):</span><br><span class="line"></span><br><span class="line">        hidden1 = tf.layers.dense(img, n_units)</span><br><span class="line">        hidden1 = tf.maximum(alpha*hidden1, hidden1)</span><br><span class="line"></span><br><span class="line">        logits = tf.layers.dense(hidden1, <span class="number">1</span>)</span><br><span class="line">        outputs = tf.sigmoid(logits)</span><br><span class="line">        <span class="keyword">return</span> logits, outputs</span><br></pre></td></tr></table></figure></li><li><p>判别器实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d_logits_real, d_outputs_real = get_discriminator(real_img, d_units)</span><br><span class="line">d_logits_fake, d_outputs_fake = get_discriminator(g_outputs, d_units, reuse=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>两组图像使用的都是同一组判别器的变量，但是他们分两次调用<code>get_discriminator()</code>时，如果不将<code>reuse</code>设置成为<code>True</code>,显然就会产生上面出现的异常。</p></li><li><p>例子5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>):</span><br><span class="line">      v = tf.get_variable(<span class="string">"var"</span>, [<span class="number">1</span>])</span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>, reuse=<span class="keyword">True</span>):</span><br><span class="line">      v1 = tf.get_variable(<span class="string">"var"</span>, [<span class="number">1</span>])</span><br><span class="line">print(v1 <span class="keyword">is</span> v)</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>):</span><br><span class="line">    v = tf.get_variable(<span class="string">"var"</span>, [<span class="number">1</span>])</span><br><span class="line">    tf.get_variable_scope().reuse_variables()</span><br><span class="line">    v1 = tf.get_variable(<span class="string">"var"</span>, [<span class="number">1</span>])</span><br><span class="line">print(v1 <span class="keyword">is</span> v)</span><br></pre></td></tr></table></figure></li><li><p>结果5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure><p>但是一旦设置为True，就无法再次修改回去</p></li></ul>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/19/tensorflow_variable/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HDU 5754 Life Winner Bo</title>
      <link>https://www.ph0en1x.space/2018/01/14/hdu5754/</link>
      <guid>https://www.ph0en1x.space/2018/01/14/hdu5754/</guid>
      <pubDate>Sat, 13 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Problem Description&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bo is a “Life Winner”.He likes playing chessboard games with his girlfriend G.&lt;b
        
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>Problem Description</strong></p><blockquote><p>Bo is a “Life Winner”.He likes playing chessboard games with his girlfriend G.<br>The size of the chessboard is N×M.The top left corner is numbered(1,1) and the lower right corner is numberd (N,M).<br>For each game,Bo and G take turns moving a chesspiece(Bo first).At first,the chesspiece is located at (1,1).And the winner is the person who first moves the chesspiece to (N,M).At one point,if the chess can’t be moved and it isn’t located at (N,M),they end in a draw.<br>In general,the chesspiece can only be moved right or down.Formally,suppose it is located at (x,y),it can be moved to the next point (x′,y′) only if x′≥x and y′≥y.Also it can’t be moved to the outside of chessboard.<br>Besides,There are four kinds of chess(They have movement rules respectively).<br>1.king.<br>2.rook(castle).<br>3.knight.<br>4.queen.<br>(The movement rule is as same as the chess.)<br>For each type of chess,you should find out that who will win the game if they both play in an optimal strategy.<br>Print the winner’s name(“B” or “G”) or “D” if nobody wins the game.</p></blockquote><p><strong>Input</strong></p><blockquote><p>In the first line,there is a number T as a case number.<br>In the next T lines,there are three numbers type,N and M.<br>“type” means the kind of the chess.<br>T≤1000,2≤N,M≤1000,1≤type≤4</p></blockquote><p><strong>Output</strong></p><blockquote><p>For each question,print the answer.</p></blockquote><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 5 5</span><br><span class="line">2 5 5</span><br><span class="line">3 5 5</span><br><span class="line">4 5 5</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">G</span><br><span class="line">G</span><br><span class="line">D</span><br><span class="line">B</span><br></pre></td></tr></table></figure><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp1[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> dp3[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> dp4[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp1[i][<span class="number">1001</span>] = dp1[<span class="number">1001</span>][i] = <span class="number">1</span>;</span><br><span class="line">        dp3[i][<span class="number">1000</span>] = dp3[<span class="number">1000</span>][i] = <span class="number">3</span>;</span><br><span class="line">        dp3[i][<span class="number">1001</span>] = dp3[<span class="number">1001</span>][i] = <span class="number">1</span>;</span><br><span class="line">        dp4[i][i] = dp4[i][<span class="number">1000</span>] = dp4[<span class="number">1000</span>][i] = <span class="number">1</span>;</span><br><span class="line">        dp4[i][<span class="number">1001</span>] = dp4[<span class="number">1001</span>][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dp3[<span class="number">1000</span>][<span class="number">1000</span>] = <span class="number">0</span>;</span><br><span class="line">    dp3[<span class="number">999</span>][<span class="number">999</span>] = <span class="number">3</span>;</span><br><span class="line">    dp1[<span class="number">1000</span>][<span class="number">1000</span>] = dp4[<span class="number">1000</span>][<span class="number">1000</span>] = <span class="number">0</span>;</span><br><span class="line">    dp1[<span class="number">1001</span>][<span class="number">1001</span>] = dp4[<span class="number">1001</span>][<span class="number">1001</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1000</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1000</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp1[i+<span class="number">1</span>][j] == <span class="number">1</span> &amp;&amp; (dp1[i][j+<span class="number">1</span>] == <span class="number">1</span> &amp;&amp; dp1[i+<span class="number">1</span>][j+<span class="number">1</span>] == <span class="number">1</span>))</span><br><span class="line">                dp1[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp1[i][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">999</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">999</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">999</span> &amp;&amp; j == <span class="number">999</span>)&#123;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((i == <span class="number">999</span> || dp3[i+<span class="number">2</span>][j+<span class="number">1</span>] == <span class="number">1</span>) &amp;&amp; (j == <span class="number">999</span> || dp3[i+<span class="number">1</span>][j+<span class="number">2</span>] == <span class="number">1</span>))</span><br><span class="line">                dp3[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dp3[i+<span class="number">2</span>][j+<span class="number">1</span>] == <span class="number">0</span> || dp3[i+<span class="number">1</span>][j+<span class="number">2</span>] == <span class="number">0</span>)</span><br><span class="line">                dp3[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp3[i][j] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(dp4[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!dp4[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> ii = i - <span class="number">1</span>; ii &gt;= <span class="number">0</span>; ii--)</span><br><span class="line">                    dp4[ii][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> ii = j - <span class="number">1</span>; ii &gt;= <span class="number">0</span>; ii--)</span><br><span class="line">                    dp4[i][ii] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> ii = <span class="number">1</span>; i-ii &gt;= <span class="number">0</span> &amp;&amp; j-ii &gt;= <span class="number">0</span>; ii++)</span><br><span class="line">                    dp4[i-ii][j-ii] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ca;</span><br><span class="line">    <span class="keyword">int</span> t, n, m;</span><br><span class="line">    <span class="built_in">memset</span>(dp1, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp1));</span><br><span class="line">    <span class="built_in">memset</span>(dp3, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp3));</span><br><span class="line">    <span class="built_in">memset</span>(dp4, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp4));</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ca);</span><br><span class="line">    <span class="keyword">while</span>(ca--)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;t, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp1[<span class="number">1000</span>-n+<span class="number">1</span>][<span class="number">1000</span>-m+<span class="number">1</span>])</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"B\n"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"G\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((n<span class="number">-1</span>) ^ (m<span class="number">-1</span>))</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"B\n"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"G\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp3[<span class="number">1000</span>-n+<span class="number">1</span>][<span class="number">1000</span>-m+<span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"B\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dp3[<span class="number">1000</span>-n+<span class="number">1</span>][<span class="number">1000</span>-m+<span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"G\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dp3[<span class="number">1000</span>-n+<span class="number">1</span>][<span class="number">1000</span>-m+<span class="number">1</span>] == <span class="number">3</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"D\n"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp4[<span class="number">1000</span>-n+<span class="number">1</span>][<span class="number">1000</span>-m+<span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"B\n"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"G\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/14/hdu5754/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HDU 5802 Windows 10</title>
      <link>https://www.ph0en1x.space/2018/01/14/hdu5802/</link>
      <guid>https://www.ph0en1x.space/2018/01/14/hdu5802/</guid>
      <pubDate>Sat, 13 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;Problem Description&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Long long ago, there was an old monk living on the top of a mountain. Recently, 
        
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>Problem Description</strong></p><blockquote><p>Long long ago, there was an old monk living on the top of a mountain. Recently, our old monk found the operating system of his computer was updating to windows 10 automatically and he even can’t just stop it !!<br>With a peaceful heart, the old monk gradually accepted this reality because his favorite comic LoveLive doesn’t depend on the OS. Today, like the past day, he opens bilibili and wants to watch it again. But he observes that the voice of his computer can be represented as dB and always be integer.<br>Because he is old, he always needs 1 second to press a button. He found that if he wants to take up the voice, he only can add 1 dB in each second by pressing the up button. But when he wants to take down the voice, he can press the down button, and if the last second he presses the down button and the voice decrease x dB, then in this second, it will decrease 2 * x dB. But if the last second he chooses to have a rest or press the up button, in this second he can only decrease the voice by 1 dB.<br>Now, he wonders the minimal seconds he should take to adjust the voice from p dB to q dB. Please be careful, because of some strange reasons, the voice of his computer can larger than any dB but can’t be less than 0 dB.</p></blockquote><p><strong>Input</strong></p><blockquote><p>First line contains a number T (1≤T≤300000),cases number.<br>Next T line,each line contains two numbers p and q (0≤p,q≤109)</p></blockquote><p><strong>Output</strong></p><p>The minimal seconds he should take</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 5</span><br><span class="line">7 3</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> step, <span class="keyword">int</span> stop)</span><span class="comment">///现在位置，已走步数，停顿次数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur - (<span class="number">1</span>&lt;&lt;cnt) + <span class="number">1</span> &gt; q) cnt++;</span><br><span class="line">    step += cnt;</span><br><span class="line">    <span class="keyword">if</span>(cur - (<span class="number">1</span>&lt;&lt;cnt) + <span class="number">1</span> == q) <span class="keyword">return</span> step;</span><br><span class="line">    <span class="keyword">int</span> up = q - max(<span class="number">0</span>, cur - (<span class="number">1</span>&lt;&lt;cnt) + <span class="number">1</span>);<span class="comment">///需要往回走多少步</span></span><br><span class="line">    <span class="keyword">int</span> tmp = step + max(up-stop, <span class="number">0</span>);<span class="comment">///通过把之前的停顿换成向上一步来减少之后向上的步数</span></span><br><span class="line">    <span class="keyword">return</span> min(tmp, dfs(cur - (<span class="number">1</span>&lt;&lt;(cnt<span class="number">-1</span>))+<span class="number">1</span>, step, stop + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ca;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ca);</span><br><span class="line">    <span class="keyword">while</span>(ca--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p, &amp;q);</span><br><span class="line">        <span class="keyword">if</span>(p &lt;= q)</span><br><span class="line">            ans = q - p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = dfs(p, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/14/hdu5802/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Eclipse中Junit与Eclemma插件安装与使用</title>
      <link>https://www.ph0en1x.space/2018/01/03/junit/</link>
      <guid>https://www.ph0en1x.space/2018/01/03/junit/</guid>
      <pubDate>Tue, 02 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 本篇文章将会介绍Eclipse中Junit与Eclemma插件安装与使用&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 本篇文章将会介绍Eclipse中Junit与Eclemma插件安装与使用</p></blockquote><a id="more"></a><p><a href="https://github.com/Ph0en1xGSeek/ST/tree/master/Lab1" target="_blank" rel="noopener">完整代码</a></p><p><strong>1.Install Junit and Eclemma</strong></p><p>1.1.  Install Junit</p><ul><li><p>Download necessary JARs packages</p><p><img src="https://images2015.cnblogs.com/blog/1111233/201703/1111233-20170310155646357-1980419409.png" alt="img"><img src="https://images2015.cnblogs.com/blog/1111233/201703/1111233-20170310155652576-651111228.png" alt="img"> </p></li><li><p>Click right key on the project – Properties – Java Build Path – Libraries – Add External JARs</p></li><li><p>Add Junit and harmcrest-all-*</p><p><img src="https://images2015.cnblogs.com/blog/1111233/201703/1111233-20170310155705186-641380536.png" alt="img"></p></li></ul><p>1.2. Install Eclemma</p><ul><li>Help –- Install New Software –Add</li><li><p>Input the name eclemma and the Location with <a href="http://update.eclemma.org/" target="_blank" rel="noopener">http://update.eclemma.org</a>.</p><p><img src="https://images2015.cnblogs.com/blog/1111233/201703/1111233-20170310155726279-636602964.png" alt="img"></p></li><li><p>Select the eclemma and complete click Next</p></li><li>Reboot the eclipse to complete the installation</li></ul><p><strong>2.Using Junit and eclemma</strong></p><ul><li>Under src folder, create com.Triangle package</li><li>Write Triangle.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Triangle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">        a = x;</span><br><span class="line">        b = y;</span><br><span class="line">        c = z;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">isPositive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String msg = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">0</span> &amp;&amp; b &gt; <span class="number">0</span> &amp;&amp; c &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            msg = <span class="string">"positive"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a &lt;= <span class="number">0</span>)</span><br><span class="line">                msg += <span class="string">"a is negative"</span>;</span><br><span class="line">            <span class="keyword">if</span>(b &lt;= <span class="number">0</span>)</span><br><span class="line">                msg += <span class="string">"b is negative"</span>;</span><br><span class="line">            <span class="keyword">if</span>(c &lt;= <span class="number">0</span>)</span><br><span class="line">                msg += <span class="string">"c is negative"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(msg);</span></span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">isTriangle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String msg = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(a+b &gt; c &amp;&amp; a+c &gt; b &amp;&amp; b+c &gt; a)&#123;</span><br><span class="line">            msg = <span class="string">"triangle"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            msg = <span class="string">"not a triangle"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(msg);</span></span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">isIsosceles</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String msg = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(a == b || b == c || c == a)&#123;</span><br><span class="line">            msg = <span class="string">"isosceles"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            msg = <span class="string">"not isosceles"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(msg);</span></span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">isEquilateral</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String msg = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(a == b &amp; b == c)&#123;</span><br><span class="line">            msg = <span class="string">"equilateral"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            msg = <span class="string">"not equilateral"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(msg);</span></span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">judge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String msg = <span class="string">""</span>;</span><br><span class="line">        msg = <span class="keyword">this</span>.isPositive();</span><br><span class="line">        <span class="keyword">if</span>(msg.equals(<span class="string">"positive"</span>))&#123;</span><br><span class="line">            msg = <span class="keyword">this</span>.isTriangle();</span><br><span class="line">            <span class="keyword">if</span>(msg.equals(<span class="string">"triangle"</span>))&#123;</span><br><span class="line">                msg = <span class="keyword">this</span>.isIsosceles();</span><br><span class="line">                <span class="keyword">if</span>(msg.equals(<span class="string">"isosceles"</span>))&#123;</span><br><span class="line">                    msg = <span class="keyword">this</span>.isEquilateral();</span><br><span class="line">                    <span class="keyword">if</span>(!msg.equals(<span class="string">"equilateral"</span>))&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">"isosceles"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"triangle"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Create new source folder test and create com.Triangle package similarly</li><li>Write several classes for test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Triangle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.Triangle.Triangle;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JudgeTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">private</span> String expected;</span><br><span class="line">    <span class="keyword">private</span> Triangle triangle;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JudgeTest</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, String expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">        <span class="keyword">this</span>.expected = expected;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before Judge Test"</span>);</span><br><span class="line">        <span class="keyword">this</span>.triangle = <span class="keyword">new</span> Triangle(<span class="keyword">this</span>.a, <span class="keyword">this</span>.b, <span class="keyword">this</span>.c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After Judge Test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Parameters</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Object[]&gt; getData()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">            &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="string">"equilateral"</span>&#125;,</span><br><span class="line">            &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>, <span class="string">"isosceles"</span>&#125;,</span><br><span class="line">            &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, <span class="string">"triangle"</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="string">"not a triangle"</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>, <span class="string">"a is negative"</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,-<span class="number">2</span>,<span class="number">1</span>, <span class="string">"b is negative"</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">1</span>,-<span class="number">2</span>, <span class="string">"c is negative"</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="keyword">this</span>.expected, triangle.judge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>In order to practice @Runwith(Suite.class), I also write some other test classes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Triangle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.Triangle.Triangle;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PositiveTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">private</span> String expected;</span><br><span class="line">    <span class="keyword">private</span> Triangle triangle;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PositiveTest</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, String expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">        <span class="keyword">this</span>.expected = expected;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before Positive Test"</span>);</span><br><span class="line">        <span class="keyword">this</span>.triangle = <span class="keyword">new</span> Triangle(<span class="keyword">this</span>.a, <span class="keyword">this</span>.b, <span class="keyword">this</span>.c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After Positive Test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Parameters</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Object[]&gt; getData()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">            &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="string">"positive"</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="keyword">this</span>.expected, triangle.isPositive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Triangle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.Triangle.Triangle;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriangleTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">private</span> String expected;</span><br><span class="line">    <span class="keyword">private</span> Triangle triangle;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TriangleTest</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, String expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">        <span class="keyword">this</span>.expected = expected;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before Triangle Test"</span>);</span><br><span class="line">        <span class="keyword">this</span>.triangle = <span class="keyword">new</span> Triangle(<span class="keyword">this</span>.a, <span class="keyword">this</span>.b, <span class="keyword">this</span>.c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After Triangle Test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Parameters</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Object[]&gt; getData()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">            &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="string">"triangle"</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="keyword">this</span>.expected, triangle.isTriangle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Triangle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.Triangle.Triangle;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsoscelesTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">private</span> String expected;</span><br><span class="line">    <span class="keyword">private</span> Triangle triangle;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IsoscelesTest</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, String expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">        <span class="keyword">this</span>.expected = expected;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before Isosceles Test"</span>);</span><br><span class="line">        <span class="keyword">this</span>.triangle = <span class="keyword">new</span> Triangle(<span class="keyword">this</span>.a, <span class="keyword">this</span>.b, <span class="keyword">this</span>.c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After Isosceles Test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Parameters</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Object[]&gt; getData()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">            &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="string">"isosceles"</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="keyword">this</span>.expected, triangle.isIsosceles());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Triangle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.Triangle.Triangle;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EquilateralTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">private</span> String expected;</span><br><span class="line">    <span class="keyword">private</span> Triangle triangle;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EquilateralTest</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, String expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">        <span class="keyword">this</span>.expected = expected;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before Equilateral Test"</span>);</span><br><span class="line">        <span class="keyword">this</span>.triangle = <span class="keyword">new</span> Triangle(<span class="keyword">this</span>.a, <span class="keyword">this</span>.b, <span class="keyword">this</span>.c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After Equilateral Test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Parameters</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Object[]&gt; getData()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">            &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="string">"equilateral"</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="keyword">this</span>.expected, triangle.isEquilateral());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> SuiteTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Triangle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite.SuiteClasses;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite.class)</span><br><span class="line"><span class="meta">@SuiteClasses</span>(&#123; PositiveTest.class, TriangleTest.class , IsoscelesTest.class, EquilateralTest.class, JudgeTest.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuiteTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Result</p><p>Click right key on SuiteTest.java -&gt; Coverage as -&gt; JUnit Test</p></li></ul><p><img src="https://images2015.cnblogs.com/blog/1111233/201703/1111233-20170310162310264-1271838870.png" alt="img"></p><p>Except SuiteTest.java itself hasn’t been covered, other classes have been covered already.</p><p>If run PositiveTest.java individually, there will be more paths that won’t be covered</p><p><img src="https://images2015.cnblogs.com/blog/1111233/201703/1111233-20170310162220717-1135912720.png" alt="img"></p><p> Green: All Covered</p><p> Red: All Missed</p><p> Yellow: Some Branches Missed</p>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/03/junit/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Selenium脚本的录制和导出</title>
      <link>https://www.ph0en1x.space/2018/01/02/selenium/</link>
      <guid>https://www.ph0en1x.space/2018/01/02/selenium/</guid>
      <pubDate>Mon, 01 Jan 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 本篇文章将会介绍Eclipse中Junit与Eclemma插件安装与使用&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 本篇文章将会介绍Eclipse中Junit与Eclemma插件安装与使用</p></blockquote><a id="more"></a><p><a href="https://github.com/Ph0en1xGSeek/ST/tree/master/Lab2" target="_blank" rel="noopener">完整代码</a></p><h2 id="一、打开Selenium-IDE附加组件"><a href="#一、打开Selenium-IDE附加组件" class="headerlink" title="一、打开Selenium IDE附加组件"></a>一、打开Selenium IDE附加组件</h2><ul><li><p>选择较老版本的Firefox浏览器到应用商店下载Selenium IDE，安装后打开如图所示：</p><p><img src="https://images2015.cnblogs.com/blog/1111233/201703/1111233-20170324164522643-2082486065.png" alt="img"></p></li></ul><ul><li>配置Selenium WebDriver环境</li></ul><p>　　　　向工程内导入如下的jar包（可以准备一个javacsv来辅助后面的实验）</p><p> <img src="https://images2015.cnblogs.com/blog/1111233/201703/1111233-20170324164544736-1977282967.png" alt="img"></p><ul><li>录制脚本</li></ul><p>　　　　使用Selenium IDE录制脚本后可以很方便的导出，可以直接在导出的代码上进行修改。</p><p>　　　　打开Selenium IDE</p><p> <img src="https://images2015.cnblogs.com/blog/1111233/201703/1111233-20170324164600518-1690782140.png" alt="img"></p><p>　　　　点击右上角的红点开始录制</p><p>　　　　进入网页输入账号密码登陆，其他网站类似</p><p> <img src="https://images2015.cnblogs.com/blog/1111233/201703/1111233-20170324164618471-649881555.png" alt="img"></p><p>　　　　点击登录跳转后，选择页面内的github地址，右键选择assertText</p><p> <img src="https://images2015.cnblogs.com/blog/1111233/201703/1111233-20170324164632690-2019881177.png" alt="img"></p><p>　　　　再次点击红点完成录制</p><ul><li>导出脚本</li></ul><p>　　　　点击Optinons-&gt;Options，勾选Enable experimental features</p><p>　　　　通过Options–&gt;Format选择要导出成的相应格式。</p><p>　　　　选择Java / JUnit 4/ WebDriver</p><p>　　　　得到生成的Java文件，复制到工程中完成脚本导出</p><ul><li>编写完整代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.WebDriveTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.*;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.*;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.firefox.FirefoxDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.csvreader.CsvReader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebDriveTest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> WebDriver driver;</span><br><span class="line">  <span class="keyword">private</span> String baseUrl;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> acceptNextAlert = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> StringBuffer verificationErrors = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">  <span class="keyword">private</span> String id, pwd,address;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">WebDriveTest</span><span class="params">(String id, String address)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">      <span class="keyword">this</span>.pwd = id.substring(<span class="number">4</span>);</span><br><span class="line">      <span class="keyword">this</span>.address = address;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    driver = <span class="keyword">new</span> FirefoxDriver();</span><br><span class="line">    baseUrl = <span class="string">"http://121.193.130.195:8080"</span>;</span><br><span class="line">    driver.manage().timeouts().implicitlyWait(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Parameters</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Object[]&gt; getData() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      Object[][] obj = <span class="keyword">new</span> Object[<span class="number">118</span>][];</span><br><span class="line">      CsvReader r = <span class="keyword">new</span> CsvReader(<span class="string">"D:\\CIA\\大三下\\软测\\inputgit.csv"</span>, <span class="string">','</span>,</span><br><span class="line">              Charset.forName(<span class="string">"GBK"</span>));</span><br><span class="line">       <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">       r.readHeaders();</span><br><span class="line">       <span class="keyword">while</span>(r.readRecord())&#123;</span><br><span class="line">           obj[count] = <span class="keyword">new</span> Object[]&#123;r.get(<span class="number">0</span>), r.get(<span class="number">2</span>)&#125;;</span><br><span class="line">           count++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Arrays.asList(obj);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUntitled2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    driver.get(baseUrl + <span class="string">"/"</span>);</span><br><span class="line">    driver.findElement(By.id(<span class="string">"name"</span>)).clear();</span><br><span class="line">    driver.findElement(By.id(<span class="string">"name"</span>)).sendKeys(<span class="keyword">this</span>.id);</span><br><span class="line">    driver.findElement(By.id(<span class="string">"pwd"</span>)).clear();</span><br><span class="line">    driver.findElement(By.id(<span class="string">"pwd"</span>)).sendKeys(<span class="keyword">this</span>.pwd);</span><br><span class="line">    driver.findElement(By.id(<span class="string">"submit"</span>)).click();</span><br><span class="line">    assertEquals(<span class="keyword">this</span>.address, driver.findElement(By.xpath(<span class="string">"//tbody[@id='table-main']/tr[3]/td[2]"</span>)).getText());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@After</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    driver.quit();</span><br><span class="line">    String verificationErrorString = verificationErrors.toString();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">""</span>.equals(verificationErrorString)) &#123;</span><br><span class="line">      fail(verificationErrorString);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isElementPresent</span><span class="params">(By by)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      driver.findElement(by);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAlertPresent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      driver.switchTo().alert();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoAlertPresentException e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">closeAlertAndGetItsText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Alert alert = driver.switchTo().alert();</span><br><span class="line">      String alertText = alert.getText();</span><br><span class="line">      <span class="keyword">if</span> (acceptNextAlert) &#123;</span><br><span class="line">        alert.accept();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert.dismiss();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> alertText;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      acceptNextAlert = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>实验结果</p><p><img src="https://images2015.cnblogs.com/blog/1111233/201703/1111233-20170324164833018-887803210.jpg" alt="img"></p></li></ul>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/02/selenium/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用Hexo快速搭建自己的博客</title>
      <link>https://www.ph0en1x.space/2018/01/01/hexo/</link>
      <guid>https://www.ph0en1x.space/2018/01/01/hexo/</guid>
      <pubDate>Sun, 31 Dec 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 本篇文章将会介绍如何使用hexo来搭建静态页面博客，并套用目前最多人使用的NexT模版&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p> 本篇文章将会介绍如何使用hexo来搭建静态页面博客，并套用目前最多人使用的NexT模版</p></blockquote><a id="more"></a><h2 id="一、需要准备的工具"><a href="#一、需要准备的工具" class="headerlink" title="一、需要准备的工具"></a>一、需要准备的工具</h2><ul><li><p>Node.js</p><p>Hexo使用node.js进行静态页面的生成，到 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a>  下载当前最新的node.js进行安装</p></li><li><p>hexo</p><p>hexo官网：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a> 上面有非常完整的文档</p><p>安装node.js完成后在控制台应该就能够直接使用npm，如果不能使用，可以在环境变量中系统变量中的Path添加npm</p><p>安装hexo的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>分别为安装hexo、创建博客的根目录、进入博客根目录、初始化目录</p></li></ul><h2 id="二、配置博客"><a href="#二、配置博客" class="headerlink" title="二、配置博客"></a>二、配置博客</h2><p>打开博客根目录下的<code>_config.yml</code>文件进行修改，这里先讲几个最主要的修改，在之后的配置过程中会进一步对这个文件进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 博客名</span><br><span class="line">subtitle: 博客子标题</span><br><span class="line">description: 博客的一段描述</span><br><span class="line">author: 作者</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure><p><strong>这里要注意一点，每项设置冒号: 后面一定要留一个空格</strong></p><p>如果使用git pages来作为博客的托管，并且已经创建好<code>githubname.github.io</code>的仓库的话，按下面这么改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourName/YourName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h2 id="三、编写并部署博客"><a href="#三、编写并部署博客" class="headerlink" title="三、编写并部署博客"></a>三、编写并部署博客</h2><ul><li><p>创建博客</p><p>在博客根目录，控制台中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"new"</span></span><br></pre></td></tr></table></figure><p>在<code>/source/_post</code>下创建名为new的新博客</p></li><li><p>清除缓存</p><p>每次重新生成博客之前最好要进行这一步操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure></li><li><p>生成博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">or</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></li><li><p>开启服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">or</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>默认会打开在<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p></li><li><p>部署博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">or</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>hexo将会将生成的博客push到之前配置文件中定义好的repo中</p></li></ul><h2 id="四、套用模版"><a href="#四、套用模版" class="headerlink" title="四、套用模版"></a>四、套用模版</h2><p>hexo有非常多的模版，其中最常见的模版之一就是nexT模版，也是文档相对完善的一套主题</p><p>官网：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p><p><img src="http://theme-next.iissnan.com/assets/img/NextSchemes3.png" alt="NexT Schemes"></p><p>到官网上下载，或者到作者的github上下载相应主题文件后，在<code>/themes</code>下创建一个文件夹<code>next</code>并将下载的子文件拷贝到其下</p><p>然后修改<strong>博客的配置文件</strong><code>_config.yml</code>（注意：下载的主题文件中也有同名的配置文件，以后会以<strong>主题的配置文件</strong>加以区分）</p><p>重新清理–&gt;生成–&gt;查看–&gt;部署，然后登录自己博客的主页看看效果吧！</p><h2 id="五、SEO"><a href="#五、SEO" class="headerlink" title="五、SEO"></a>五、SEO</h2><ul><li><p>安装sitemap</p><p>进入根目录，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure></li><li><p>在站点<code>配置文件 _condig.yml</code>中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">##自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">path: baidusitemap.xml</span><br></pre></td></tr></table></figure></li><li><p>在站点<code>配置文件 _condig.yml</code>中修改url为首页地址</p></li><li><p>重新生成并部署</p></li><li><p>提交sitemap</p><p>在百度站长工具中链接提交中选择sitemap提交方式，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yoursite.com/baidusitemap.xml</span><br></pre></td></tr></table></figure><p>谷歌也可以以类似的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yoursite.com/sitemap.xml</span><br></pre></td></tr></table></figure></li><li><p>如果是新网站，可能需要验证网站所有权，谷歌可以使用Google Analyze直接验证，或者百度和谷歌都可以提交HTML标签来验证。</p><p>将提供的<code>&lt;meta&gt;</code>标签加入<code>\themes\next\layout\_partials</code>下的<code>head.swig</code>中最上方重新生成上传，然后在百度谷歌中点验证就可以了</p></li></ul><h2 id="六、Fancybox开启图片放大缩小"><a href="#六、Fancybox开启图片放大缩小" class="headerlink" title="六、Fancybox开启图片放大缩小"></a>六、Fancybox开启图片放大缩小</h2><ul><li><p>安装与更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf themes/next/<span class="built_in">source</span>/lib/fancybox</span><br><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-fancybox3 <span class="built_in">source</span>/lib/fancybox</span><br></pre></td></tr></table></figure></li></ul><h2 id="七、添加分享功能"><a href="#七、添加分享功能" class="headerlink" title="七、添加分享功能"></a>七、添加分享功能</h2><p><strong>主题配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">needmoreshare2:</span><br><span class="line">  enable: true</span><br><span class="line">  postbottom:</span><br><span class="line">    enable: false</span><br><span class="line">    options:</span><br><span class="line">      iconStyle: box</span><br><span class="line">      boxForm: horizontal</span><br><span class="line">      position: bottomCenter</span><br><span class="line">      networks: Weibo,Wechat,Douban,QQZone</span><br><span class="line">  float:</span><br><span class="line">    enable: true</span><br><span class="line">    options:</span><br><span class="line">      iconStyle: box</span><br><span class="line">      boxForm: vertical</span><br><span class="line">      position: middleRight</span><br><span class="line">      networks: Weibo,Wechat,Douban,QQZone</span><br></pre></td></tr></table></figure><p><a href="https://github.com/theme-next/theme-next-needmoreshare2" target="_blank" rel="noopener">see more</a></p><ul><li><p>在<code>站点配置文件</code> <code>_config.yml</code>中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fancybox: true</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://www.ph0en1x.space/2018/01/01/hexo/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
